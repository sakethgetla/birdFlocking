// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"buQZA":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "83fb466f6d8e38f9";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"jSHEf":[function(require,module,exports) {
// require('@tensorflow/tfjs-backend-cpu');
// var tf = require( '@tensorflow/tfjs-core');
// import * as tf from;
var _tfjsBackendCpu = require("@tensorflow/tfjs-backend-cpu");
var _tfjsCore = require("@tensorflow/tfjs-core");
var Engine = function(global) {
    var doc = global.document, win = global.window, canvas = doc.createElement("canvas"), ctx = canvas.getContext("2d"), lastTime = 0;
    canvas.width = 707;
    canvas.height = 606;
    doc.body.appendChild(canvas);
    global.ctx = ctx;
    const FPS = 50;
    const timestep = 1000 / FPS;
    var x = 0;
    let frameSize = [
        500,
        500
    ];
    const numBodies = 15;
    // let bodies: { pos: tf.Tensor, vel: tf.Tensor, size: number };
    function init() {
        console.log("init");
        console.log("init");
        let pos = _tfjsCore.randomUniform([
            numBodies,
            2
        ], 0, frameSize[0] * 0.2);
        let vel = _tfjsCore.randomUniform([
            numBodies,
            2
        ], -0.1, 0.2);
        // let pos = null, vel = null;
        // vel = tf.tensor([1,2,3])
        // vel = tf.rand
        vel.print();
        bodies = {
            pos,
            vel,
            size: 5
        };
        main();
    }
    function main() {
        // console.log('main');
        var now = Date.now(), dt = now - lastTime;
        // console.log('time', now, lastTime, dt);
        if (dt > timestep) {
            update();
            lastTime = now;
        }
        // render();
        // update();
        // if (game_over === true) {
        //   // refresh();
        // }
        win.requestAnimationFrame(main);
    }
    function update() {
        ctx.beginPath();
        ctx.clearRect(0, 0, frameSize[0], frameSize[1]);
        ctx.strokeRect(0, 0, frameSize[0], frameSize[1]);
        // cohesion
        let avgPos = _tfjsCore.sum(bodies.pos, 0);
        avgPos = _tfjsCore.sub(avgPos, bodies.pos);
        avgPos = _tfjsCore.mul(avgPos, 1 / (numBodies - 1));
        avgPos = _tfjsCore.sub(avgPos, bodies.pos);
        // let forces = tf.mul(avgPos, 0.001);
        // forces = tf.mul(avgPos, 0.001);
        forces = _tfjsCore.divNoNan(avgPos, 500);
        // forces.print();
        bodies.vel = _tfjsCore.add(bodies.vel, forces);
        // alignment
        // add all velocities
        let avgVel = _tfjsCore.sum(bodies.vel, 0);
        avgVel = _tfjsCore.sub(avgVel, bodies.vel);
        avgVel = _tfjsCore.divNoNan(avgVel, (numBodies - 1) * 100);
        // avgVel = tf.mul(avgVel, 0.001/(numBodies-1));
        bodies.vel = _tfjsCore.add(bodies.vel, avgVel);
        // separation
        let x = _tfjsCore.zeros([
            numBodies,
            numBodies,
            2
        ]);
        x = _tfjsCore.add(x, bodies.pos);
        // x.print();
        // console.log(x.shape);
        x = _tfjsCore.sub(_tfjsCore.transpose(x, [
            1,
            0,
            2
        ]), x);
        let y;
        y = _tfjsCore.pow(x, 2);
        y = _tfjsCore.sum(y, 2);
        // y = tf.pow(y, -1.1);
        y = _tfjsCore.divNoNan(1, y);
        // y.print();
        // console.log(y.shape);
        // x =
        // y = tf.clipByValue(y, 0, 10);
        // x = tf.clipByValue(x, 0, 10);
        x = _tfjsCore.transpose(_tfjsCore.mul(_tfjsCore.transpose(x), _tfjsCore.transpose(y)));
        // x.print();
        // x = tf.clipByValue(x, 0, 10);
        // x.print();
        x = _tfjsCore.sum(x, 1);
        // x.print();
        bodies.vel = _tfjsCore.add(bodies.vel, x);
        let pos = bodies.pos.bufferSync();
        let dirPos = _tfjsCore.add(bodies.pos, _tfjsCore.mul(bodies.vel, 15)).bufferSync();
        for(var i = 0; i < numBodies; ++i){
            ctx.beginPath();
            ctx.arc(pos.get(i, 0), pos.get(i, 1), bodies.size, 0, 2 * Math.PI);
            ctx.moveTo(pos.get(i, 0), pos.get(i, 1));
            ctx.lineTo(dirPos.get(i, 0), dirPos.get(i, 1));
            ctx.stroke();
        }
        bodies.pos = _tfjsCore.add(bodies.pos, bodies.vel);
    // ctx.rect(x, x, 100, 100);
    // ctx.fill();
    // // canvas.getContext('2d').begin()
    // x++;
    }
    init();
    global.ctx = ctx;
};
window.onload = function() {
    console.log("load");
    // window.onload = Engine(this);
    var a = Engine(this);
// a.init();
};

},{"@tensorflow/tfjs-backend-cpu":"alTEC","@tensorflow/tfjs-core":"2votT"}],"alTEC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _registerAllKernels = require("./register_all_kernels");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // All exports from this package should be in base.
var _base = require("./base");
parcelHelpers.exportAll(_base, exports);

},{"./register_all_kernels":"5JcZT","./base":"gHXpH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5JcZT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.
var _tfjsCore = require("@tensorflow/tfjs-core");
var _fusedMatMul = require("./kernels/_FusedMatMul");
var _abs = require("./kernels/Abs");
var _acos = require("./kernels/Acos");
var _acosh = require("./kernels/Acosh");
var _add = require("./kernels/Add");
var _addN = require("./kernels/AddN");
var _all = require("./kernels/All");
var _any = require("./kernels/Any");
var _argMax = require("./kernels/ArgMax");
var _argMin = require("./kernels/ArgMin");
var _asin = require("./kernels/Asin");
var _asinh = require("./kernels/Asinh");
var _atan = require("./kernels/Atan");
var _atan2 = require("./kernels/Atan2");
var _atanh = require("./kernels/Atanh");
var _avgPool = require("./kernels/AvgPool");
var _avgPool3D = require("./kernels/AvgPool3D");
var _avgPool3DGrad = require("./kernels/AvgPool3DGrad");
var _avgPoolGrad = require("./kernels/AvgPoolGrad");
var _batchMatMul = require("./kernels/BatchMatMul");
var _batchNorm = require("./kernels/BatchNorm");
var _batchToSpaceND = require("./kernels/BatchToSpaceND");
var _bincount = require("./kernels/Bincount");
var _broadcastArgs = require("./kernels/BroadcastArgs");
var _cast = require("./kernels/Cast");
var _ceil = require("./kernels/Ceil");
var _clipByValue = require("./kernels/ClipByValue");
var _complex = require("./kernels/Complex");
var _complexAbs = require("./kernels/ComplexAbs");
var _concat = require("./kernels/Concat");
var _conv2D = require("./kernels/Conv2D");
var _conv2DBackpropFilter = require("./kernels/Conv2DBackpropFilter");
var _conv2DBackpropInput = require("./kernels/Conv2DBackpropInput");
var _conv3D = require("./kernels/Conv3D");
var _conv3DBackpropFilterV2 = require("./kernels/Conv3DBackpropFilterV2");
var _conv3DBackpropInputV2 = require("./kernels/Conv3DBackpropInputV2");
var _cos = require("./kernels/Cos");
var _cosh = require("./kernels/Cosh");
var _cropAndResize = require("./kernels/CropAndResize");
var _cumprod = require("./kernels/Cumprod");
var _cumsum = require("./kernels/Cumsum");
var _denseBincount = require("./kernels/DenseBincount");
var _depthToSpace = require("./kernels/DepthToSpace");
var _depthwiseConv2DNative = require("./kernels/DepthwiseConv2dNative");
var _depthwiseConv2DNativeBackpropFilter = require("./kernels/DepthwiseConv2dNativeBackpropFilter");
var _depthwiseConv2DNativeBackpropInput = require("./kernels/DepthwiseConv2dNativeBackpropInput");
var _diag = require("./kernels/Diag");
var _dilation2D = require("./kernels/Dilation2D");
var _dilation2DBackpropFilter = require("./kernels/Dilation2DBackpropFilter");
var _dilation2DBackpropInput = require("./kernels/Dilation2DBackpropInput");
var _einsum = require("./kernels/Einsum");
var _elu = require("./kernels/Elu");
var _eluGrad = require("./kernels/EluGrad");
var _equal = require("./kernels/Equal");
var _erf = require("./kernels/Erf");
var _exp = require("./kernels/Exp");
var _expandDims = require("./kernels/ExpandDims");
var _expm1 = require("./kernels/Expm1");
var _fft = require("./kernels/FFT");
var _fill = require("./kernels/Fill");
var _flipLeftRight = require("./kernels/FlipLeftRight");
var _floor = require("./kernels/Floor");
var _floorDiv = require("./kernels/FloorDiv");
var _fusedConv2D = require("./kernels/FusedConv2D");
var _fusedDepthwiseConv2D = require("./kernels/FusedDepthwiseConv2D");
var _gatherNd = require("./kernels/GatherNd");
var _gatherV2 = require("./kernels/GatherV2");
var _greater = require("./kernels/Greater");
var _greaterEqual = require("./kernels/GreaterEqual");
var _identity = require("./kernels/Identity");
var _ifft = require("./kernels/IFFT");
var _imag = require("./kernels/Imag");
var _isFinite = require("./kernels/IsFinite");
var _isInf = require("./kernels/IsInf");
var _isNaN = require("./kernels/IsNaN");
var _leakyRelu = require("./kernels/LeakyRelu");
var _less = require("./kernels/Less");
var _lessEqual = require("./kernels/LessEqual");
var _linSpace = require("./kernels/LinSpace");
var _log = require("./kernels/Log");
var _log1P = require("./kernels/Log1p");
var _logicalAnd = require("./kernels/LogicalAnd");
var _logicalNot = require("./kernels/LogicalNot");
var _logicalOr = require("./kernels/LogicalOr");
var _lrn = require("./kernels/LRN");
var _lrngrad = require("./kernels/LRNGrad");
var _max = require("./kernels/Max");
var _maximum = require("./kernels/Maximum");
var _maxPool = require("./kernels/MaxPool");
var _maxPool3D = require("./kernels/MaxPool3D");
var _maxPool3DGrad = require("./kernels/MaxPool3DGrad");
var _maxPoolGrad = require("./kernels/MaxPoolGrad");
var _maxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");
var _mean = require("./kernels/Mean");
var _min = require("./kernels/Min");
var _minimum = require("./kernels/Minimum");
var _mirrorPad = require("./kernels/MirrorPad");
var _mod = require("./kernels/Mod");
var _multinomial = require("./kernels/Multinomial");
var _multiply = require("./kernels/Multiply");
var _neg = require("./kernels/Neg");
var _nonMaxSuppressionV3 = require("./kernels/NonMaxSuppressionV3");
var _nonMaxSuppressionV4 = require("./kernels/NonMaxSuppressionV4");
var _nonMaxSuppressionV5 = require("./kernels/NonMaxSuppressionV5");
var _notEqual = require("./kernels/NotEqual");
var _oneHot = require("./kernels/OneHot");
var _onesLike = require("./kernels/OnesLike");
var _pack = require("./kernels/Pack");
var _padV2 = require("./kernels/PadV2");
var _pow = require("./kernels/Pow");
var _prelu = require("./kernels/Prelu");
var _prod = require("./kernels/Prod");
var _raggedTensorToTensor = require("./kernels/RaggedTensorToTensor");
var _range = require("./kernels/Range");
var _real = require("./kernels/Real");
var _realDiv = require("./kernels/RealDiv");
var _reciprocal = require("./kernels/Reciprocal");
var _relu = require("./kernels/Relu");
var _relu6 = require("./kernels/Relu6");
var _reshape = require("./kernels/Reshape");
var _resizeBilinear = require("./kernels/ResizeBilinear");
var _resizeBilinearGrad = require("./kernels/ResizeBilinearGrad");
var _resizeNearestNeighbor = require("./kernels/ResizeNearestNeighbor");
var _resizeNearestNeighborGrad = require("./kernels/ResizeNearestNeighborGrad");
var _reverse = require("./kernels/Reverse");
var _rotateWithOffset = require("./kernels/RotateWithOffset");
var _round = require("./kernels/Round");
var _rsqrt = require("./kernels/Rsqrt");
var _scatterNd = require("./kernels/ScatterNd");
var _searchSorted = require("./kernels/SearchSorted");
var _select = require("./kernels/Select");
var _selu = require("./kernels/Selu");
var _sigmoid = require("./kernels/Sigmoid");
var _sign = require("./kernels/Sign");
var _sin = require("./kernels/Sin");
var _sinh = require("./kernels/Sinh");
var _slice = require("./kernels/Slice");
var _softmax = require("./kernels/Softmax");
var _softplus = require("./kernels/Softplus");
var _spaceToBatchND = require("./kernels/SpaceToBatchND");
var _sparseFillEmptyRows = require("./kernels/SparseFillEmptyRows");
var _sparseReshape = require("./kernels/SparseReshape");
var _sparseSegmentMean = require("./kernels/SparseSegmentMean");
var _sparseSegmentSum = require("./kernels/SparseSegmentSum");
var _sparseToDense = require("./kernels/SparseToDense");
var _splitV = require("./kernels/SplitV");
var _sqrt = require("./kernels/Sqrt");
var _square = require("./kernels/Square");
var _squaredDifference = require("./kernels/SquaredDifference");
var _step = require("./kernels/Step");
var _stridedSlice = require("./kernels/StridedSlice");
var _stringNGrams = require("./kernels/StringNGrams");
var _stringSplit = require("./kernels/StringSplit");
var _stringToHashBucketFast = require("./kernels/StringToHashBucketFast");
var _sub = require("./kernels/Sub");
var _sum = require("./kernels/Sum");
var _tan = require("./kernels/Tan");
var _tanh = require("./kernels/Tanh");
var _tile = require("./kernels/Tile");
var _topK = require("./kernels/TopK");
var _transform = require("./kernels/Transform");
var _transpose = require("./kernels/Transpose");
var _unique = require("./kernels/Unique");
var _unpack = require("./kernels/Unpack");
var _unsortedSegmentSum = require("./kernels/UnsortedSegmentSum");
var _zerosLike = require("./kernels/ZerosLike");
// List all kernel configs here
const kernelConfigs = [
    (0, _fusedMatMul._fusedMatMulConfig),
    (0, _abs.absConfig),
    (0, _acos.acosConfig),
    (0, _acosh.acoshConfig),
    (0, _add.addConfig),
    (0, _addN.addNConfig),
    (0, _all.allConfig),
    (0, _any.anyConfig),
    (0, _argMax.argMaxConfig),
    (0, _argMin.argMinConfig),
    (0, _asin.asinConfig),
    (0, _asinh.asinhConfig),
    (0, _atan.atanConfig),
    (0, _atan2.atan2Config),
    (0, _atanh.atanhConfig),
    (0, _avgPool.avgPoolConfig),
    (0, _avgPool3D.avgPool3DConfig),
    (0, _avgPool3DGrad.avgPool3DGradConfig),
    (0, _avgPoolGrad.avgPoolGradConfig),
    (0, _batchMatMul.batchMatMulConfig),
    (0, _batchNorm.batchNormConfig),
    (0, _batchToSpaceND.batchToSpaceNDConfig),
    (0, _bincount.bincountConfig),
    (0, _broadcastArgs.broadcastArgsConfig),
    (0, _cast.castConfig),
    (0, _ceil.ceilConfig),
    (0, _clipByValue.clipByValueConfig),
    (0, _complex.complexConfig),
    (0, _complexAbs.complexAbsConfig),
    (0, _concat.concatConfig),
    (0, _conv2D.conv2DConfig),
    (0, _conv2DBackpropFilter.conv2DBackpropFilterConfig),
    (0, _conv2DBackpropInput.conv2DBackpropInputConfig),
    (0, _conv3D.conv3DConfig),
    (0, _conv3DBackpropFilterV2.conv3DBackpropFilterV2Config),
    (0, _conv3DBackpropInputV2.conv3DBackpropInputV2Config),
    (0, _cos.cosConfig),
    (0, _cosh.coshConfig),
    (0, _cropAndResize.cropAndResizeConfig),
    (0, _cumprod.cumprodConfig),
    (0, _cumsum.cumsumConfig),
    (0, _denseBincount.denseBincountConfig),
    (0, _depthToSpace.depthToSpaceConfig),
    (0, _depthwiseConv2DNative.depthwiseConv2dNativeConfig),
    (0, _depthwiseConv2DNativeBackpropFilter.depthwiseConv2dNativeBackpropFilterConfig),
    (0, _depthwiseConv2DNativeBackpropInput.depthwiseConv2dNativeBackpropInputConfig),
    (0, _diag.diagConfig),
    (0, _dilation2D.dilation2DConfig),
    (0, _dilation2DBackpropFilter.dilation2DBackpropFilterConfig),
    (0, _dilation2DBackpropInput.dilation2DBackpropInputConfig),
    (0, _einsum.einsumConfig),
    (0, _elu.eluConfig),
    (0, _eluGrad.eluGradConfig),
    (0, _equal.equalConfig),
    (0, _erf.erfConfig),
    (0, _exp.expConfig),
    (0, _expandDims.expandDimsConfig),
    (0, _expm1.expm1Config),
    (0, _fft.fftConfig),
    (0, _fill.fillConfig),
    (0, _flipLeftRight.flipLeftRightConfig),
    (0, _floor.floorConfig),
    (0, _floorDiv.floorDivConfig),
    (0, _fusedConv2D.fusedConv2DConfig),
    (0, _fusedDepthwiseConv2D.fusedDepthwiseConv2DConfig),
    (0, _gatherNd.gatherNdConfig),
    (0, _gatherV2.gatherV2Config),
    (0, _greater.greaterConfig),
    (0, _greaterEqual.greaterEqualConfig),
    (0, _identity.identityConfig),
    (0, _ifft.ifftConfig),
    (0, _imag.imagConfig),
    (0, _isFinite.isFiniteConfig),
    (0, _isInf.isInfConfig),
    (0, _isNaN.isNaNConfig),
    (0, _leakyRelu.leakyReluConfig),
    (0, _less.lessConfig),
    (0, _lessEqual.lessEqualConfig),
    (0, _linSpace.linSpaceConfig),
    (0, _log.logConfig),
    (0, _log1P.log1pConfig),
    (0, _logicalAnd.logicalAndConfig),
    (0, _logicalNot.logicalNotConfig),
    (0, _logicalOr.logicalOrConfig),
    (0, _lrn.LRNConfig),
    (0, _lrngrad.LRNGradConfig),
    (0, _max.maxConfig),
    (0, _maximum.maximumConfig),
    (0, _maxPool.maxPoolConfig),
    (0, _maxPool3D.maxPool3DConfig),
    (0, _maxPool3DGrad.maxPool3DGradConfig),
    (0, _maxPoolGrad.maxPoolGradConfig),
    (0, _maxPoolWithArgmax.maxPoolWithArgmaxConfig),
    (0, _mean.meanConfig),
    (0, _min.minConfig),
    (0, _minimum.minimumConfig),
    (0, _mirrorPad.mirrorPadConfig),
    (0, _mod.modConfig),
    (0, _multinomial.multinomialConfig),
    (0, _multiply.multiplyConfig),
    (0, _neg.negConfig),
    (0, _nonMaxSuppressionV3.nonMaxSuppressionV3Config),
    (0, _nonMaxSuppressionV4.nonMaxSuppressionV4Config),
    (0, _nonMaxSuppressionV5.nonMaxSuppressionV5Config),
    (0, _notEqual.notEqualConfig),
    (0, _oneHot.oneHotConfig),
    (0, _onesLike.onesLikeConfig),
    (0, _pack.packConfig),
    (0, _padV2.padV2Config),
    (0, _pow.powConfig),
    (0, _prelu.preluConfig),
    (0, _prod.prodConfig),
    (0, _raggedTensorToTensor.raggedTensorToTensorConfig),
    (0, _range.rangeConfig),
    (0, _real.realConfig),
    (0, _realDiv.realDivConfig),
    (0, _reciprocal.reciprocalConfig),
    (0, _relu.reluConfig),
    (0, _relu6.relu6Config),
    (0, _reshape.reshapeConfig),
    (0, _resizeBilinear.resizeBilinearConfig),
    (0, _resizeBilinearGrad.resizeBilinearGradConfig),
    (0, _resizeNearestNeighbor.resizeNearestNeighborConfig),
    (0, _resizeNearestNeighborGrad.resizeNearestNeighborGradConfig),
    (0, _reverse.reverseConfig),
    (0, _rotateWithOffset.rotateWithOffsetConfig),
    (0, _round.roundConfig),
    (0, _rsqrt.rsqrtConfig),
    (0, _scatterNd.scatterNdConfig),
    (0, _searchSorted.searchSortedConfig),
    (0, _select.selectConfig),
    (0, _selu.seluConfig),
    (0, _sigmoid.sigmoidConfig),
    (0, _sign.signConfig),
    (0, _sin.sinConfig),
    (0, _sinh.sinhConfig),
    (0, _slice.sliceConfig),
    (0, _softmax.softmaxConfig),
    (0, _softplus.softplusConfig),
    (0, _spaceToBatchND.spaceToBatchNDConfig),
    (0, _sparseFillEmptyRows.sparseFillEmptyRowsConfig),
    (0, _sparseReshape.sparseReshapeConfig),
    (0, _sparseSegmentMean.sparseSegmentMeanConfig),
    (0, _sparseSegmentSum.sparseSegmentSumConfig),
    (0, _sparseToDense.sparseToDenseConfig),
    (0, _splitV.splitVConfig),
    (0, _sqrt.sqrtConfig),
    (0, _square.squareConfig),
    (0, _squaredDifference.squaredDifferenceConfig),
    (0, _step.stepConfig),
    (0, _stridedSlice.stridedSliceConfig),
    (0, _stringNGrams.stringNGramsConfig),
    (0, _stringSplit.stringSplitConfig),
    (0, _stringToHashBucketFast.stringToHashBucketFastConfig),
    (0, _sub.subConfig),
    (0, _sum.sumConfig),
    (0, _tan.tanConfig),
    (0, _tanh.tanhConfig),
    (0, _tile.tileConfig),
    (0, _topK.topKConfig),
    (0, _transform.transformConfig),
    (0, _transpose.transposeConfig),
    (0, _unique.uniqueConfig),
    (0, _unpack.unpackConfig),
    (0, _unsortedSegmentSum.unsortedSegmentSumConfig),
    (0, _zerosLike.zerosLikeConfig)
];
for (const kernelConfig of kernelConfigs)(0, _tfjsCore.registerKernel)(kernelConfig);

},{"@tensorflow/tfjs-core":"2votT","./kernels/_FusedMatMul":"lS39m","./kernels/Abs":"a2UER","./kernels/Acos":"1t4Yh","./kernels/Acosh":"4qKqS","./kernels/Add":"5SGy9","./kernels/AddN":"d4Yqi","./kernels/All":"aHQJx","./kernels/Any":"4jTRz","./kernels/ArgMax":"e7RMI","./kernels/ArgMin":"vytWQ","./kernels/Asin":"l9DNk","./kernels/Asinh":"6czH3","./kernels/Atan":"hH2Zt","./kernels/Atan2":"Q1jC1","./kernels/Atanh":"b7REX","./kernels/AvgPool":"4mEHH","./kernels/AvgPool3D":"jT9BP","./kernels/AvgPool3DGrad":"hkWqC","./kernels/AvgPoolGrad":"1BQOw","./kernels/BatchMatMul":"ieudW","./kernels/BatchNorm":"iGJsR","./kernels/BatchToSpaceND":"dVLQm","./kernels/Bincount":"diXIe","./kernels/BroadcastArgs":"hrlWy","./kernels/Cast":"hBSGR","./kernels/Ceil":"2laFa","./kernels/ClipByValue":"glBpf","./kernels/Complex":"ihUM4","./kernels/ComplexAbs":"4INDe","./kernels/Concat":"1wEpn","./kernels/Conv2D":"13rOl","./kernels/Conv2DBackpropFilter":"8LOW1","./kernels/Conv2DBackpropInput":"gUbt4","./kernels/Conv3D":"9fFsS","./kernels/Conv3DBackpropFilterV2":"2ewbj","./kernels/Conv3DBackpropInputV2":"dqd30","./kernels/Cos":"eKXGp","./kernels/Cosh":"8IH4N","./kernels/CropAndResize":"1S3IR","./kernels/Cumprod":"04WrV","./kernels/Cumsum":"iNgeK","./kernels/DenseBincount":"eWoF6","./kernels/DepthToSpace":"34Mx8","./kernels/DepthwiseConv2dNative":"61IHT","./kernels/DepthwiseConv2dNativeBackpropFilter":"kCp4J","./kernels/DepthwiseConv2dNativeBackpropInput":"eyZ9H","./kernels/Diag":"lcxfE","./kernels/Dilation2D":"hGGht","./kernels/Dilation2DBackpropFilter":"e7ZbF","./kernels/Dilation2DBackpropInput":"8B3I5","./kernels/Einsum":"4WtjA","./kernels/Elu":"c1FL0","./kernels/EluGrad":"aHzcT","./kernels/Equal":"j7yhU","./kernels/Erf":"hBsUL","./kernels/Exp":"d8DGt","./kernels/ExpandDims":"8V7D8","./kernels/Expm1":"c75hq","./kernels/FFT":"MRvZK","./kernels/Fill":"5TrpK","./kernels/FlipLeftRight":"9KhWA","./kernels/Floor":"lJzfx","./kernels/FloorDiv":"5brPM","./kernels/FusedConv2D":"ey15c","./kernels/FusedDepthwiseConv2D":"8Zt4q","./kernels/GatherNd":"25v1q","./kernels/GatherV2":"d9fbm","./kernels/Greater":"ldYQI","./kernels/GreaterEqual":"lrBFx","./kernels/Identity":"9BGOC","./kernels/IFFT":"5MfqQ","./kernels/Imag":"jPu41","./kernels/IsFinite":"3JH9X","./kernels/IsInf":"i7tXW","./kernels/IsNaN":"la2Z8","./kernels/LeakyRelu":"1BRcT","./kernels/Less":"eN9G8","./kernels/LessEqual":"9iCsf","./kernels/LinSpace":"2WnpW","./kernels/Log":"hSbjw","./kernels/Log1p":"20zUa","./kernels/LogicalAnd":"iLi7X","./kernels/LogicalNot":"5UWIr","./kernels/LogicalOr":"b7cBe","./kernels/LRN":"30vQw","./kernels/LRNGrad":"IBmP2","./kernels/Max":"l27XB","./kernels/Maximum":"RXVtR","./kernels/MaxPool":"liF0x","./kernels/MaxPool3D":"hNa5k","./kernels/MaxPool3DGrad":"Jck4C","./kernels/MaxPoolGrad":"kOGoj","./kernels/MaxPoolWithArgmax":"7aetn","./kernels/Mean":"3W8X3","./kernels/Min":"byuMo","./kernels/Minimum":"gJ4x0","./kernels/MirrorPad":"2lmnj","./kernels/Mod":"9S2k0","./kernels/Multinomial":"lynEl","./kernels/Multiply":"8yTpL","./kernels/Neg":"gxJzs","./kernels/NonMaxSuppressionV3":"4ec5f","./kernels/NonMaxSuppressionV4":"acYUU","./kernels/NonMaxSuppressionV5":"fshul","./kernels/NotEqual":"cKKl8","./kernels/OneHot":"gjO62","./kernels/OnesLike":"1Wf9o","./kernels/Pack":"2K9N7","./kernels/PadV2":"fMo7E","./kernels/Pow":"k4rKF","./kernels/Prelu":"67p4X","./kernels/Prod":"6PRq1","./kernels/RaggedTensorToTensor":"87mpp","./kernels/Range":"6uKr8","./kernels/Real":"8fguZ","./kernels/RealDiv":"bCsfW","./kernels/Reciprocal":"6VKal","./kernels/Relu":"6xaOS","./kernels/Relu6":"2OBtL","./kernels/Reshape":"hjnko","./kernels/ResizeBilinear":"eK1Mp","./kernels/ResizeBilinearGrad":"cRMgQ","./kernels/ResizeNearestNeighbor":"7RAie","./kernels/ResizeNearestNeighborGrad":"3xeF7","./kernels/Reverse":"a9kqK","./kernels/RotateWithOffset":"lYbI6","./kernels/Round":"kWl4p","./kernels/Rsqrt":"7zSL0","./kernels/ScatterNd":"aLDcs","./kernels/SearchSorted":"cloK7","./kernels/Select":"iKe7b","./kernels/Selu":"cYfNI","./kernels/Sigmoid":"1n8M4","./kernels/Sign":"53qPD","./kernels/Sin":"7duRK","./kernels/Sinh":"doBRY","./kernels/Slice":"gvcFv","./kernels/Softmax":"3yg40","./kernels/Softplus":"gkAVF","./kernels/SpaceToBatchND":"a0NQX","./kernels/SparseFillEmptyRows":"enDig","./kernels/SparseReshape":"jh7eN","./kernels/SparseSegmentMean":"lL87e","./kernels/SparseSegmentSum":"eOYNl","./kernels/SparseToDense":"ivNsH","./kernels/SplitV":"lVn83","./kernels/Sqrt":"7rUbU","./kernels/Square":"5jKJA","./kernels/SquaredDifference":"b000w","./kernels/Step":"4WF4f","./kernels/StridedSlice":"5WYSw","./kernels/StringNGrams":"l4Gow","./kernels/StringSplit":"1vq5H","./kernels/StringToHashBucketFast":"l2kHX","./kernels/Sub":"anrdl","./kernels/Sum":"43iZ4","./kernels/Tan":"7q5Nu","./kernels/Tanh":"cPSOw","./kernels/Tile":"61yZu","./kernels/TopK":"kxDYZ","./kernels/Transform":"9HVZn","./kernels/Transpose":"gEhkg","./kernels/Unique":"9x6Iu","./kernels/Unpack":"5HhFt","./kernels/UnsortedSegmentSum":"i7EUu","./kernels/ZerosLike":"8cgVj"}],"2votT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Required side effectful code.
var _baseSideEffects = require("./base_side_effects");
// All exports from this package should be in base.
var _base = require("./base");
parcelHelpers.exportAll(_base, exports);

},{"./base_side_effects":"53OcE","./base":"5K6Dc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"53OcE":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Required side effectful code for tfjs-core
// Set up Engine and ENV
var _engine = require("./engine");
// Register backend-agnostic flags.
var _flags = require("./flags");
// Register platforms
var _platformBrowser = require("./platforms/platform_browser");
var _platformNode = require("./platforms/platform_node");
// Set up OpHandler
var _buffer = require("./ops/buffer");
var _cast = require("./ops/cast");
var _clone = require("./ops/clone");
var _print = require("./ops/print");
var _tensor = require("./tensor");
(0, _engine.getOrMakeEngine)();
const opHandler = {
    buffer: (0, _buffer.buffer),
    cast: (0, _cast.cast),
    clone: (0, _clone.clone),
    print: (0, _print.print)
};
(0, _tensor.setOpHandler)(opHandler);

},{"./engine":"1aEvR","./flags":"krVi8","./platforms/platform_browser":"lIuHs","./platforms/platform_node":"2ydqs","./ops/buffer":"e0wS6","./ops/cast":"a7v0X","./ops/clone":"cWcE6","./ops/print":"63DiP","./tensor":"DPGBx"}],"1aEvR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Engine", ()=>Engine);
parcelHelpers.export(exports, "getOrMakeEngine", ()=>getOrMakeEngine);
parcelHelpers.export(exports, "ENGINE", ()=>ENGINE);
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _backend = require("./backends/backend");
var _environment = require("./environment");
var _globalUtil = require("./global_util");
var _kernelNames = require("./kernel_names");
var _kernelRegistry = require("./kernel_registry");
var _log = require("./log");
var _profiler = require("./profiler");
var _tape = require("./tape");
var _tensor = require("./tensor");
var _tensorUtil = require("./tensor_util");
var _util = require("./util");
function isRegisteredKernelInvocation(kernelInvocation) {
    return kernelInvocation.kernelName != null;
}
class EngineState {
    constructor(){
        // Public since optimizers will use it.
        this.registeredVariables = {};
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numStringTensors = 0;
        this.numDataBuffers = 0;
        // Number of nested tf.grad() statements when computing higher-order
        // gradients. E.g. `1` for first-order gradients and `2` for second-order
        // gradients. Used to track if the tape should be removed after a backprop.
        this.gradientDepth = 0;
        // Number of nested kernel calls. When kernel depth is greater than 1, we turn
        // off the tape.
        this.kernelDepth = 0;
        this.scopeStack = [];
        /**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */ this.numDataMovesStack = [];
        this.nextScopeId = 0;
        this.tensorInfo = new WeakMap();
        this.profiling = false;
        this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null,
            get kernelNames () {
                return Array.from(new Set(this.kernels.map((k)=>k.name)));
            }
        };
    }
    dispose() {
        for(const variableName in this.registeredVariables)this.registeredVariables[variableName].dispose();
    }
}
class Engine {
    constructor(ENV){
        this.ENV = ENV;
        this.registry = {};
        this.registryFactory = {};
        this.pendingBackendInitId = 0;
        this.state = new EngineState();
    }
    async ready() {
        if (this.pendingBackendInit != null) return this.pendingBackendInit.then(()=>{});
        if (this.backendInstance != null) return;
        const sortedBackends = this.getSortedBackends();
        for(let i = 0; i < sortedBackends.length; i++){
            const backendName = sortedBackends[i];
            const success = await this.initializeBackend(backendName).success;
            if (success) {
                await this.setBackend(backendName);
                return;
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
    }
    get backend() {
        if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);
        if (this.backendInstance == null) {
            const { name , asyncInit  } = this.initializeBackendsAndReturnBest();
            if (asyncInit) throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);
            this.setBackend(name);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(backendName) {
        if (!(backendName in this.registry)) {
            // If the backend hasn't been initialized but we have a registry entry for
            // it, initialize it and return it.
            if (backendName in this.registryFactory) {
                const { asyncInit  } = this.initializeBackend(backendName);
                if (asyncInit) // Backend is not ready yet.
                return null;
            } else return null;
        }
        return this.registry[backendName];
    }
    findBackendFactory(backendName) {
        if (!(backendName in this.registryFactory)) return null;
        return this.registryFactory[backendName].factory;
    }
    registerBackend(backendName, factory, priority = 1) {
        if (backendName in this.registryFactory) {
            _log.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);
            return false;
        }
        this.registryFactory[backendName] = {
            factory,
            priority
        };
        return true;
    }
    async setBackend(backendName) {
        if (this.registryFactory[backendName] == null) throw new Error(`Backend name '${backendName}' not found in registry`);
        this.backendName = backendName;
        if (this.registry[backendName] == null) {
            this.backendInstance = null;
            const { success , asyncInit  } = this.initializeBackend(backendName);
            const result = asyncInit ? await success : success;
            if (!result) return false;
        }
        this.backendInstance = this.registry[backendName];
        this.setupRegisteredKernels();
        // Reset the profiler.
        this.profiler = new (0, _profiler.Profiler)(this.backendInstance);
        return true;
    }
    setupRegisteredKernels() {
        const kernels = (0, _kernelRegistry.getKernelsForBackend)(this.backendName);
        kernels.forEach((kernel)=>{
            if (kernel.setupFunc != null) kernel.setupFunc(this.backendInstance);
        });
    }
    disposeRegisteredKernels(backendName) {
        const kernels = (0, _kernelRegistry.getKernelsForBackend)(backendName);
        kernels.forEach((kernel)=>{
            if (kernel.disposeFunc != null) kernel.disposeFunc(this.registry[backendName]);
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */ initializeBackend(backendName) {
        const registryFactoryEntry = this.registryFactory[backendName];
        if (registryFactoryEntry == null) throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
        try {
            const backend = registryFactoryEntry.factory();
            /* Test if the factory returns a promise.
            Done in a more liberal way than
            previous 'Promise.resolve(backend)===backend'
            as we needed to account for custom Promise
            implementations (e.g. Angular) */ if (backend && !(backend instanceof (0, _backend.KernelBackend)) && typeof backend.then === "function") {
                const promiseId = ++this.pendingBackendInitId;
                const success = backend.then((backendInstance)=>{
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) return false;
                    this.registry[backendName] = backendInstance;
                    this.pendingBackendInit = null;
                    return true;
                }).catch((err)=>{
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) return false;
                    this.pendingBackendInit = null;
                    _log.warn(`Initialization of backend ${backendName} failed`);
                    _log.warn(err.stack || err.message);
                    return false;
                });
                this.pendingBackendInit = success;
                return {
                    success,
                    asyncInit: true
                };
            } else {
                this.registry[backendName] = backend;
                return {
                    success: true,
                    asyncInit: false
                };
            }
        } catch (err) {
            _log.warn(`Initialization of backend ${backendName} failed`);
            _log.warn(err.stack || err.message);
            return {
                success: false,
                asyncInit: false
            };
        }
    }
    removeBackend(backendName) {
        if (!(backendName in this.registryFactory)) throw new Error(`${backendName} backend not found in registry`);
        if (this.backendName === backendName && this.pendingBackendInit != null) // There is a pending promise of the backend we want to remove. Make it
        // obsolete.
        this.pendingBackendInitId++;
        if (backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        delete this.registryFactory[backendName];
        // Unset the backend if it is active.
        if (this.backendName === backendName) {
            this.pendingBackendInit = null;
            this.backendName = null;
            this.backendInstance = null;
        }
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry.");
        return Object.keys(this.registryFactory).sort((a, b)=>{
            // Highest priority comes first.
            return this.registryFactory[b].priority - this.registryFactory[a].priority;
        });
    }
    initializeBackendsAndReturnBest() {
        const sortedBackends = this.getSortedBackends();
        for(let i = 0; i < sortedBackends.length; i++){
            const backendName = sortedBackends[i];
            const { success , asyncInit  } = this.initializeBackend(backendName);
            if (asyncInit || success) return {
                name: backendName,
                asyncInit
            };
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
    }
    moveData(backend, dataId) {
        const info = this.state.tensorInfo.get(dataId);
        const srcBackend = info.backend;
        const values = this.readSync(dataId);
        const refCount = srcBackend.refCount(dataId);
        // Delete the tensor from the old backend and move it to the new
        // backend.
        srcBackend.disposeData(dataId, true);
        info.backend = backend;
        backend.move(dataId, values, info.shape, info.dtype, refCount);
        if (this.shouldCheckForMemLeaks()) // Track the number of moves during a kernel execution to correctly
        // detect memory leaks.
        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
    tidy(nameOrFn, fn) {
        let name = null;
        if (fn == null) {
            // Called with only 1 argument.
            if (typeof nameOrFn !== "function") throw new Error("Please provide a function to tidy()");
            fn = nameOrFn;
        } else {
            // Called with 2 arguments.
            if (typeof nameOrFn !== "string" && !(nameOrFn instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
            if (typeof fn !== "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
            name = nameOrFn;
        // TODO(nsthorat,smilkov): Do operation logging and performance
        // profiling.
        }
        let result;
        return this.scopedRun(()=>this.startScope(name), ()=>this.endScope(result), ()=>{
            result = fn();
            if (result instanceof Promise) console.error("Cannot return a Promise inside of tidy.");
            return result;
        });
    }
    scopedRun(start, end, f) {
        start();
        try {
            const res = f();
            end();
            return res;
        } catch (ex) {
            end();
            throw ex;
        }
    }
    nextTensorId() {
        return Engine.nextTensorId++;
    }
    nextVariableId() {
        return Engine.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     */ clone(x) {
        const y = ENGINE.runKernel((0, _kernelNames.Identity), {
            x
        });
        const inputs = {
            x
        };
        const grad = (dy)=>({
                x: ()=>{
                    const dtype = "float32";
                    const gradInputs = {
                        x: dy
                    };
                    const attrs = {
                        dtype
                    };
                    return ENGINE.runKernel((0, _kernelNames.Cast), gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion
                    attrs);
                }
            });
        const saved = [];
        this.addTapeNode(this.state.activeScope.name, inputs, [
            y
        ], grad, saved, {});
        return y;
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */ runKernel(kernelName, inputs, attrs) {
        if (this.backendName == null) // backend has not been initialized yet (backend initialization is lazy
        // can be deferred until an op/ kernel is run).
        // The below getter has side effects that will try to initialize the
        // backend and set properties like this.backendName
        // tslint:disable-next-line: no-unused-expression
        this.backend;
        const hasKernel = (0, _kernelRegistry.getKernel)(kernelName, this.backendName) != null;
        if (!hasKernel) throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);
        return this.runKernelFunc({
            kernelName,
            inputs,
            attrs
        });
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool("IS_TEST");
    }
    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
        const numDataIdsAfter = this.backend.numDataIds();
        // Count the number of data ids associated with the result of the kernel.
        let numOutputDataIds = 0;
        outInfos.forEach((info)=>{
            // Complex numbers allocate 3 data ids, one for 'real', one for
            // 'imaginary', and one for the container that holds the former two.
            numOutputDataIds += info.dtype === "complex64" ? 3 : 1;
        });
        // Account for the number of moves during kernel execution. A "data move"
        // can happen in the middle of a kernel execution, placing a new (key,value)
        // pair in the data storage. Since data moves have net zero effect (we
        // always remove the data from the old backend), we have to cancel them out
        // when detecting memory leaks.
        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
        if (dataIdsLeaked > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
    }
    /**
     * Internal helper method to execute a kernel Func
     *
     * Use `runKernel` to execute kernels from outside of engine.
     */ runKernelFunc(kernelParams) {
        let outputs;
        let saved = [];
        const isTapeOn = this.isTapeOn();
        const startingBytecount = this.state.numBytes;
        const startingNumTensors = this.state.numTensors;
        if (this.shouldCheckForMemLeaks()) this.state.numDataMovesStack.push(0);
        let kernelFunc;
        if (this.backendName == null) // backend has not been initialized yet (backend initialization is lazy
        // can be deferred until an op/ kernel is run).
        // The below getter has side effects that will try to initialize the
        // backend and set properties like this.backendName
        // tslint:disable-next-line: no-unused-expression
        this.backend;
        let out;
        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
        // Create the kernelFunc from either a registered kernel OR passed in
        // forward/backward functions (used by custom grad). In this context a
        // kernelFunc wraps a kernel implementation with some bookkeeping.
        if (isRegisteredKernelInvocation(kernelParams)) {
            const { kernelName , inputs , attrs  } = kernelParams;
            if (this.backendName == null) // backend has not been initialized yet (backend initialization is lazy
            // can be deferred until an op/ kernel is run).
            // The below getter has side effects that will try to initialize the
            // backend and set properties like this.backendName
            // tslint:disable-next-line: no-unused-expression
            this.backend;
            const kernel = (0, _kernelRegistry.getKernel)(kernelName, this.backendName);
            _util.assert(kernel != null, ()=>`Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);
            kernelFunc = ()=>{
                const numDataIdsBefore = this.backend.numDataIds();
                out = kernel.kernelFunc({
                    inputs,
                    attrs,
                    backend: this.backend
                });
                const outInfos = Array.isArray(out) ? out : [
                    out
                ];
                if (this.shouldCheckForMemLeaks()) this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                const outTensors = outInfos.map((outInfo)=>{
                    // todo (yassogba) remove this option (Tensor) when node backend
                    // methods have been modularized and they all return tensorInfo.
                    // TensorInfos do not have a rank attribute.
                    if (outInfo.rank != null) return outInfo;
                    return this.makeTensorFromTensorInfo(outInfo);
                });
                // Save any required inputs and outputs.
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since there would be no backprop for these tensors
                // (which would otherwise dispose them).
                if (isTapeOn) {
                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                    saved = this.saveTensorsForBackwardMode(tensorsToSave);
                }
                return outTensors;
            };
        } else {
            const { forwardFunc  } = kernelParams;
            // Running a customGrad op.
            const saveFunc = (tensors)=>{
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (!isTapeOn) return;
                saved = tensors.map((tensor)=>this.keep(this.clone(tensor)));
            };
            kernelFunc = ()=>{
                const numDataIdsBefore = this.backend.numDataIds();
                out = this.tidy(()=>forwardFunc(this.backend, saveFunc));
                const outs = Array.isArray(out) ? out : [
                    out
                ];
                if (this.shouldCheckForMemLeaks()) // Scope name is used to print a more helpful error message if needed.
                this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);
                return outs;
            };
        }
        //
        // Run the kernelFunc. Optionally profiling it.
        //
        const { inputs: inputs1 , attrs: attrs1  } = kernelParams;
        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;
        let kernelProfile;
        this.scopedRun(// Stop recording to a tape when running a kernel.
        ()=>this.state.kernelDepth++, ()=>this.state.kernelDepth--, ()=>{
            if (!this.ENV.getBool("DEBUG") && !this.state.profiling) outputs = kernelFunc();
            else {
                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs1, ()=>kernelFunc());
                if (this.ENV.getBool("DEBUG")) this.profiler.logKernelProfile(kernelProfile);
                outputs = kernelProfile.outputs;
            }
        });
        if (isTapeOn) this.addTapeNode(kernelOrScopeName, inputs1, outputs, backwardsFunc, saved, attrs1);
        if (this.state.profiling) this.state.activeProfile.kernels.push({
            name: kernelOrScopeName,
            bytesAdded: this.state.numBytes - startingBytecount,
            totalBytesSnapshot: this.state.numBytes,
            tensorsAdded: this.state.numTensors - startingNumTensors,
            totalTensorsSnapshot: this.state.numTensors,
            inputShapes: Object.keys(inputs1).map((key)=>inputs1[key] != null ? inputs1[key].shape : null),
            outputShapes: outputs.map((item)=>item.shape),
            kernelTimeMs: kernelProfile.timeMs,
            extraInfo: kernelProfile.extraInfo
        });
        return Array.isArray(out) ? outputs : outputs[0];
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */ saveTensorsForBackwardMode(tensors) {
        const saved = tensors.map((tensor)=>this.keep(this.clone(tensor)));
        return saved;
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */ getTensorsForGradient(kernelName, inputs, outputs) {
        const gradConfig = (0, _kernelRegistry.getGradient)(kernelName);
        if (gradConfig != null) {
            const inputsToSave = gradConfig.inputsToSave || [];
            const outputsToSave = gradConfig.outputsToSave || [];
            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
            // specified in inputsToSave will be saved.
            let inputTensorsToSave;
            if (gradConfig.saveAllInputs) {
                _util.assert(Array.isArray(inputs), ()=>"saveAllInputs is true, expected inputs to be an array.");
                inputTensorsToSave = Object.keys(inputs).map((key)=>inputs[key]);
            } else inputTensorsToSave = inputsToSave.map((inputName)=>inputs[inputName]);
            const outputTensorsToSave = outputs.filter((_, i)=>outputsToSave[i]);
            return inputTensorsToSave.concat(outputTensorsToSave);
        }
        // We return an empty list rather than throw an error because the kernel we
        // are looking up may not actually be relevant to backproping through the
        // overall function
        //
        // See 'does not error if irrelevant (pruned) ops are missing grads' test
        // in gradients_test.ts for an example.
        return [];
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */ makeTensor(values, shape, dtype, backend) {
        if (values == null) throw new Error("Values passed to engine.makeTensor() are null");
        dtype = dtype || "float32";
        backend = backend || this.backend;
        let backendVals = values;
        if (dtype === "string" && _util.isString(values[0])) backendVals = values.map((d)=>_util.encodeString(d));
        const dataId = backend.write(backendVals, shape, dtype);
        const t = new (0, _tensor.Tensor)(shape, dtype, dataId, this.nextTensorId());
        this.trackTensor(t, backend);
        // Count bytes for string tensors.
        if (dtype === "string") {
            const info = this.state.tensorInfo.get(dataId);
            const newBytes = (0, _util.bytesFromStringArray)(backendVals);
            this.state.numBytes += newBytes - info.bytes;
            info.bytes = newBytes;
        }
        return t;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     * @deprecated
     */ makeTensorFromDataId(dataId, shape, dtype, backend) {
        dtype = dtype || "float32";
        const tensorInfo = {
            dataId,
            shape,
            dtype
        };
        return this.makeTensorFromTensorInfo(tensorInfo, backend);
    }
    /**
     * Internal method used by backends. Makes a new tensor that is a wrapper
     * around an existing data id in TensorInfo. It doesn't create a new data id,
     * only increments the ref count used in memory tracking.
     */ makeTensorFromTensorInfo(tensorInfo, backend) {
        const { dataId , shape , dtype  } = tensorInfo;
        const t = new (0, _tensor.Tensor)(shape, dtype, dataId, this.nextTensorId());
        this.trackTensor(t, backend);
        return t;
    }
    makeVariable(initialValue, trainable = true, name, dtype) {
        name = name || this.nextVariableId().toString();
        if (dtype != null && dtype !== initialValue.dtype) initialValue = initialValue.cast(dtype);
        const v = new (0, _tensor.Variable)(initialValue, trainable, name, this.nextTensorId());
        if (this.state.registeredVariables[v.name] != null) throw new Error(`Variable with name ${v.name} was already registered`);
        this.state.registeredVariables[v.name] = v;
        this.incRef(v, this.backend);
        return v;
    }
    trackTensor(a, backend) {
        this.state.numTensors++;
        if (a.dtype === "string") this.state.numStringTensors++;
        // Bytes for complex numbers are counted by their components. Bytes for
        // string tensors are counted when writing values.
        let bytes = 0;
        if (a.dtype !== "complex64" && a.dtype !== "string") bytes = a.size * _util.bytesPerElement(a.dtype);
        this.state.numBytes += bytes;
        if (!this.state.tensorInfo.has(a.dataId)) {
            this.state.numDataBuffers++;
            this.state.tensorInfo.set(a.dataId, {
                backend: backend || this.backend,
                dtype: a.dtype,
                shape: a.shape,
                bytes
            });
        }
        if (!(a instanceof (0, _tensor.Variable))) this.track(a);
    }
    // Track the tensor by dataId and increase the refCount for the dataId in the
    // backend.
    // TODO(pyu10055): This is currently used by makeVariable method, to increase
    // refCount on the backend for the dataId. It can potentially be replaced with
    // Identity op indead of calling backend directly.
    incRef(a, backend) {
        this.trackTensor(a, backend);
        this.backend.incRef(a.dataId);
    }
    removeDataId(dataId, backend) {
        if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {
            this.state.tensorInfo.delete(dataId);
            this.state.numDataBuffers--;
        }
    }
    disposeTensor(a) {
        if (!this.state.tensorInfo.has(a.dataId)) return;
        const info = this.state.tensorInfo.get(a.dataId);
        this.state.numTensors--;
        if (a.dtype === "string") {
            this.state.numStringTensors--;
            this.state.numBytes -= info.bytes;
        }
        // Don't count bytes for complex numbers as they are counted by their
        // components.
        if (a.dtype !== "complex64" && a.dtype !== "string") {
            const bytes = a.size * _util.bytesPerElement(a.dtype);
            this.state.numBytes -= bytes;
        }
        // Remove the reference to dataId if backend dispose the data successfully
        if (info.backend.disposeData(a.dataId)) this.removeDataId(a.dataId, info.backend);
    // TODO(nsthorat): Construct an error and save the stack trace for
    // debugging when in debug mode. Creating a stack trace is too expensive
    // to do unconditionally.
    }
    disposeVariables() {
        for(const varName in this.state.registeredVariables){
            const v = this.state.registeredVariables[varName];
            this.disposeVariable(v);
        }
    }
    disposeVariable(v) {
        this.disposeTensor(v);
        if (this.state.registeredVariables[v.name] != null) delete this.state.registeredVariables[v.name];
    }
    memory() {
        const info = this.backend.memory();
        info.numTensors = this.state.numTensors;
        info.numDataBuffers = this.state.numDataBuffers;
        info.numBytes = this.state.numBytes;
        if (this.state.numStringTensors > 0) {
            info.unreliable = true;
            if (info.reasons == null) info.reasons = [];
            info.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)");
        }
        return info;
    }
    async profile(query) {
        this.state.profiling = true;
        const startBytes = this.state.numBytes;
        const startNumTensors = this.state.numTensors;
        this.state.activeProfile.kernels = [];
        this.state.activeProfile.result = await query();
        this.state.profiling = false;
        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((d)=>d.totalBytesSnapshot));
        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
        this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;
        for (const kernel of this.state.activeProfile.kernels){
            kernel.kernelTimeMs = await kernel.kernelTimeMs;
            kernel.extraInfo = await kernel.extraInfo;
        }
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
        const tapeNode = {
            id: this.state.nextTapeNodeId++,
            kernelName,
            inputs,
            outputs,
            saved
        };
        const gradConfig = (0, _kernelRegistry.getGradient)(kernelName);
        if (gradConfig != null) gradientsFunc = gradConfig.gradFunc;
        if (gradientsFunc != null) tapeNode.gradient = (dys)=>{
            // TODO(smilkov): To optimize back-prop, pass dys that are not used in
            // the backprop graph to the user as null instead of zeros
            dys = dys.map((dy, i)=>{
                if (dy == null) {
                    const output = outputs[i];
                    const vals = _util.makeZerosTypedArray(output.size, output.dtype);
                    return this.makeTensor(vals, output.shape, output.dtype);
                }
                return dy;
            });
            // Grad functions of ops with single outputs expect a dy, while ops
            // with multiple outputs expect dys (array of dy).
            return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
        };
        this.state.activeTape.push(tapeNode);
    }
    keep(result) {
        result.kept = true;
        return result;
    }
    startTape() {
        if (this.state.gradientDepth === 0) this.state.activeTape = [];
        this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */ startScope(name) {
        const scopeInfo = {
            track: [],
            name: "unnamed scope",
            id: this.state.nextScopeId++
        };
        if (name) scopeInfo.name = name;
        this.state.scopeStack.push(scopeInfo);
        this.state.activeScope = scopeInfo;
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */ endScope(result) {
        const tensorsToTrackInParent = (0, _tensorUtil.getTensorsInContainer)(result);
        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map((t)=>t.id));
        // Dispose the arrays tracked in this scope.
        for(let i = 0; i < this.state.activeScope.track.length; i++){
            const tensor = this.state.activeScope.track[i];
            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) tensor.dispose();
        }
        const oldScope = this.state.scopeStack.pop();
        this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1];
        // Track the current result in the parent scope.
        tensorsToTrackInParent.forEach((tensor)=>{
            // Only track the tensor if was allocated in the inner scope and is not
            // globally kept.
            if (!tensor.kept && tensor.scopeId === oldScope.id) this.track(tensor);
        });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */ gradients(f, xs, dy, allowNoGradients = false) {
        _util.assert(xs.length > 0, ()=>"gradients() received an empty list of xs.");
        if (dy != null && dy.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
        const y = this.scopedRun(()=>this.startTape(), ()=>this.endTape(), ()=>this.tidy("forward", f));
        _util.assert(y instanceof (0, _tensor.Tensor), ()=>"The result y returned by f() must be a tensor.");
        // Filter out the nodes that don't connect x => y.
        const filteredTape = (0, _tape.getFilteredNodesXToY)(this.state.activeTape, xs, y);
        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
        return this.tidy("backward", ()=>{
            const accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy;
            // Backprop gradients through the filtered nodes.
            (0, _tape.backpropagateGradients)(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.
            (f)=>this.tidy(f), // Pass an add function to avoide a circular dep with `tape.ts`.
            add);
            const grads = xs.map((x)=>accumulatedGradientMap[x.id]);
            if (this.state.gradientDepth === 0) {
                // This means that we are not computing higher-order gradients
                // and can clean up the tape.
                this.state.activeTape.forEach((node)=>{
                    for (const tensor of node.saved)tensor.dispose();
                });
                this.state.activeTape = null;
            }
            return {
                value: y,
                grads
            };
        });
    }
    customGrad(f) {
        _util.assert(_util.isFunction(f), ()=>"The f passed in customGrad(f) must be a function.");
        return (...inputs)=>{
            _util.assert(inputs.every((t)=>t instanceof (0, _tensor.Tensor)), ()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");
            let res;
            const inputMap = {};
            inputs.forEach((input, i)=>{
                inputMap[i] = input;
            });
            const forwardFunc = (_, save)=>{
                res = f(...[
                    ...inputs,
                    save
                ]);
                _util.assert(res.value instanceof (0, _tensor.Tensor), ()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor");
                _util.assert(_util.isFunction(res.gradFunc), ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.");
                return res.value;
            };
            const backwardsFunc = (dy, saved)=>{
                const gradRes = res.gradFunc(dy, saved);
                const grads = Array.isArray(gradRes) ? gradRes : [
                    gradRes
                ];
                _util.assert(grads.length === inputs.length, ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).");
                _util.assert(grads.every((t)=>t instanceof (0, _tensor.Tensor)), ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
                const gradMap = {};
                grads.forEach((grad, i)=>{
                    gradMap[i] = ()=>grad;
                });
                return gradMap;
            };
            return this.runKernelFunc({
                forwardFunc,
                backwardsFunc,
                inputs: inputMap
            });
        };
    }
    readSync(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readSync(dataId);
    }
    read(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.read(dataId);
    }
    readToGPU(dataId, options) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readToGPU(dataId, options);
    }
    async time(query) {
        const start = (0, _util.now)();
        const timingInfo = await this.backend.time(query);
        timingInfo.wallMs = (0, _util.now)() - start;
        return timingInfo;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */ track(result) {
        if (this.state.activeScope != null) {
            result.scopeId = this.state.activeScope.id;
            this.state.activeScope.track.push(result);
        }
        return result;
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */ reset() {
        // Make any pending promise obsolete.
        this.pendingBackendInitId++;
        this.state.dispose();
        this.ENV.reset();
        this.state = new EngineState();
        for(const backendName in this.registry){
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        this.backendName = null;
        this.backendInstance = null;
        this.pendingBackendInit = null;
    }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones(shape) {
    const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), "float32");
    return ENGINE.makeTensor(values, shape, "float32");
}
function getOrMakeEngine() {
    const ns = (0, _globalUtil.getGlobalNamespace)();
    if (ns._tfengine == null) {
        const environment = new (0, _environment.Environment)(ns);
        ns._tfengine = new Engine(environment);
    }
    (0, _environment.setEnvironmentGlobal)(ns._tfengine.ENV);
    // Tell the current tensor interface that the global engine is responsible
    // for tracking.
    (0, _tensor.setTensorTracker)(()=>ns._tfengine);
    return ns._tfengine;
}
const ENGINE = getOrMakeEngine();
function add(a, b) {
    // We duplicate Add here to avoid a circular dependency with add.ts.
    const inputs = {
        a,
        b
    };
    return ENGINE.runKernel((0, _kernelNames.Add), inputs);
}

},{"./backends/backend":"2CVFT","./environment":"8tlxC","./global_util":"4etpx","./kernel_names":"2CzXQ","./kernel_registry":"3ziE7","./log":"fT4Tx","./profiler":"6GT9C","./tape":"82ekz","./tensor":"DPGBx","./tensor_util":"kUGKD","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CVFT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EPSILON_FLOAT32", ()=>EPSILON_FLOAT32);
parcelHelpers.export(exports, "EPSILON_FLOAT16", ()=>EPSILON_FLOAT16);
/** Convenient class for storing tensor-related data. */ parcelHelpers.export(exports, "DataStorage", ()=>DataStorage);
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */ parcelHelpers.export(exports, "KernelBackend", ()=>KernelBackend);
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
class DataStorage {
    constructor(backend, dataMover){
        this.backend = backend;
        this.dataMover = dataMover;
        this.data = new WeakMap();
        this.dataIdsCount = 0;
    }
    get(dataId) {
        if (!this.data.has(dataId)) this.dataMover.moveData(this.backend, dataId);
        return this.data.get(dataId);
    }
    set(dataId, value) {
        this.dataIdsCount++;
        this.data.set(dataId, value);
    }
    has(dataId) {
        return this.data.has(dataId);
    }
    delete(dataId) {
        this.dataIdsCount--;
        return this.data.delete(dataId);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
class KernelBackend {
    refCount(dataId) {
        return notYetImplemented("refCount");
    }
    incRef(dataId) {
        return notYetImplemented("incRef");
    }
    timerAvailable() {
        return true;
    }
    time(f) {
        return notYetImplemented("time");
    }
    read(dataId) {
        return notYetImplemented("read");
    }
    readSync(dataId) {
        return notYetImplemented("readSync");
    }
    readToGPU(dataId, options) {
        return notYetImplemented("readToGPU");
    }
    numDataIds() {
        return notYetImplemented("numDataIds");
    }
    disposeData(dataId, force) {
        return notYetImplemented("disposeData");
    }
    write(values, shape, dtype) {
        return notYetImplemented("write");
    }
    move(dataId, values, shape, dtype, refCount) {
        return notYetImplemented("move");
    }
    memory() {
        return notYetImplemented("memory");
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */ floatPrecision() {
        return notYetImplemented("floatPrecision");
    }
    /** Returns the smallest representable number.  */ epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    dispose() {
        return notYetImplemented("dispose");
    }
}
function notYetImplemented(kernelName) {
    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `This kernel may not be supported by the tfjs backend you have chosen`);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"8tlxC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "Environment", ()=>Environment);
parcelHelpers.export(exports, "getQueryParams", ()=>getQueryParams);
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "env", ()=>env);
parcelHelpers.export(exports, "ENV", ()=>ENV);
parcelHelpers.export(exports, "setEnvironmentGlobal", ()=>setEnvironmentGlobal);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _utilBase = require("./util_base");
var global = arguments[3];
// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";
class Environment {
    // tslint:disable-next-line: no-any
    constructor(global1){
        this.global = global;
        this.flags = {};
        this.flagRegistry = {};
        this.urlFlags = {};
        // Jasmine spies on this in 'environment_test.ts'
        this.getQueryParams = getQueryParams;
        this.populateURLFlags();
    }
    setPlatform(platformName, platform) {
        if (this.platform != null) {
            if (!(env().getBool("IS_TEST") || env().getBool("PROD"))) console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platformName}.`);
        }
        this.platformName = platformName;
        this.platform = platform;
    }
    registerFlag(flagName, evaluationFn, setHook) {
        this.flagRegistry[flagName] = {
            evaluationFn,
            setHook
        };
        // Override the flag value from the URL. This has to happen here because
        // the environment is initialized before flags get registered.
        if (this.urlFlags[flagName] != null) {
            const flagValue = this.urlFlags[flagName];
            if (!(env().getBool("IS_TEST") || env().getBool("PROD"))) console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
            this.set(flagName, flagValue);
        }
    }
    async getAsync(flagName) {
        if (flagName in this.flags) return this.flags[flagName];
        this.flags[flagName] = await this.evaluateFlag(flagName);
        return this.flags[flagName];
    }
    get(flagName) {
        if (flagName in this.flags) return this.flags[flagName];
        const flagValue = this.evaluateFlag(flagName);
        if ((0, _utilBase.isPromise)(flagValue)) throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);
        this.flags[flagName] = flagValue;
        return this.flags[flagName];
    }
    getNumber(flagName) {
        return this.get(flagName);
    }
    getBool(flagName) {
        return this.get(flagName);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(flagName, value) {
        if (this.flagRegistry[flagName] == null) throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
        this.flags[flagName] = value;
        if (this.flagRegistry[flagName].setHook != null) this.flagRegistry[flagName].setHook(value);
    }
    evaluateFlag(flagName) {
        if (this.flagRegistry[flagName] == null) throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
        return this.flagRegistry[flagName].evaluationFn();
    }
    setFlags(flags) {
        this.flags = Object.assign({}, flags);
    }
    reset() {
        this.flags = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    populateURLFlags() {
        if (typeof this.global === "undefined" || typeof this.global.location === "undefined" || typeof this.global.location.search === "undefined") return;
        const urlParams = this.getQueryParams(this.global.location.search);
        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(",");
            keyValues.forEach((keyValue)=>{
                const [key, value] = keyValue.split(":");
                this.urlFlags[key] = parseValue(key, value);
            });
        }
    }
}
function getQueryParams(queryString) {
    const params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t)=>{
        decodeParam(params, t[0], t[1]);
        return t.join("=");
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || "");
}
function parseValue(flagName, value) {
    value = value.toLowerCase();
    if (value === "true" || value === "false") return value === "true";
    else if (`${+value}` === value) return +value;
    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
function env() {
    return ENV;
}
let ENV = null;
function setEnvironmentGlobal(environment) {
    ENV = environment;
}

},{"./util_base":"a2mCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2mCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "shuffle", ()=>shuffle);
/**
 * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1,2,3,4,5];
 * const b = [11,22,33,44,55];
 * tf.util.shuffleCombo(a, b);
 * console.log(a, b);
 * ```
 *
 * @param array The first array to shuffle in-place.
 * @param array2 The second array to shuffle in-place with the same permutation
 *     as the first array.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "shuffleCombo", ()=>shuffleCombo);
/** Clamps a value to a specified range. */ parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "nearestLargerEven", ()=>nearestLargerEven);
parcelHelpers.export(exports, "swap", ()=>swap);
parcelHelpers.export(exports, "sum", ()=>sum);
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */ parcelHelpers.export(exports, "randUniform", ()=>randUniform);
/** Returns the squared Euclidean distance between two vectors. */ parcelHelpers.export(exports, "distSquared", ()=>distSquared);
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "assertShapesMatch", ()=>assertShapesMatch);
parcelHelpers.export(exports, "assertNonNull", ()=>assertNonNull);
// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "flatten", ()=>flatten);
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "sizeFromShape", ()=>sizeFromShape);
parcelHelpers.export(exports, "isScalarShape", ()=>isScalarShape);
parcelHelpers.export(exports, "arraysEqual", ()=>arraysEqual);
parcelHelpers.export(exports, "isInt", ()=>isInt);
parcelHelpers.export(exports, "tanh", ()=>tanh);
parcelHelpers.export(exports, "sizeToSquarishShape", ()=>sizeToSquarishShape);
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "createShuffledIndices", ()=>createShuffledIndices);
parcelHelpers.export(exports, "rightPad", ()=>rightPad);
parcelHelpers.export(exports, "repeatedTry", ()=>repeatedTry);
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */ parcelHelpers.export(exports, "inferFromImplicitShape", ()=>inferFromImplicitShape);
parcelHelpers.export(exports, "parseAxisParam", ()=>parseAxisParam);
/** Reduces the shape by removing all dimensions of shape 1. */ parcelHelpers.export(exports, "squeezeShape", ()=>squeezeShape);
parcelHelpers.export(exports, "getTypedArrayFromDType", ()=>getTypedArrayFromDType);
parcelHelpers.export(exports, "getArrayFromDType", ()=>getArrayFromDType);
parcelHelpers.export(exports, "checkConversionForErrors", ()=>checkConversionForErrors);
/** Returns true if the dtype is valid. */ parcelHelpers.export(exports, "isValidDtype", ()=>isValidDtype);
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */ parcelHelpers.export(exports, "hasEncodingLoss", ()=>hasEncodingLoss);
parcelHelpers.export(exports, "isTypedArray", ()=>isTypedArray);
parcelHelpers.export(exports, "bytesPerElement", ()=>bytesPerElement);
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */ parcelHelpers.export(exports, "bytesFromStringArray", ()=>bytesFromStringArray);
/** Returns true if the value is a string. */ parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "inferDtype", ()=>inferDtype);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "nearestDivisor", ()=>nearestDivisor);
parcelHelpers.export(exports, "computeStrides", ()=>computeStrides);
// Provide a nested array of TypedArray in given shape.
parcelHelpers.export(exports, "toNestedArray", ()=>toNestedArray);
parcelHelpers.export(exports, "makeOnesTypedArray", ()=>makeOnesTypedArray);
parcelHelpers.export(exports, "makeZerosTypedArray", ()=>makeZerosTypedArray);
/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */ parcelHelpers.export(exports, "makeZerosNestedTypedArray", ()=>makeZerosNestedTypedArray);
parcelHelpers.export(exports, "assertNonNegativeIntegerDimensions", ()=>assertNonNegativeIntegerDimensions);
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */ parcelHelpers.export(exports, "locToIndex", ()=>locToIndex);
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */ parcelHelpers.export(exports, "indexToLoc", ()=>indexToLoc);
/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */ // tslint:disable-next-line: no-any
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
function shuffle(array) {
    let counter = array.length;
    let index = 0;
    // While there are elements in the array
    while(counter > 0){
        // Pick a random index
        index = Math.random() * counter | 0;
        // Decrease counter by 1
        counter--;
        // And swap the last element with it
        swap(array, counter, index);
    }
}
function shuffleCombo(// tslint:disable-next-line:no-any
array, // tslint:disable-next-line:no-any
array2) {
    if (array.length !== array2.length) throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);
    let counter = array.length;
    let index = 0;
    // While there are elements in the array
    while(counter > 0){
        // Pick a random index
        index = Math.random() * counter | 0;
        // Decrease counter by 1
        counter--;
        // And swap the last element of each array with it
        swap(array, counter, index);
        swap(array2, counter, index);
    }
}
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
function nearestLargerEven(val) {
    return val % 2 === 0 ? val : val + 1;
}
function swap(object, left, right) {
    const temp = object[left];
    object[left] = object[right];
    object[right] = temp;
}
function sum(arr) {
    let sum = 0;
    for(let i = 0; i < arr.length; i++)sum += arr[i];
    return sum;
}
function randUniform(a, b) {
    const r = Math.random();
    return b * r + (1 - r) * a;
}
function distSquared(a, b) {
    let result = 0;
    for(let i = 0; i < a.length; i++){
        const diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
function assert(expr, msg) {
    if (!expr) throw new Error(typeof msg === "string" ? msg : msg());
}
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = "") {
    assert(arraysEqual(shapeA, shapeB), ()=>errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function assertNonNull(a) {
    assert(a != null, ()=>`The input to the tensor constructor must be a non-null value.`);
}
function flatten(arr, result = [], skipTypedArray = false) {
    if (result == null) result = [];
    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) for(let i = 0; i < arr.length; ++i)flatten(arr[i], result, skipTypedArray);
    else result.push(arr);
    return result;
}
function sizeFromShape(shape) {
    if (shape.length === 0) // Scalar.
    return 1;
    let size = shape[0];
    for(let i = 1; i < shape.length; i++)size *= shape[i];
    return size;
}
function isScalarShape(shape) {
    return shape.length === 0;
}
function arraysEqual(n1, n2) {
    if (n1 === n2) return true;
    if (n1 == null || n2 == null) return false;
    if (n1.length !== n2.length) return false;
    for(let i = 0; i < n1.length; i++){
        if (n1[i] !== n2[i]) return false;
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function tanh(x) {
    // tslint:disable-next-line:no-any
    if (Math.tanh != null) // tslint:disable-next-line:no-any
    return Math.tanh(x);
    if (x === Infinity) return 1;
    else if (x === -Infinity) return -1;
    else {
        const e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
function sizeToSquarishShape(size) {
    const width = Math.ceil(Math.sqrt(size));
    return [
        width,
        Math.ceil(size / width)
    ];
}
function createShuffledIndices(n) {
    const shuffledIndices = new Uint32Array(n);
    for(let i = 0; i < n; ++i)shuffledIndices[i] = i;
    shuffle(shuffledIndices);
    return shuffledIndices;
}
function rightPad(a, size) {
    if (size <= a.length) return a;
    return a + " ".repeat(size - a.length);
}
function repeatedTry(checkFn, delayFn = (counter)=>0, maxCounter) {
    return new Promise((resolve, reject)=>{
        let tryCount = 0;
        const tryFn = ()=>{
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            const nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        tryFn();
    });
}
function inferFromImplicitShape(shape, size) {
    let shapeProd = 1;
    let implicitIdx = -1;
    for(let i = 0; i < shape.length; ++i){
        if (shape[i] >= 0) shapeProd *= shape[i];
        else if (shape[i] === -1) {
            if (implicitIdx !== -1) throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);
            implicitIdx = i;
        } else if (shape[i] < 0) throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) throw Error(`Size(${size}) must match the product of shape ${shape}`);
        return shape;
    }
    if (shapeProd === 0) throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);
    if (size % shapeProd !== 0) throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);
    const newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
function parseAxisParam(axis, shape) {
    const rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map((s, i)=>i) : [].concat(axis);
    // Check for valid range
    assert(axis.every((ax)=>ax >= -rank && ax < rank), ()=>`All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`);
    // Check for only integers
    assert(axis.every((ax)=>isInt(ax)), ()=>`All values in axis param must be integers but ` + `got axis ${axis}`);
    // Handle negative axis.
    return axis.map((a)=>a < 0 ? rank + a : a);
}
function squeezeShape(shape, axis) {
    const newShape = [];
    const keptDims = [];
    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();
    let j = 0;
    for(let i = 0; i < shape.length; ++i){
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) j++;
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return {
        newShape,
        keptDims
    };
}
function getTypedArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    return values;
}
function getArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else if (dtype === "string") values = new Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    return values;
}
function checkConversionForErrors(vals, dtype) {
    for(let i = 0; i < vals.length; i++){
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
    }
}
function isValidDtype(dtype) {
    return dtype === "bool" || dtype === "complex64" || dtype === "float32" || dtype === "int32" || dtype === "string";
}
function hasEncodingLoss(oldType, newType) {
    if (newType === "complex64") return false;
    if (newType === "float32" && oldType !== "complex64") return false;
    if (newType === "int32" && oldType !== "float32" && oldType !== "complex64") return false;
    if (newType === "bool" && oldType === "bool") return false;
    return true;
}
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array || a instanceof Uint8ClampedArray;
}
function bytesPerElement(dtype) {
    if (dtype === "float32" || dtype === "int32") return 4;
    else if (dtype === "complex64") return 8;
    else if (dtype === "bool") return 1;
    else throw new Error(`Unknown dtype ${dtype}`);
}
function bytesFromStringArray(arr) {
    if (arr == null) return 0;
    let bytes = 0;
    arr.forEach((x)=>bytes += x.length);
    return bytes;
}
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
function isBoolean(value) {
    return typeof value === "boolean";
}
function isNumber(value) {
    return typeof value === "number";
}
function inferDtype(values) {
    if (Array.isArray(values)) return inferDtype(values[0]);
    if (values instanceof Float32Array) return "float32";
    else if (values instanceof Int32Array || values instanceof Uint8Array || values instanceof Uint8ClampedArray) return "int32";
    else if (isNumber(values)) return "float32";
    else if (isString(values)) return "string";
    else if (isBoolean(values)) return "bool";
    return "float32";
}
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function nearestDivisor(size, start) {
    for(let i = start; i < size; ++i){
        if (size % i === 0) return i;
    }
    return size;
}
function computeStrides(shape) {
    const rank = shape.length;
    if (rank < 2) return [];
    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
    // strides.
    const strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for(let i = rank - 3; i >= 0; --i)strides[i] = strides[i + 1] * shape[i + 1];
    return strides;
}
function createNestedArray(offset, shape, a, isComplex = false) {
    const ret = new Array();
    if (shape.length === 1) {
        const d = shape[0] * (isComplex ? 2 : 1);
        for(let i = 0; i < d; i++)ret[i] = a[offset + i];
    } else {
        const d1 = shape[0];
        const rest = shape.slice(1);
        const len = rest.reduce((acc, c)=>acc * c) * (isComplex ? 2 : 1);
        for(let i1 = 0; i1 < d1; i1++)ret[i1] = createNestedArray(offset + i1 * len, rest, a, isComplex);
    }
    return ret;
}
function toNestedArray(shape, a, isComplex = false) {
    if (shape.length === 0) // Scalar type should return a single number.
    return a[0];
    const size = shape.reduce((acc, c)=>acc * c) * (isComplex ? 2 : 1);
    if (size === 0) // A tensor with shape zero should be turned into empty list.
    return [];
    if (size !== a.length) throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? " for a complex tensor" : ""}.`);
    return createNestedArray(0, shape, a, isComplex);
}
function makeOnesTypedArray(size, dtype) {
    const array = makeZerosTypedArray(size, dtype);
    for(let i = 0; i < array.length; i++)array[i] = 1;
    return array;
}
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === "float32" || dtype === "complex64") return new Float32Array(size);
    else if (dtype === "int32") return new Int32Array(size);
    else if (dtype === "bool") return new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
}
function makeZerosNestedTypedArray(shape, dtype) {
    const size = shape.reduce((prev, curr)=>prev * curr, 1);
    if (dtype == null || dtype === "float32") return toNestedArray(shape, new Float32Array(size));
    else if (dtype === "int32") return toNestedArray(shape, new Int32Array(size));
    else if (dtype === "bool") return toNestedArray(shape, new Uint8Array(size));
    else throw new Error(`Unknown data type ${dtype}`);
}
function assertNonNegativeIntegerDimensions(shape) {
    shape.forEach((dimSize)=>{
        assert(Number.isInteger(dimSize) && dimSize >= 0, ()=>`Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);
    });
}
function locToIndex(locs, rank, strides) {
    if (rank === 0) return 0;
    else if (rank === 1) return locs[0];
    let index = locs[locs.length - 1];
    for(let i = 0; i < locs.length - 1; ++i)index += strides[i] * locs[i];
    return index;
}
function indexToLoc(index, rank, strides) {
    if (rank === 0) return [];
    else if (rank === 1) return [
        index
    ];
    const locs = new Array(rank);
    for(let i = 0; i < locs.length - 1; ++i){
        locs[i] = Math.floor(index / strides[i]);
        index -= locs[i] * strides[i];
    }
    locs[locs.length - 1] = index;
    return locs;
}
function isPromise(object) {
    //  We chose to not use 'obj instanceOf Promise' for two reasons:
    //  1. It only reliably works for es6 Promise, not other Promise
    //  implementations.
    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch
    //  the async calls, so it is possible the obj (patched) is comparing to a
    //  pre-patched Promise.
    return object && object.then && typeof object.then === "function";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4etpx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tslint:disable-next-line:no-any
parcelHelpers.export(exports, "getGlobalNamespace", ()=>getGlobalNamespace);
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */ parcelHelpers.export(exports, "getGlobal", ()=>getGlobal);
var process = require("process");
var global = arguments[3];
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace;
function getGlobalNamespace() {
    if (globalNameSpace == null) {
        // tslint:disable-next-line:no-any
        let ns;
        if (typeof window !== "undefined") ns = window;
        else if (typeof global !== "undefined") ns = global;
        else if (typeof process !== "undefined") ns = process;
        else if (typeof self !== "undefined") ns = self;
        else throw new Error("Could not find a global object");
        globalNameSpace = ns;
    }
    return globalNameSpace;
}
// tslint:disable-next-line:no-any
function getGlobalMap() {
    const ns = getGlobalNamespace();
    if (ns._tfGlobals == null) ns._tfGlobals = new Map();
    return ns._tfGlobals;
}
function getGlobal(key, init) {
    const globalMap = getGlobalMap();
    if (globalMap.has(key)) return globalMap.get(key);
    else {
        const singleton = init();
        globalMap.set(key, singleton);
        return globalMap.get(key);
    }
}

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"2CzXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Abs", ()=>Abs);
parcelHelpers.export(exports, "Acos", ()=>Acos);
parcelHelpers.export(exports, "Acosh", ()=>Acosh);
parcelHelpers.export(exports, "Add", ()=>Add);
parcelHelpers.export(exports, "AddN", ()=>AddN);
parcelHelpers.export(exports, "All", ()=>All);
parcelHelpers.export(exports, "Any", ()=>Any);
parcelHelpers.export(exports, "ArgMax", ()=>ArgMax);
parcelHelpers.export(exports, "ArgMin", ()=>ArgMin);
parcelHelpers.export(exports, "Asin", ()=>Asin);
parcelHelpers.export(exports, "Asinh", ()=>Asinh);
parcelHelpers.export(exports, "Atan", ()=>Atan);
parcelHelpers.export(exports, "Atanh", ()=>Atanh);
parcelHelpers.export(exports, "Atan2", ()=>Atan2);
parcelHelpers.export(exports, "AvgPool", ()=>AvgPool);
parcelHelpers.export(exports, "AvgPoolGrad", ()=>AvgPoolGrad);
parcelHelpers.export(exports, "AvgPool3D", ()=>AvgPool3D);
parcelHelpers.export(exports, "AvgPool3DGrad", ()=>AvgPool3DGrad);
parcelHelpers.export(exports, "BatchMatMul", ()=>BatchMatMul);
parcelHelpers.export(exports, "BatchToSpaceND", ()=>BatchToSpaceND);
parcelHelpers.export(exports, "Bincount", ()=>Bincount);
parcelHelpers.export(exports, "BroadcastTo", ()=>BroadcastTo);
parcelHelpers.export(exports, "BroadcastArgs", ()=>BroadcastArgs);
parcelHelpers.export(exports, "Cast", ()=>Cast);
parcelHelpers.export(exports, "Ceil", ()=>Ceil);
parcelHelpers.export(exports, "ClipByValue", ()=>ClipByValue);
parcelHelpers.export(exports, "Complex", ()=>Complex);
parcelHelpers.export(exports, "ComplexAbs", ()=>ComplexAbs);
parcelHelpers.export(exports, "Concat", ()=>Concat);
parcelHelpers.export(exports, "Conv2D", ()=>Conv2D);
parcelHelpers.export(exports, "Conv2DBackpropFilter", ()=>Conv2DBackpropFilter);
parcelHelpers.export(exports, "Conv2DBackpropInput", ()=>Conv2DBackpropInput);
parcelHelpers.export(exports, "Conv3D", ()=>Conv3D);
parcelHelpers.export(exports, "Conv3DBackpropFilterV2", ()=>Conv3DBackpropFilterV2);
parcelHelpers.export(exports, "Conv3DBackpropInputV2", ()=>Conv3DBackpropInputV2);
parcelHelpers.export(exports, "Cos", ()=>Cos);
parcelHelpers.export(exports, "Cosh", ()=>Cosh);
parcelHelpers.export(exports, "Cumprod", ()=>Cumprod);
parcelHelpers.export(exports, "Cumsum", ()=>Cumsum);
parcelHelpers.export(exports, "CropAndResize", ()=>CropAndResize);
parcelHelpers.export(exports, "DenseBincount", ()=>DenseBincount);
parcelHelpers.export(exports, "DepthToSpace", ()=>DepthToSpace);
parcelHelpers.export(exports, "DepthwiseConv2dNative", ()=>DepthwiseConv2dNative);
parcelHelpers.export(exports, "DepthwiseConv2dNativeBackpropFilter", ()=>DepthwiseConv2dNativeBackpropFilter);
parcelHelpers.export(exports, "DepthwiseConv2dNativeBackpropInput", ()=>DepthwiseConv2dNativeBackpropInput);
parcelHelpers.export(exports, "Diag", ()=>Diag);
parcelHelpers.export(exports, "Dilation2D", ()=>Dilation2D);
parcelHelpers.export(exports, "Dilation2DBackpropInput", ()=>Dilation2DBackpropInput);
parcelHelpers.export(exports, "Dilation2DBackpropFilter", ()=>Dilation2DBackpropFilter);
parcelHelpers.export(exports, "RealDiv", ()=>RealDiv);
parcelHelpers.export(exports, "Einsum", ()=>Einsum);
parcelHelpers.export(exports, "Elu", ()=>Elu);
parcelHelpers.export(exports, "EluGrad", ()=>EluGrad);
parcelHelpers.export(exports, "Erf", ()=>Erf);
parcelHelpers.export(exports, "Equal", ()=>Equal);
parcelHelpers.export(exports, "Exp", ()=>Exp);
parcelHelpers.export(exports, "ExpandDims", ()=>ExpandDims);
parcelHelpers.export(exports, "Expm1", ()=>Expm1);
parcelHelpers.export(exports, "FFT", ()=>FFT);
parcelHelpers.export(exports, "Fill", ()=>Fill);
parcelHelpers.export(exports, "FlipLeftRight", ()=>FlipLeftRight);
parcelHelpers.export(exports, "Floor", ()=>Floor);
parcelHelpers.export(exports, "FloorDiv", ()=>FloorDiv);
parcelHelpers.export(exports, "FusedBatchNorm", ()=>FusedBatchNorm);
parcelHelpers.export(exports, "GatherV2", ()=>GatherV2);
parcelHelpers.export(exports, "GatherNd", ()=>GatherNd);
parcelHelpers.export(exports, "Greater", ()=>Greater);
parcelHelpers.export(exports, "GreaterEqual", ()=>GreaterEqual);
parcelHelpers.export(exports, "Identity", ()=>Identity);
parcelHelpers.export(exports, "IFFT", ()=>IFFT);
parcelHelpers.export(exports, "Imag", ()=>Imag);
parcelHelpers.export(exports, "IsFinite", ()=>IsFinite);
parcelHelpers.export(exports, "IsInf", ()=>IsInf);
parcelHelpers.export(exports, "IsNan", ()=>IsNan);
parcelHelpers.export(exports, "LeakyRelu", ()=>LeakyRelu);
parcelHelpers.export(exports, "Less", ()=>Less);
parcelHelpers.export(exports, "LessEqual", ()=>LessEqual);
parcelHelpers.export(exports, "LinSpace", ()=>LinSpace);
parcelHelpers.export(exports, "Log", ()=>Log);
parcelHelpers.export(exports, "Log1p", ()=>Log1p);
parcelHelpers.export(exports, "LogicalAnd", ()=>LogicalAnd);
parcelHelpers.export(exports, "LogicalNot", ()=>LogicalNot);
parcelHelpers.export(exports, "LogicalOr", ()=>LogicalOr);
parcelHelpers.export(exports, "LogicalXor", ()=>LogicalXor);
parcelHelpers.export(exports, "LogSoftmax", ()=>LogSoftmax);
parcelHelpers.export(exports, "LowerBound", ()=>LowerBound);
parcelHelpers.export(exports, "LRN", ()=>LRN);
parcelHelpers.export(exports, "LRNGrad", ()=>LRNGrad);
parcelHelpers.export(exports, "Max", ()=>Max);
parcelHelpers.export(exports, "Maximum", ()=>Maximum);
parcelHelpers.export(exports, "MaxPool", ()=>MaxPool);
parcelHelpers.export(exports, "MaxPoolGrad", ()=>MaxPoolGrad);
parcelHelpers.export(exports, "MaxPool3D", ()=>MaxPool3D);
parcelHelpers.export(exports, "MaxPool3DGrad", ()=>MaxPool3DGrad);
parcelHelpers.export(exports, "MaxPoolWithArgmax", ()=>MaxPoolWithArgmax);
parcelHelpers.export(exports, "Mean", ()=>Mean);
parcelHelpers.export(exports, "Min", ()=>Min);
parcelHelpers.export(exports, "Minimum", ()=>Minimum);
parcelHelpers.export(exports, "MirrorPad", ()=>MirrorPad);
parcelHelpers.export(exports, "Mod", ()=>Mod);
parcelHelpers.export(exports, "Multinomial", ()=>Multinomial);
parcelHelpers.export(exports, "Multiply", ()=>Multiply);
parcelHelpers.export(exports, "Neg", ()=>Neg);
parcelHelpers.export(exports, "NotEqual", ()=>NotEqual);
parcelHelpers.export(exports, "NonMaxSuppressionV3", ()=>NonMaxSuppressionV3);
parcelHelpers.export(exports, "NonMaxSuppressionV4", ()=>NonMaxSuppressionV4);
parcelHelpers.export(exports, "NonMaxSuppressionV5", ()=>NonMaxSuppressionV5);
parcelHelpers.export(exports, "OnesLike", ()=>OnesLike);
parcelHelpers.export(exports, "OneHot", ()=>OneHot);
parcelHelpers.export(exports, "Pack", ()=>Pack);
parcelHelpers.export(exports, "PadV2", ()=>PadV2);
parcelHelpers.export(exports, "Pool", ()=>Pool);
parcelHelpers.export(exports, "Pow", ()=>Pow);
parcelHelpers.export(exports, "Prelu", ()=>Prelu);
parcelHelpers.export(exports, "Prod", ()=>Prod);
parcelHelpers.export(exports, "RaggedTensorToTensor", ()=>RaggedTensorToTensor);
parcelHelpers.export(exports, "Range", ()=>Range);
parcelHelpers.export(exports, "Real", ()=>Real);
parcelHelpers.export(exports, "Reciprocal", ()=>Reciprocal);
parcelHelpers.export(exports, "Relu", ()=>Relu);
parcelHelpers.export(exports, "Reshape", ()=>Reshape);
parcelHelpers.export(exports, "ResizeNearestNeighbor", ()=>ResizeNearestNeighbor);
parcelHelpers.export(exports, "ResizeNearestNeighborGrad", ()=>ResizeNearestNeighborGrad);
parcelHelpers.export(exports, "ResizeBilinear", ()=>ResizeBilinear);
parcelHelpers.export(exports, "ResizeBilinearGrad", ()=>ResizeBilinearGrad);
parcelHelpers.export(exports, "Relu6", ()=>Relu6);
parcelHelpers.export(exports, "Reverse", ()=>Reverse);
parcelHelpers.export(exports, "Round", ()=>Round);
parcelHelpers.export(exports, "Rsqrt", ()=>Rsqrt);
parcelHelpers.export(exports, "ScatterNd", ()=>ScatterNd);
parcelHelpers.export(exports, "SearchSorted", ()=>SearchSorted);
parcelHelpers.export(exports, "Select", ()=>Select);
parcelHelpers.export(exports, "Selu", ()=>Selu);
parcelHelpers.export(exports, "Slice", ()=>Slice);
parcelHelpers.export(exports, "Sin", ()=>Sin);
parcelHelpers.export(exports, "Sinh", ()=>Sinh);
parcelHelpers.export(exports, "Sign", ()=>Sign);
parcelHelpers.export(exports, "Sigmoid", ()=>Sigmoid);
parcelHelpers.export(exports, "Softplus", ()=>Softplus);
parcelHelpers.export(exports, "Sqrt", ()=>Sqrt);
parcelHelpers.export(exports, "Sum", ()=>Sum);
parcelHelpers.export(exports, "SpaceToBatchND", ()=>SpaceToBatchND);
parcelHelpers.export(exports, "SplitV", ()=>SplitV);
parcelHelpers.export(exports, "Softmax", ()=>Softmax);
parcelHelpers.export(exports, "SparseFillEmptyRows", ()=>SparseFillEmptyRows);
parcelHelpers.export(exports, "SparseReshape", ()=>SparseReshape);
parcelHelpers.export(exports, "SparseSegmentMean", ()=>SparseSegmentMean);
parcelHelpers.export(exports, "SparseSegmentSum", ()=>SparseSegmentSum);
parcelHelpers.export(exports, "SparseToDense", ()=>SparseToDense);
parcelHelpers.export(exports, "SquaredDifference", ()=>SquaredDifference);
parcelHelpers.export(exports, "Square", ()=>Square);
parcelHelpers.export(exports, "StridedSlice", ()=>StridedSlice);
parcelHelpers.export(exports, "StringNGrams", ()=>StringNGrams);
parcelHelpers.export(exports, "StringSplit", ()=>StringSplit);
parcelHelpers.export(exports, "StringToHashBucketFast", ()=>StringToHashBucketFast);
parcelHelpers.export(exports, "Sub", ()=>Sub);
parcelHelpers.export(exports, "Tan", ()=>Tan);
parcelHelpers.export(exports, "Tanh", ()=>Tanh);
parcelHelpers.export(exports, "Tile", ()=>Tile);
parcelHelpers.export(exports, "TopK", ()=>TopK);
parcelHelpers.export(exports, "Transform", ()=>Transform);
parcelHelpers.export(exports, "Transpose", ()=>Transpose);
parcelHelpers.export(exports, "Unique", ()=>Unique);
parcelHelpers.export(exports, "Unpack", ()=>Unpack);
parcelHelpers.export(exports, "UnsortedSegmentSum", ()=>UnsortedSegmentSum);
parcelHelpers.export(exports, "UpperBound", ()=>UpperBound);
parcelHelpers.export(exports, "ZerosLike", ()=>ZerosLike);
parcelHelpers.export(exports, "Step", ()=>Step);
parcelHelpers.export(exports, "FromPixels", ()=>FromPixels);
parcelHelpers.export(exports, "RotateWithOffset", ()=>RotateWithOffset);
parcelHelpers.export(exports, "_FusedMatMul", ()=>_FusedMatMul);
parcelHelpers.export(exports, "FusedConv2D", ()=>FusedConv2D);
parcelHelpers.export(exports, "FusedDepthwiseConv2D", ()=>FusedDepthwiseConv2D);
const Abs = "Abs";
const Acos = "Acos";
const Acosh = "Acosh";
const Add = "Add";
const AddN = "AddN";
const All = "All";
const Any = "Any";
const ArgMax = "ArgMax";
const ArgMin = "ArgMin";
const Asin = "Asin";
const Asinh = "Asinh";
const Atan = "Atan";
const Atanh = "Atanh";
const Atan2 = "Atan2";
const AvgPool = "AvgPool";
const AvgPoolGrad = "AvgPoolGrad";
const AvgPool3D = "AvgPool3D";
const AvgPool3DGrad = "AvgPool3DGrad";
const BatchMatMul = "BatchMatMul";
const BatchToSpaceND = "BatchToSpaceND";
const Bincount = "Bincount";
const BroadcastTo = "BroadcastTo";
const BroadcastArgs = "BroadcastArgs";
const Cast = "Cast";
const Ceil = "Ceil";
const ClipByValue = "ClipByValue";
const Complex = "Complex";
const ComplexAbs = "ComplexAbs";
const Concat = "Concat";
const Conv2D = "Conv2D";
const Conv2DBackpropFilter = "Conv2DBackpropFilter";
const Conv2DBackpropInput = "Conv2DBackpropInput";
const Conv3D = "Conv3D";
const Conv3DBackpropFilterV2 = "Conv3DBackpropFilterV2";
const Conv3DBackpropInputV2 = "Conv3DBackpropInputV2";
const Cos = "Cos";
const Cosh = "Cosh";
const Cumprod = "Cumprod";
const Cumsum = "Cumsum";
const CropAndResize = "CropAndResize";
const DenseBincount = "DenseBincount";
const DepthToSpace = "DepthToSpace";
const DepthwiseConv2dNative = "DepthwiseConv2dNative";
const DepthwiseConv2dNativeBackpropFilter = "DepthwiseConv2dNativeBackpropFilter";
const DepthwiseConv2dNativeBackpropInput = "DepthwiseConv2dNativeBackpropInput";
const Diag = "Diag";
const Dilation2D = "Dilation2D";
const Dilation2DBackpropInput = "Dilation2DBackpropInput";
const Dilation2DBackpropFilter = "Dilation2DBackpropFilter";
const RealDiv = "RealDiv";
const Einsum = "Einsum";
const Elu = "Elu";
const EluGrad = "EluGrad";
const Erf = "Erf";
const Equal = "Equal";
const Exp = "Exp";
const ExpandDims = "ExpandDims";
const Expm1 = "Expm1";
const FFT = "FFT";
const Fill = "Fill";
const FlipLeftRight = "FlipLeftRight";
const Floor = "Floor";
const FloorDiv = "FloorDiv";
const FusedBatchNorm = "FusedBatchNorm";
const GatherV2 = "GatherV2";
const GatherNd = "GatherNd";
const Greater = "Greater";
const GreaterEqual = "GreaterEqual";
const Identity = "Identity";
const IFFT = "IFFT";
const Imag = "Imag";
const IsFinite = "IsFinite";
const IsInf = "IsInf";
const IsNan = "IsNan";
const LeakyRelu = "LeakyRelu";
const Less = "Less";
const LessEqual = "LessEqual";
const LinSpace = "LinSpace";
const Log = "Log";
const Log1p = "Log1p";
const LogicalAnd = "LogicalAnd";
const LogicalNot = "LogicalNot";
const LogicalOr = "LogicalOr";
const LogicalXor = "LogicalXor";
const LogSoftmax = "LogSoftmax";
const LowerBound = "LowerBound";
const LRN = "LRN";
const LRNGrad = "LRNGrad";
const Max = "Max";
const Maximum = "Maximum";
const MaxPool = "MaxPool";
const MaxPoolGrad = "MaxPoolGrad";
const MaxPool3D = "MaxPool3D";
const MaxPool3DGrad = "MaxPool3DGrad";
const MaxPoolWithArgmax = "MaxPoolWithArgmax";
const Mean = "Mean";
const Min = "Min";
const Minimum = "Minimum";
const MirrorPad = "MirrorPad";
const Mod = "Mod";
const Multinomial = "Multinomial";
const Multiply = "Multiply";
const Neg = "Neg";
const NotEqual = "NotEqual";
const NonMaxSuppressionV3 = "NonMaxSuppressionV3";
const NonMaxSuppressionV4 = "NonMaxSuppressionV4";
const NonMaxSuppressionV5 = "NonMaxSuppressionV5";
const OnesLike = "OnesLike";
const OneHot = "OneHot";
const Pack = "Pack";
const PadV2 = "PadV2";
const Pool = "Pool";
const Pow = "Pow";
const Prelu = "Prelu";
const Prod = "Prod";
const RaggedTensorToTensor = "RaggedTensorToTensor";
const Range = "Range";
const Real = "Real";
const Reciprocal = "Reciprocal";
const Relu = "Relu";
const Reshape = "Reshape";
const ResizeNearestNeighbor = "ResizeNearestNeighbor";
const ResizeNearestNeighborGrad = "ResizeNearestNeighborGrad";
const ResizeBilinear = "ResizeBilinear";
const ResizeBilinearGrad = "ResizeBilinearGrad";
const Relu6 = "Relu6";
const Reverse = "Reverse";
const Round = "Round";
const Rsqrt = "Rsqrt";
const ScatterNd = "ScatterNd";
const SearchSorted = "SearchSorted";
const Select = "Select";
const Selu = "Selu";
const Slice = "Slice";
const Sin = "Sin";
const Sinh = "Sinh";
const Sign = "Sign";
const Sigmoid = "Sigmoid";
const Softplus = "Softplus";
const Sqrt = "Sqrt";
const Sum = "Sum";
const SpaceToBatchND = "SpaceToBatchND";
const SplitV = "SplitV";
const Softmax = "Softmax";
const SparseFillEmptyRows = "SparseFillEmptyRows";
const SparseReshape = "SparseReshape";
const SparseSegmentMean = "SparseSegmentMean";
const SparseSegmentSum = "SparseSegmentSum";
const SparseToDense = "SparseToDense";
const SquaredDifference = "SquaredDifference";
const Square = "Square";
const StridedSlice = "StridedSlice";
const StringNGrams = "StringNGrams";
const StringSplit = "StringSplit";
const StringToHashBucketFast = "StringToHashBucketFast";
const Sub = "Sub";
const Tan = "Tan";
const Tanh = "Tanh";
const Tile = "Tile";
const TopK = "TopK";
const Transform = "Transform";
const Transpose = "Transpose";
const Unique = "Unique";
const Unpack = "Unpack";
const UnsortedSegmentSum = "UnsortedSegmentSum";
const UpperBound = "UpperBound";
const ZerosLike = "ZerosLike";
const Step = "Step";
const FromPixels = "FromPixels";
const RotateWithOffset = "RotateWithOffset";
const _FusedMatMul = "_FusedMatMul";
const FusedConv2D = "FusedConv2D";
const FusedDepthwiseConv2D = "FusedDepthwiseConv2D";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ziE7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */ parcelHelpers.export(exports, "getKernel", ()=>getKernel);
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */ parcelHelpers.export(exports, "getGradient", ()=>getGradient);
parcelHelpers.export(exports, "getKernelsForBackend", ()=>getKernelsForBackend);
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */ parcelHelpers.export(exports, "registerKernel", ()=>registerKernel);
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */ parcelHelpers.export(exports, "registerGradient", ()=>registerGradient);
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */ parcelHelpers.export(exports, "unregisterKernel", ()=>unregisterKernel);
/** Removes the registered gradient from the global registry. */ parcelHelpers.export(exports, "unregisterGradient", ()=>unregisterGradient);
/**
 * Finds kernels that have already been registered to a backend and re-registers
 * them for a new backend. Useful for registering custom backends.
 * @param registeredBackendName Already registered backend.
 * @param newBackendName New backend.
 */ parcelHelpers.export(exports, "copyRegisteredKernels", ()=>copyRegisteredKernels);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
var _globalUtil = require("./global_util");
var _log = require("./log");
const kernelRegistry = (0, _globalUtil.getGlobal)("kernelRegistry", ()=>new Map());
const gradRegistry = (0, _globalUtil.getGlobal)("gradRegistry", ()=>new Map());
function getKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    return kernelRegistry.get(key);
}
function getGradient(kernelName) {
    return gradRegistry.get(kernelName);
}
function getKernelsForBackend(backendName) {
    const it = kernelRegistry.entries();
    const result = [];
    while(true){
        const { done , value  } = it.next();
        if (done) break;
        const [key, config] = value;
        const [backend, ] = key.split("_");
        if (backend === backendName) result.push(config);
    }
    return result;
}
function registerKernel(config) {
    const { kernelName , backendName  } = config;
    const key = makeKey(kernelName, backendName);
    if (kernelRegistry.has(key)) _log.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);
    kernelRegistry.set(key, config);
}
function registerGradient(config) {
    const { kernelName  } = config;
    if (gradRegistry.has(kernelName)) // TODO (yassogba) after 3.0 assess whether we need to keep this gated
    // to debug mode.
    {
        if ((0, _environment.env)().getBool("DEBUG")) _log.warn(`Overriding the gradient for '${kernelName}'`);
    }
    gradRegistry.set(kernelName, config);
}
function unregisterKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    if (!kernelRegistry.has(key)) throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);
    kernelRegistry.delete(key);
}
function unregisterGradient(kernelName) {
    if (!gradRegistry.has(kernelName)) throw new Error(`The gradient '${kernelName}' for backend is not registered`);
    gradRegistry.delete(kernelName);
}
function copyRegisteredKernels(registeredBackendName, newBackendName) {
    const kernels = getKernelsForBackend(registeredBackendName);
    kernels.forEach((kernelConfig)=>{
        const newKernelConfig = Object.assign({}, kernelConfig, {
            backendName: newBackendName
        });
        registerKernel(newKernelConfig);
    });
}
function makeKey(kernelName, backendName) {
    return `${backendName}_${kernelName}`;
}

},{"./environment":"8tlxC","./global_util":"4etpx","./log":"fT4Tx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fT4Tx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "log", ()=>log);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
function warn(...msg) {
    if (!((0, _environment.env)().getBool("IS_TEST") || (0, _environment.env)().getBool("PROD"))) console.warn(...msg);
}
function log(...msg) {
    if (!((0, _environment.env)().getBool("IS_TEST") || (0, _environment.env)().getBool("PROD"))) console.log(...msg);
}

},{"./environment":"8tlxC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GT9C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Profiler", ()=>Profiler);
parcelHelpers.export(exports, "checkComputationForErrors", ()=>checkComputationForErrors);
parcelHelpers.export(exports, "Logger", ()=>Logger);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
var _util = require("./util");
class Profiler {
    constructor(backendTimer, logger){
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) this.logger = new Logger();
    }
    profileKernel(kernelName, inputs, f) {
        let outputs;
        const holdResultWrapperFn = ()=>{
            outputs = f();
        };
        let timer;
        const start = _util.now();
        if (this.backendTimer.timerAvailable()) timer = this.backendTimer.time(holdResultWrapperFn);
        else {
            holdResultWrapperFn();
            for (const output of outputs)output.dataSync();
            timer = Promise.resolve({
                kernelMs: _util.now() - start
            });
        }
        if ((0, _environment.env)().getBool("CHECK_COMPUTATION_FOR_ERRORS")) for(let i = 0; i < outputs.length; i++){
            const output1 = outputs[i];
            // Dangling promise here because we don't want to propagate up
            // asynchronicity.
            output1.data().then((tensorVals)=>{
                checkComputationForErrors(tensorVals, output1.dtype, kernelName);
            });
        }
        const kernelProfile = {
            kernelName,
            outputs,
            inputs,
            timeMs: timer.then((timing)=>timing.kernelMs),
            extraInfo: timer.then((timing)=>timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : "")
        };
        return kernelProfile;
    }
    logKernelProfile(kernelProfile) {
        const { kernelName , outputs , timeMs , inputs , extraInfo  } = kernelProfile;
        outputs.forEach((result)=>{
            Promise.all([
                result.data(),
                timeMs,
                extraInfo
            ]).then((valueContainer)=>{
                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
            });
        });
    }
}
function checkComputationForErrors(vals, dtype, kernelName) {
    if (dtype !== "float32") // Only floating point computations will generate NaN values
    return false;
    for(let i = 0; i < vals.length; i++){
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            // Throwing custom exception so behavior is testable.
            console.warn(`Found ${num} in the result of '${kernelName}'`);
            return true;
        }
    }
    return false;
}
class Logger {
    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
        const time = typeof timeMs === "number" ? _util.rightPad(`${timeMs}ms`, 9) : timeMs["error"];
        const paddedName = _util.rightPad(name, 25);
        const rank = result.rank;
        const size = result.size;
        const shape = _util.rightPad(result.shape.toString(), 14);
        let inputShapesDescription = "";
        for(const name1 in inputs){
            const input = inputs[name1];
            if (input != null) {
                // The input might be a non-tensor (e.g HTMLImageElement), in which case
                // we claim the output shape as input shape.
                const inputShape = input.shape || result.shape;
                const inputRank = inputShape.length;
                inputShapesDescription += `${name1}: ${inputRank}D ${inputRank > 0 ? inputShape : ""} `;
            }
        }
        console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
    }
}

},{"./environment":"8tlxC","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9v6Fb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create typed array for scalar value. Used for storing in `DataStorage`.
 */ parcelHelpers.export(exports, "createScalarValue", ()=>createScalarValue);
parcelHelpers.export(exports, "toTypedArray", ()=>toTypedArray);
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */ parcelHelpers.export(exports, "now", ()=>now);
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */ parcelHelpers.export(exports, "fetch", ()=>fetch);
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */ parcelHelpers.export(exports, "encodeString", ()=>encodeString);
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */ parcelHelpers.export(exports, "decodeString", ()=>decodeString);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
var _utilBase = require("./util_base");
parcelHelpers.exportAll(_utilBase, exports);
var _hashUtil = require("./hash_util");
parcelHelpers.exportAll(_hashUtil, exports);
function createScalarValue(value, dtype) {
    if (dtype === "string") return encodeString(value);
    return toTypedArray([
        value
    ], dtype);
}
function noConversionNeeded(a, dtype) {
    return a instanceof Float32Array && dtype === "float32" || a instanceof Int32Array && dtype === "int32" || a instanceof Uint8Array && dtype === "bool";
}
function toTypedArray(a, dtype) {
    if (dtype === "string") throw new Error("Cannot convert a string[] to a TypedArray");
    if (Array.isArray(a)) a = _utilBase.flatten(a);
    if ((0, _environment.env)().getBool("DEBUG")) _utilBase.checkConversionForErrors(a, dtype);
    if (noConversionNeeded(a, dtype)) return a;
    if (dtype == null || dtype === "float32" || dtype === "complex64") return new Float32Array(a);
    else if (dtype === "int32") return new Int32Array(a);
    else if (dtype === "bool") {
        const bool = new Uint8Array(a.length);
        for(let i = 0; i < bool.length; ++i)if (Math.round(a[i]) !== 0) bool[i] = 1;
        return bool;
    } else throw new Error(`Unknown data type ${dtype}`);
}
function now() {
    return (0, _environment.env)().platform.now();
}
function fetch(path, requestInits) {
    return (0, _environment.env)().platform.fetch(path, requestInits);
}
function encodeString(s, encoding = "utf-8") {
    encoding = encoding || "utf-8";
    return (0, _environment.env)().platform.encode(s, encoding);
}
function decodeString(bytes, encoding = "utf-8") {
    encoding = encoding || "utf-8";
    return (0, _environment.env)().platform.decode(bytes, encoding);
}

},{"./environment":"8tlxC","./util_base":"a2mCK","./hash_util":"gPp1q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPp1q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hexToLong", ()=>hexToLong);
parcelHelpers.export(exports, "fingerPrint64", ()=>fingerPrint64);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Workaround for allowing cjs module to be included in bundle created by
// rollup.
var _long = require("long");
// tslint:disable-next-line
const Long = // tslint:disable-next-line
_long.default || _long;
function hexToLong(hex) {
    return Long.fromString(hex, true, 16);
}
// Some primes between 2^63 and 2^64 for various uses.
// Hex 0xc3a5c85c97cb3127
const k0 = hexToLong("c3a5c85c97cb3127");
// Hex 0xb492b66fbe98f273
const k1 = hexToLong("b492b66fbe98f273");
// Hex 0x9ae16a3b2f90404f
const k2 = hexToLong("9ae16a3b2f90404f");
function shiftMix(val) {
    return val.xor(val.shru(47));
}
function fetch(s, offset, numBytes) {
    const bytes = s.slice(offset, offset + numBytes);
    return Long.fromBytes(Array.from(bytes), true, true);
}
function fetch64(s, offset) {
    return fetch(s, offset, 8);
}
function fetch32(s, offset) {
    return fetch(s, offset, 4);
}
function rotate64(val, shift) {
    // Avoid shifting by 64: doing so yields an undefined result.
    return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));
}
function hashLen16(u, v, mul = hexToLong("9ddfea08eb382d69")) {
    // Murmur-inspired hashing.
    let a = u.xor(v).mul(mul);
    a = a.xor(a.shru(47));
    let b = v.xor(a).mul(mul);
    b = b.xor(b.shru(47));
    b = b.mul(mul);
    return b;
}
// Return a 16-byte hash for 48 bytes.  Quick and dirty.
// Callers do best to use "random-looking" values for a and b.
function weakHashLen32WithSeeds(w, x, y, z, a, b) {
    a = a.add(w);
    b = rotate64(b.add(a).add(z), 21);
    const c = a;
    a = a.add(x);
    a = a.add(y);
    b = b.add(rotate64(a, 44));
    return [
        a.add(z),
        b.add(c)
    ];
}
function weakHashLen32WithSeedsStr(s, offset, a, b) {
    return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);
}
function hashLen0to16(s, len = s.length) {
    if (len >= 8) {
        const mul = k2.add(len * 2);
        const a = fetch64(s, 0).add(k2);
        const b = fetch64(s, len - 8);
        const c = rotate64(b, 37).mul(mul).add(a);
        const d = rotate64(a, 25).add(b).mul(mul);
        return hashLen16(c, d, mul);
    }
    if (len >= 4) {
        const mul1 = k2.add(len * 2);
        const a1 = fetch32(s, 0);
        return hashLen16(a1.shl(3).add(len), fetch32(s, len - 4), mul1);
    }
    if (len > 0) {
        const a2 = s[0];
        const b1 = s[len >> 1];
        const c1 = s[len - 1];
        const y = a2 + (b1 << 8);
        const z = len + (c1 << 2);
        return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);
    }
    return k2;
}
function hashLen17to32(s, len = s.length) {
    const mul = k2.add(len * 2);
    const a = fetch64(s, 0).mul(k1);
    const b = fetch64(s, 8);
    const c = fetch64(s, len - 8).mul(mul);
    const d = fetch64(s, len - 16).mul(k2);
    return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);
}
function hashLen33to64(s, len = s.length) {
    const mul = k2.add(len * 2);
    const a = fetch64(s, 0).mul(k2);
    const b = fetch64(s, 8);
    const c = fetch64(s, len - 8).mul(mul);
    const d = fetch64(s, len - 16).mul(k2);
    const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);
    const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);
    const e = fetch64(s, 16).mul(mul);
    const f = fetch64(s, 24);
    const g = y.add(fetch64(s, len - 32)).mul(mul);
    const h = z.add(fetch64(s, len - 24)).mul(mul);
    return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);
}
function fingerPrint64(s, len = s.length) {
    const seed = Long.fromNumber(81, true);
    if (len <= 32) {
        if (len <= 16) return hashLen0to16(s, len);
        else return hashLen17to32(s, len);
    } else if (len <= 64) return hashLen33to64(s, len);
    // For strings over 64 bytes we loop.  Internal state consists of
    // 56 bytes: v, w, x, y, and z.
    let x = seed;
    let y = seed.mul(k1).add(113);
    let z = shiftMix(y.mul(k2).add(113)).mul(k2);
    let v = [
        Long.UZERO,
        Long.UZERO
    ];
    let w = [
        Long.UZERO,
        Long.UZERO
    ];
    x = x.mul(k2).add(fetch64(s, 0));
    let offset = 0;
    // Set end so that after the loop we have 1 to 64 bytes left to process.
    const end = (len - 1 >> 6) * 64;
    const last64 = end + (len - 1 & 63) - 63;
    do {
        x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);
        y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);
        x = x.xor(w[1]);
        y = y.add(v[0]).add(fetch64(s, offset + 40));
        z = rotate64(z.add(w[0]), 33).mul(k1);
        v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));
        w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
        [z, x] = [
            x,
            z
        ];
        offset += 64;
    }while (offset !== end);
    const mul = k1.add(z.and(0xff).shl(1));
    // Point to the last 64 bytes of input.
    offset = last64;
    w[0] = w[0].add(len - 1 & 63);
    v[0] = v[0].add(w[0]);
    w[0] = w[0].add(v[0]);
    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);
    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);
    x = x.xor(w[1].mul(9));
    y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));
    z = rotate64(z.add(w[0]), 33).mul(mul);
    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));
    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
    [z, x] = [
        x,
        z
    ];
    return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);
}

},{"long":"cuJZT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cuJZT":[function(require,module,exports) {
module.exports = Long;
/**
 * wasm optimizations, to do native i64 multiplication and divide
 */ var wasm = null;
try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
    ])), {}).exports;
} catch (e) {
// no wasm support :(
}
/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */ function Long(low, high, unsigned) {
    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */ this.low = low | 0;
    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */ this.high = high | 0;
    /**
     * Whether unsigned or not.
     * @type {boolean}
     */ this.unsigned = !!unsigned;
}
// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.
/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */ Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", {
    value: true
});
/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */ function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}
/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */ Long.isLong = isLong;
/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */ var INT_CACHE = {};
/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */ var UINT_CACHE = {};
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache) UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache) INT_CACHE[value] = obj;
        return obj;
    }
}
/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromInt = fromInt;
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0) return UZERO;
        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    }
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromNumber = fromNumber;
/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}
/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ Long.fromBits = fromBits;
/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */ var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */ function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error("empty string");
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;
    if (typeof unsigned === "number") // For goog.math.long compatibility
    radix = unsigned, unsigned = false;
    else unsigned = !!unsigned;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError("radix");
    var p;
    if ((p = str.indexOf("-")) > 0) throw Error("interior hyphen");
    else if (p === 0) return fromString(str.substring(1), unsigned, radix).neg();
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO;
    for(var i = 0; i < str.length; i += 8){
        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}
/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */ Long.fromString = fromString;
/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ function fromValue(val, unsigned) {
    if (typeof val === "number") return fromNumber(val, unsigned);
    if (typeof val === "string") return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
}
/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */ Long.fromValue = fromValue;
// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_16_DBL = 65536;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_24_DBL = 16777216;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/**
 * @type {!Long}
 * @const
 * @inner
 */ var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
/**
 * @type {!Long}
 * @inner
 */ var ZERO = fromInt(0);
/**
 * Signed zero.
 * @type {!Long}
 */ Long.ZERO = ZERO;
/**
 * @type {!Long}
 * @inner
 */ var UZERO = fromInt(0, true);
/**
 * Unsigned zero.
 * @type {!Long}
 */ Long.UZERO = UZERO;
/**
 * @type {!Long}
 * @inner
 */ var ONE = fromInt(1);
/**
 * Signed one.
 * @type {!Long}
 */ Long.ONE = ONE;
/**
 * @type {!Long}
 * @inner
 */ var UONE = fromInt(1, true);
/**
 * Unsigned one.
 * @type {!Long}
 */ Long.UONE = UONE;
/**
 * @type {!Long}
 * @inner
 */ var NEG_ONE = fromInt(-1);
/**
 * Signed negative one.
 * @type {!Long}
 */ Long.NEG_ONE = NEG_ONE;
/**
 * @type {!Long}
 * @inner
 */ var MAX_VALUE = fromBits(-1, 2147483647, false);
/**
 * Maximum signed value.
 * @type {!Long}
 */ Long.MAX_VALUE = MAX_VALUE;
/**
 * @type {!Long}
 * @inner
 */ var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
/**
 * Maximum unsigned value.
 * @type {!Long}
 */ Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
/**
 * @type {!Long}
 * @inner
 */ var MIN_VALUE = fromBits(0, -2147483648, false);
/**
 * Minimum signed value.
 * @type {!Long}
 */ Long.MIN_VALUE = MIN_VALUE;
/**
 * @alias Long.prototype
 * @inner
 */ var LongPrototype = Long.prototype;
/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */ LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};
/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */ LongPrototype.toNumber = function toNumber() {
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};
/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */ LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative()) {
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else return "-" + this.neg().toString(radix);
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
    var result = "";
    while(true){
        var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero()) return digits + result;
        else {
            while(digits.length < 6)digits = "0" + digits;
            result = "" + digits + result;
        }
    }
};
/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */ LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};
/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */ LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};
/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */ LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};
/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */ LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};
/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */ LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;
    return this.high != 0 ? bit + 33 : bit + 1;
};
/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */ LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};
/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */ LongPrototype.eqz = LongPrototype.isZero;
/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */ LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};
/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */ LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};
/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */ LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};
/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */ LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};
/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.equals = function equals(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return this.high === other.high && this.low === other.low;
};
/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.eq = LongPrototype.equals;
/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.neq = LongPrototype.notEquals;
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.ne = LongPrototype.notEquals;
/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};
/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lt = LongPrototype.lessThan;
/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.lte = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.le = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};
/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.gt = LongPrototype.greaterThan;
/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.gte = LongPrototype.greaterThanOrEqual;
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ LongPrototype.ge = LongPrototype.greaterThanOrEqual;
/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ LongPrototype.compare = function compare(other) {
    if (!isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    var thisNeg = this.isNegative(), otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1;
    // At this point the sign bits are the same
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};
/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ LongPrototype.comp = LongPrototype.compare;
/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */ LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
};
/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */ LongPrototype.neg = LongPrototype.negate;
/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */ LongPrototype.add = function add(addend) {
    if (!isLong(addend)) addend = fromValue(addend);
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};
/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ LongPrototype.sub = LongPrototype.subtract;
/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero()) return ZERO;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier);
    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (multiplier.isZero()) return ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
    if (this.isNegative()) {
        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());
        else return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();
    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ LongPrototype.mul = LongPrototype.multiply;
/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (divisor.isZero()) throw Error("division by zero");
    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) // be consistent with non-wasm code path
        return this;
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE)) return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) return divisor.isNegative() ? ONE : NEG_ONE;
                else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative()) return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned) divisor = divisor.toUnsigned();
        if (divisor.gt(this)) return UZERO;
        if (divisor.gt(this.shru(1))) return UONE;
        res = UZERO;
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while(rem.gte(divisor)){
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
        while(approxRem.isNegative() || approxRem.gt(rem)){
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }
        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero()) approxRes = ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};
/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ LongPrototype.div = LongPrototype.divide;
/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }
    return this.sub(this.div(divisor).mul(divisor));
};
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.mod = LongPrototype.modulo;
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ LongPrototype.rem = LongPrototype.modulo;
/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */ LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};
/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.and = function and(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};
/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.or = function or(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};
/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ LongPrototype.xor = function xor(other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
    else return fromBits(0, this.low << numBits - 32, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shl = LongPrototype.shiftLeft;
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
    else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shr = LongPrototype.shiftRight;
/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0) return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32) return fromBits(high, 0, this.unsigned);
        else return fromBits(high >>> numBits - 32, 0, this.unsigned);
    }
};
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shru = LongPrototype.shiftRightUnsigned;
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */ LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned) return this;
    return fromBits(this.low, this.high, false);
};
/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */ LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned) return this;
    return fromBits(this.low, this.high, true);
};
/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */ LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};
/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */ LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high, lo = this.low;
    return [
        lo & 0xff,
        lo >>> 8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24,
        hi & 0xff,
        hi >>> 8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};
/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */ LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high, lo = this.low;
    return [
        hi >>> 24,
        hi >>> 16 & 0xff,
        hi >>> 8 & 0xff,
        hi & 0xff,
        lo >>> 24,
        lo >>> 16 & 0xff,
        lo >>> 8 & 0xff,
        lo & 0xff
    ];
};
/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */ Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};
/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
};
/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
};

},{}],"82ekz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */ parcelHelpers.export(exports, "getFilteredNodesXToY", ()=>getFilteredNodesXToY);
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */ parcelHelpers.export(exports, "backpropagateGradients", ()=>backpropagateGradients);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
function getFilteredNodesXToY(tape, xs, y) {
    // Forward pass to compute all the nodes and Tensors that are transitively a
    // function of x.
    const tensorsFromX = {};
    const nodesFromX = {};
    for(let i = 0; i < xs.length; i++)tensorsFromX[xs[i].id] = true;
    for(let i1 = 0; i1 < tape.length; i1++){
        const node = tape[i1];
        const nodeInputs = node.inputs;
        for(const inputName in nodeInputs){
            const input = nodeInputs[inputName];
            let anyInputFromX = false;
            for(let j = 0; j < xs.length; j++)if (tensorsFromX[input.id]) {
                node.outputs.forEach((output)=>tensorsFromX[output.id] = true);
                anyInputFromX = true;
                nodesFromX[node.id] = true;
                break;
            }
            if (anyInputFromX) break;
        }
    }
    // Backward pass to find all of the nodes and Tensors that lead to y.
    const tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    const nodesToY = {};
    for(let i2 = tape.length - 1; i2 >= 0; i2--){
        const node1 = tape[i2];
        const nodeInputs1 = node1.inputs;
        // If any of the outputs lead to y, mark all of the inputs as leading to y.
        for(let j1 = 0; j1 < node1.outputs.length; j1++)if (tensorsLeadToY[node1.outputs[j1].id]) {
            for(const inputName1 in nodeInputs1){
                tensorsLeadToY[nodeInputs1[inputName1].id] = true;
                nodesToY[node1.id] = true;
            }
            break;
        }
    }
    // Return the paths that come from x and lead to y.
    const filteredTape = [];
    for(let i3 = 0; i3 < tape.length; i3++){
        const node2 = tape[i3];
        if (nodesFromX[node2.id] && nodesToY[node2.id]) {
            // Prune the inputs from the node that aren't a function of x.
            const prunedInputs = {};
            for(const inputName2 in node2.inputs){
                const nodeInput = node2.inputs[inputName2];
                if (tensorsFromX[nodeInput.id]) prunedInputs[inputName2] = nodeInput;
            }
            // Copy the node and overwrite inputsAndArgs to the pruned version.
            const prunedNode = Object.assign({}, node2);
            prunedNode.inputs = prunedInputs;
            prunedNode.outputs = node2.outputs;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
    // Walk the tape backward and keep a map of Tensor to its gradient.
    for(let i = filteredTape.length - 1; i >= 0; i--){
        const node = filteredTape[i];
        const dys = [];
        node.outputs.forEach((o)=>{
            const gradTensor = tensorAccumulatedGradientMap[o.id];
            if (gradTensor != null) dys.push(gradTensor);
            else // This particular output is not in the back-propagation subgraph, so it
            // does not affect the final output, thus we put null for its dy.
            dys.push(null);
        });
        if (node.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);
        // Backprop dy through this node and accumulate gradients over the inputs.
        const inputGradients = node.gradient(dys);
        for(const inputName in node.inputs){
            if (!(inputName in inputGradients)) throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);
            // Call the gradient function.
            const dx = tidy(()=>inputGradients[inputName]());
            if (dx.dtype !== "float32") throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
            const x = node.inputs[inputName];
            if (!_util.arraysEqual(dx.shape, x.shape)) throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);
            if (tensorAccumulatedGradientMap[x.id] == null) tensorAccumulatedGradientMap[x.id] = dx;
            else {
                const curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
                curGradient.dispose();
            }
        }
    }
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DPGBx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */ parcelHelpers.export(exports, "TensorBuffer", ()=>TensorBuffer);
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */ parcelHelpers.export(exports, "setTensorTracker", ()=>setTensorTracker);
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */ parcelHelpers.export(exports, "setOpHandler", ()=>setOpHandler);
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */ parcelHelpers.export(exports, "setDeprecationWarningFn", ()=>setDeprecationWarningFn);
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * For performance reasons, functions that create tensors do not necessarily
 * perform a copy of the data passed to them (e.g. if the data is passed as a
 * `Float32Array`), and changes to the data will change the tensor. This is not
 * a feature and is not supported. To avoid this behavior, use the tensor before
 * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */ parcelHelpers.export(exports, "Tensor", ()=>Tensor);
parcelHelpers.export(exports, "getGlobalTensorClass", ()=>getGlobalTensorClass);
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */ parcelHelpers.export(exports, "Variable", ()=>Variable);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="@webgpu/types/dist" />
var _globalUtil = require("./global_util");
var _tensorFormat = require("./tensor_format");
var _util = require("./util");
class TensorBuffer {
    constructor(shape, dtype, values){
        this.dtype = dtype;
        this.shape = shape.slice();
        this.size = _util.sizeFromShape(shape);
        if (values != null) {
            const n = values.length;
            _util.assert(n === this.size, ()=>`Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);
        }
        if (dtype === "complex64") throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);
        this.values = values || _util.getArrayFromDType(dtype, this.size);
        this.strides = (0, _util.computeStrides)(shape);
    }
    /**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */ set(value, ...locs) {
        if (locs.length === 0) locs = [
            0
        ];
        _util.assert(locs.length === this.rank, ()=>`The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);
        const index = this.locToIndex(locs);
        this.values[index] = value;
    }
    /**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */ get(...locs) {
        if (locs.length === 0) locs = [
            0
        ];
        let i = 0;
        for (const loc of locs){
            if (loc < 0 || loc >= this.shape[i]) {
                const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;
                throw new Error(msg);
            }
            i++;
        }
        let index = locs[locs.length - 1];
        for(let i1 = 0; i1 < locs.length - 1; ++i1)index += this.strides[i1] * locs[i1];
        return this.values[index];
    }
    locToIndex(locs) {
        if (this.rank === 0) return 0;
        else if (this.rank === 1) return locs[0];
        let index = locs[locs.length - 1];
        for(let i = 0; i < locs.length - 1; ++i)index += this.strides[i] * locs[i];
        return index;
    }
    indexToLoc(index) {
        if (this.rank === 0) return [];
        else if (this.rank === 1) return [
            index
        ];
        const locs = new Array(this.shape.length);
        for(let i = 0; i < locs.length - 1; ++i){
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Creates an immutable `tf.Tensor` object from the buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */ toTensor() {
        return trackerFn().makeTensor(this.values, this.shape, this.dtype);
    }
}
// For tracking tensor creation and disposal.
let trackerFn = null;
// Used by chaining methods to call into ops.
let opHandler = null;
// Used to warn about deprecated methods.
let deprecationWarningFn = null;
function setTensorTracker(fn) {
    trackerFn = fn;
}
function setOpHandler(handler) {
    opHandler = handler;
}
function setDeprecationWarningFn(fn) {
    deprecationWarningFn = fn;
}
class Tensor {
    constructor(shape, dtype, dataId, id){
        /** Whether this tensor has been globally kept. */ this.kept = false;
        this.isDisposedInternal = false;
        this.shape = shape.slice();
        this.dtype = dtype || "float32";
        this.size = _util.sizeFromShape(shape);
        this.strides = (0, _util.computeStrides)(shape);
        this.dataId = dataId;
        this.id = id;
        this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ async buffer() {
        const vals = await this.data();
        return opHandler.buffer(this.shape, this.dtype, vals);
    }
    /**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ bufferSync() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ async array() {
        const vals = await this.data();
        return (0, _util.toNestedArray)(this.shape, vals, this.dtype === "complex64");
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ arraySync() {
        return (0, _util.toNestedArray)(this.shape, this.dataSync(), this.dtype === "complex64");
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ async data() {
        this.throwIfDisposed();
        const data = trackerFn().read(this.dataId);
        if (this.dtype === "string") {
            const bytes = await data;
            try {
                return bytes.map((b)=>_util.decodeString(b));
            } catch (_a) {
                throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
            }
        }
        return data;
    }
    /**
     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
     * and `data()`, this method prevents data from being downloaded to CPU.
     *
     * For WebGL backend, the data will be stored on a densely packed texture.
     * This means that the texture will use the RGBA channels to store value.
     *
     * For WebGPU backend, the data will be stored on a buffer. There is no
     * parameter, so can not use an user defined size to create the buffer.
     *
     * @param options:
     *     For WebGL,
     *         - customTexShape: Optional. If set, will use the user defined
     *     texture shape to create the texture.
     *
     * @returns For WebGL backend, a GPUData contains the new texture and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this texture,
     *        texture: WebGLTexture,
     *        texShape: [number, number] // [height, width]
     *     }
     *
     *     For WebGPU backend, a GPUData contains the new buffer and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this buffer,
     *        buffer: GPUBuffer,
     *        bufSize: number
     *     }
     *
     *     Remember to dispose the GPUData after it is used by
     *     `res.tensorRef.dispose()`.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ dataToGPU(options) {
        this.throwIfDisposed();
        return trackerFn().readToGPU(this.dataId, options);
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ dataSync() {
        this.throwIfDisposed();
        const data = trackerFn().readSync(this.dataId);
        if (this.dtype === "string") try {
            return data.map((b)=>_util.decodeString(b));
        } catch (_a) {
            throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
        }
        return data;
    }
    /** Returns the underlying bytes of the tensor's data. */ async bytes() {
        this.throwIfDisposed();
        const data = await trackerFn().read(this.dataId);
        if (this.dtype === "string") return data;
        else return new Uint8Array(data.buffer);
    }
    /**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ dispose() {
        if (this.isDisposed) return;
        trackerFn().disposeTensor(this);
        this.isDisposedInternal = true;
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) throw new Error(`Tensor is disposed.`);
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ print(verbose = false) {
        return opHandler.print(this, verbose);
    }
    /**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ clone() {
        this.throwIfDisposed();
        return opHandler.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ toString(verbose = false) {
        const vals = this.dataSync();
        return (0, _tensorFormat.tensorToString)(vals, this.shape, this.dtype, verbose);
    }
    cast(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    variable(trainable = true, name, dtype) {
        this.throwIfDisposed();
        return trackerFn().makeVariable(this, trainable, name, dtype);
    }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: (instance)=>{
        // Implementation note: we should use properties of the object that will be
        // defined before the constructor body has finished executing (methods).
        // This is because when this code is transpiled by babel, babel will call
        // classCallCheck before the constructor body is run.
        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
        return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;
    }
});
function getGlobalTensorClass() {
    // Use getGlobal so that we can augment the Tensor class across package
    // boundaries becase the node resolution alg may result in different modules
    // being returned for this file depending on the path they are loaded from.
    return (0, _globalUtil.getGlobal)("Tensor", ()=>{
        return Tensor;
    });
}
// Global side effect. Cache global reference to Tensor class
getGlobalTensorClass();
class Variable extends Tensor {
    constructor(initialValue, trainable, name, tensorId){
        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
        this.trainable = trainable;
        this.name = name;
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */ assign(newValue) {
        if (newValue.dtype !== this.dtype) throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);
        if (!_util.arraysEqual(newValue.shape, this.shape)) throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);
        trackerFn().disposeTensor(this);
        this.dataId = newValue.dataId;
        trackerFn().incRef(this, null);
    }
    dispose() {
        trackerFn().disposeVariable(this);
        this.isDisposedInternal = true;
    }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: (instance)=>{
        return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;
    }
});

},{"./global_util":"4etpx","./tensor_format":"ly7SV","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ly7SV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tensorToString", ()=>tensorToString);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20;
// Number of first and last values to show when displaying a, b,...,y, z.
const FORMAT_NUM_FIRST_LAST_VALS = 3;
// Number of significant digits to show.
const FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(vals, shape, dtype, verbose) {
    const strides = (0, _util.computeStrides)(shape);
    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
    const rank = shape.length;
    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
    const lines = [
        "Tensor"
    ];
    if (verbose) {
        lines.push(`  dtype: ${dtype}`);
        lines.push(`  rank: ${rank}`);
        lines.push(`  shape: [${shape}]`);
        lines.push(`  values:`);
    }
    lines.push(valsLines.map((l)=>"    " + l).join("\n"));
    return lines.join("\n");
}
function computeMaxSizePerColumn(vals, shape, dtype, strides) {
    const n = (0, _util.sizeFromShape)(shape);
    const numCols = strides[strides.length - 1];
    const padPerCol = new Array(numCols).fill(0);
    const rank = shape.length;
    const valuesOrTuples = dtype === "complex64" ? createComplexTuples(vals) : vals;
    if (rank > 1) for(let row = 0; row < n / numCols; row++){
        const offset = row * numCols;
        for(let j = 0; j < numCols; j++)padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
    }
    return padPerCol;
}
function valToString(val, pad, dtype) {
    let valStr;
    if (Array.isArray(val)) valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` + `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
    else if ((0, _util.isString)(val)) valStr = `'${val}'`;
    else if (dtype === "bool") valStr = boolNumToString(val);
    else valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
    return (0, _util.rightPad)(valStr, pad);
}
function boolNumToString(v) {
    return v === 0 ? "false" : "true";
}
function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
    const storagePerElement = dtype === "complex64" ? 2 : 1;
    const size = shape[0];
    const rank = shape.length;
    if (rank === 0) {
        if (dtype === "complex64") {
            const complexTuple = createComplexTuples(vals);
            return [
                valToString(complexTuple[0], 0, dtype)
            ];
        }
        if (dtype === "bool") return [
            boolNumToString(vals[0])
        ];
        return [
            vals[0].toString()
        ];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
            let firstVals = Array.from(vals.slice(0, firstValsSize));
            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
            if (dtype === "complex64") {
                firstVals = createComplexTuples(firstVals);
                lastVals = createComplexTuples(lastVals);
            }
            return [
                "[" + firstVals.map((x, i)=>valToString(x, padPerCol[i], dtype)).join(", ") + ", ..., " + lastVals.map((x, i)=>valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(", ") + "]"
            ];
        }
        const displayVals = dtype === "complex64" ? createComplexTuples(vals) : Array.from(vals);
        return [
            "[" + displayVals.map((x, i)=>valToString(x, padPerCol[i], dtype)).join(", ") + "]"
        ];
    }
    // The array is rank 2 or more.
    const subshape = shape.slice(1);
    const substrides = strides.slice(1);
    const stride = strides[0] * storagePerElement;
    const lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for(let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++){
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false));
        }
        lines.push("...");
        for(let i1 = size - FORMAT_NUM_FIRST_LAST_VALS; i1 < size; i1++){
            const start1 = i1 * stride;
            const end1 = start1 + stride;
            lines.push(...subTensorToString(vals.slice(start1, end1), subshape, dtype, substrides, padPerCol, i1 === size - 1 /* isLast */ ));
        }
    } else for(let i2 = 0; i2 < size; i2++){
        const start2 = i2 * stride;
        const end2 = start2 + stride;
        lines.push(...subTensorToString(vals.slice(start2, end2), subshape, dtype, substrides, padPerCol, i2 === size - 1 /* isLast */ ));
    }
    const sep = rank === 2 ? "," : "";
    lines[0] = "[" + lines[0] + sep;
    for(let i3 = 1; i3 < lines.length - 1; i3++)lines[i3] = " " + lines[i3] + sep;
    let newLineSep = ",\n";
    for(let i4 = 2; i4 < rank; i4++)newLineSep += "\n";
    lines[lines.length - 1] = " " + lines[lines.length - 1] + "]" + (isLast ? "" : newLineSep);
    return lines;
}
function createComplexTuples(vals) {
    const complexTuples = [];
    for(let i = 0; i < vals.length; i += 2)complexTuples.push([
        vals[i],
        vals[i + 1]
    ]);
    return complexTuples;
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUGKD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeTypesMatch", ()=>makeTypesMatch);
parcelHelpers.export(exports, "assertTypesMatch", ()=>assertTypesMatch);
parcelHelpers.export(exports, "isTensorInList", ()=>isTensorInList);
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */ parcelHelpers.export(exports, "getTensorsInContainer", ()=>getTensorsInContainer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("./tensor");
var _types = require("./types");
var _util = require("./util");
function makeTypesMatch(a, b) {
    if (a.dtype === b.dtype) return [
        a,
        b
    ];
    const dtype = (0, _types.upcastType)(a.dtype, b.dtype);
    return [
        a.cast(dtype),
        b.cast(dtype)
    ];
}
function assertTypesMatch(a, b) {
    (0, _util.assert)(a.dtype === b.dtype, ()=>`The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);
}
function isTensorInList(tensor, tensorList) {
    return tensorList.some((x)=>x.id === tensor.id);
}
function getTensorsInContainer(result) {
    const list = [];
    const seen = new Set();
    walkTensorContainer(result, list, seen);
    return list;
}
function walkTensorContainer(container, list, seen) {
    if (container == null) return;
    if (container instanceof (0, _tensor.Tensor)) {
        list.push(container);
        return;
    }
    if (!isIterable(container)) return;
    // Iteration over keys works also for arrays.
    const iterable = container;
    for(const k in iterable){
        const val = iterable[k];
        if (!seen.has(val)) {
            seen.add(val);
            walkTensorContainer(val, list, seen);
        }
    }
}
// tslint:disable-next-line:no-any
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === "object";
}

},{"./tensor":"DPGBx","./types":"aToA9","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aToA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Rank", ()=>Rank);
parcelHelpers.export(exports, "upcastType", ()=>upcastType);
/** Returns the output type after summation. */ parcelHelpers.export(exports, "sumOutType", ()=>sumOutType);
var Rank;
(function(Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
    Rank["R5"] = "R5";
    Rank["R6"] = "R6";
})(Rank || (Rank = {}));
// Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.
var UpcastInt32AndMap;
(function(UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
    UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function(UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
    UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function(UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
    UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function(UpcastComplex64AndMap) {
    UpcastComplex64AndMap["float32"] = "complex64";
    UpcastComplex64AndMap["int32"] = "complex64";
    UpcastComplex64AndMap["bool"] = "complex64";
    UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
    "float32": UpcastFloat32AndMap,
    "int32": UpcastInt32AndMap,
    "bool": UpcastBoolAndMap,
    "complex64": UpcastComplex64AndMap
};
function upcastType(typeA, typeB) {
    if (typeA === "string" || typeB === "string") {
        if (typeA === "string" && typeB === "string") return "string";
        throw new Error(`Can not upcast ${typeA} with ${typeB}`);
    }
    return upcastTypeMap[typeA][typeB];
}
function sumOutType(type) {
    return upcastType(type, "int32");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krVi8":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _deviceUtil = require("./device_util");
var _environment = require("./environment");
var process = require("process");
const ENV = (0, _environment.env)();
/**
 * This file contains environment-related flag registrations.
 */ /** Whether to enable debug mode. */ ENV.registerFlag("DEBUG", ()=>false, (debugValue)=>{
    if (debugValue) console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
/** Whether we are in a browser (as versus, say, node.js) environment. */ ENV.registerFlag("IS_BROWSER", ()=>_deviceUtil.isBrowser());
/** Whether we are in a browser (as versus, say, node.js) environment. */ ENV.registerFlag("IS_NODE", ()=>typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined");
/** Whether this browser is Chrome. */ ENV.registerFlag("IS_CHROME", ()=>typeof navigator !== "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */ ENV.registerFlag("PROD", ()=>false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */ ENV.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", ()=>ENV.getBool("DEBUG"));
/** Whether deprecation warnings are enabled. */ ENV.registerFlag("DEPRECATION_WARNINGS_ENABLED", ()=>true);
/** True if running unit tests. */ ENV.registerFlag("IS_TEST", ()=>false);
/** Whether to check computation result for errors. */ ENV.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", ()=>true);
/** Whether the backend needs to wrap input to imageBitmap. */ ENV.registerFlag("WRAP_TO_IMAGEBITMAP", ()=>false);
/** Experimental flag, whether enter compile only phase. */ ENV.registerFlag("ENGINE_COMPILE_ONLY", ()=>false);
/** Whether to enable canvas2d willReadFrequently for GPU backends */ ENV.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", ()=>false);

},{"./engine":"1aEvR","./device_util":"ctAag","./environment":"8tlxC","process":"d5jf4"}],"ctAag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mockIsMobile", ()=>mockIsMobile);
parcelHelpers.export(exports, "isMobile", ()=>isMobile);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // tslint:disable-next-line:no-any
function _isNavigatorDefined() {
    return typeof navigator !== "undefined" && navigator != null;
}
let isMobileMockValue;
function mockIsMobile(value) {
    isMobileMockValue = value;
}
function isMobile(nav) {
    if (isMobileMockValue !== undefined) return isMobileMockValue;
    if (nav || _isNavigatorDefined()) {
        if (!nav) nav = navigator;
        if (nav.product === "ReactNative") return true;
        const a = nav.userAgent || nav.vendor || (typeof window !== "undefined" ? window.opera : "");
        // Use `navigator.userAgentData.mobile` as fallback.
        if (!a) {
            // tslint:disable-next-line:no-any
            const navAny = nav;
            return navAny.userAgentData && navAny.userAgentData.mobile;
        }
        // tslint:disable-next-line:max-line-length
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || // tslint:disable-next-line:max-line-length
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
    }
    return false;
}
function isBrowser() {
    return typeof window !== "undefined" && window.document != null || typeof WorkerGlobalScope !== "undefined";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIuHs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformBrowser", ()=>PlatformBrowser);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _flags = require("../flags");
var _environment = require("../environment");
var _indexedDb = require("../io/indexed_db");
var _localStorage = require("../io/local_storage");
var _modelManagement = require("../io/model_management");
class PlatformBrowser {
    fetch(path, init) {
        return fetch(path, init);
    }
    now() {
        return performance.now();
    }
    encode(text, encoding) {
        if (encoding !== "utf-8" && encoding !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
        if (this.textEncoder == null) this.textEncoder = new TextEncoder();
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        return new TextDecoder(encoding).decode(bytes);
    }
}
if ((0, _environment.env)().get("IS_BROWSER")) {
    (0, _environment.env)().setPlatform("browser", new PlatformBrowser());
    // Register LocalStorage IOHandler
    try {
        (0, _modelManagement.ModelStoreManagerRegistry).registerManager((0, _localStorage.BrowserLocalStorage).URL_SCHEME, new (0, _localStorage.BrowserLocalStorageManager)());
    } catch (err) {}
    // Register IndexedDB IOHandler
    try {
        (0, _modelManagement.ModelStoreManagerRegistry).registerManager((0, _indexedDb.BrowserIndexedDB).URL_SCHEME, new (0, _indexedDb.BrowserIndexedDBManager)());
    } catch (err1) {}
}

},{"../flags":"krVi8","../environment":"8tlxC","../io/indexed_db":"jCoGm","../io/local_storage":"fXcld","../io/model_management":"d8VhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jCoGm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */ parcelHelpers.export(exports, "deleteDatabase", ()=>deleteDatabase);
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */ parcelHelpers.export(exports, "BrowserIndexedDB", ()=>BrowserIndexedDB);
parcelHelpers.export(exports, "indexedDBRouter", ()=>indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */ parcelHelpers.export(exports, "browserIndexedDB", ()=>browserIndexedDB);
parcelHelpers.export(exports, "BrowserIndexedDBManager", ()=>BrowserIndexedDBManager);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _flags = require("../flags");
var _environment = require("../environment");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
const DATABASE_NAME = "tensorflowjs";
const DATABASE_VERSION = 1;
// Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.
const MODEL_STORE_NAME = "models_store";
// 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.
const INFO_STORE_NAME = "model_info_store";
async function deleteDatabase() {
    const idbFactory = getIndexedDBFactory();
    return new Promise((resolve, reject)=>{
        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);
        deleteRequest.onsuccess = ()=>resolve();
        deleteRequest.onerror = (error)=>reject(error);
    });
}
function getIndexedDBFactory() {
    if (!(0, _environment.env)().getBool("IS_BROWSER")) // TODO(cais): Add more info about what IOHandler subtypes are available.
    //   Maybe point to a doc page on the web and/or automatically determine
    //   the available IOHandlers and print them in the error message.
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
    // tslint:disable-next-line:no-any
    const theWindow = typeof window === "undefined" ? self : window;
    const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;
    if (factory == null) throw new Error("The current browser does not appear to support IndexedDB.");
    return factory;
}
function setUpDatabase(openRequest) {
    const db = openRequest.result;
    db.createObjectStore(MODEL_STORE_NAME, {
        keyPath: "modelPath"
    });
    db.createObjectStore(INFO_STORE_NAME, {
        keyPath: "modelPath"
    });
}
class BrowserIndexedDB {
    constructor(modelPath){
        this.indexedDB = getIndexedDBFactory();
        if (modelPath == null || !modelPath) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
        this.modelPath = modelPath;
    }
    async save(modelArtifacts) {
        // TODO(cais): Support saving GraphDef models.
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        return this.databaseAction(this.modelPath, modelArtifacts);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    /**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */ databaseAction(modelPath, modelArtifacts) {
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                if (modelArtifacts == null) {
                    // Read model out from object store.
                    const modelTx = db.transaction(MODEL_STORE_NAME, "readonly");
                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                    const getRequest = modelStore.get(this.modelPath);
                    getRequest.onsuccess = ()=>{
                        if (getRequest.result == null) {
                            db.close();
                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));
                        } else resolve(getRequest.result.modelArtifacts);
                    };
                    getRequest.onerror = (error)=>{
                        db.close();
                        return reject(getRequest.error);
                    };
                    modelTx.oncomplete = ()=>db.close();
                } else {
                    // Put model into object store.
                    const modelArtifactsInfo = (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts);
                    // First, put ModelArtifactsInfo into info store.
                    const infoTx = db.transaction(INFO_STORE_NAME, "readwrite");
                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);
                    const putInfoRequest = infoStore.put({
                        modelPath: this.modelPath,
                        modelArtifactsInfo
                    });
                    let modelTx1;
                    putInfoRequest.onsuccess = ()=>{
                        // Second, put model data into model store.
                        modelTx1 = db.transaction(MODEL_STORE_NAME, "readwrite");
                        const modelStore = modelTx1.objectStore(MODEL_STORE_NAME);
                        const putModelRequest = modelStore.put({
                            modelPath: this.modelPath,
                            modelArtifacts,
                            modelArtifactsInfo
                        });
                        putModelRequest.onsuccess = ()=>resolve({
                                modelArtifactsInfo
                            });
                        putModelRequest.onerror = (error)=>{
                            // If the put-model request fails, roll back the info entry as
                            // well.
                            infoStore = infoTx.objectStore(INFO_STORE_NAME);
                            const deleteInfoRequest = infoStore.delete(this.modelPath);
                            deleteInfoRequest.onsuccess = ()=>{
                                db.close();
                                return reject(putModelRequest.error);
                            };
                            deleteInfoRequest.onerror = (error)=>{
                                db.close();
                                return reject(putModelRequest.error);
                            };
                        };
                    };
                    putInfoRequest.onerror = (error)=>{
                        db.close();
                        return reject(putInfoRequest.error);
                    };
                    infoTx.oncomplete = ()=>{
                        if (modelTx1 == null) db.close();
                        else modelTx1.oncomplete = ()=>db.close();
                    };
                }
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
}
BrowserIndexedDB.URL_SCHEME = "indexeddb://";
const indexedDBRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(indexedDBRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(indexedDBRouter);
function browserIndexedDB(modelPath) {
    return new BrowserIndexedDB(modelPath);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;
}
class BrowserIndexedDBManager {
    constructor(){
        this.indexedDB = getIndexedDBFactory();
    }
    async listModels() {
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                const tx = db.transaction(INFO_STORE_NAME, "readonly");
                const store = tx.objectStore(INFO_STORE_NAME);
                // tslint:disable:max-line-length
                // Need to cast `store` as `any` here because TypeScript's DOM
                // library does not have the `getAll()` method even though the
                // method is supported in the latest version of most mainstream
                // browsers:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                // tslint:enable:max-line-length
                // tslint:disable-next-line:no-any
                const getAllInfoRequest = store.getAll();
                getAllInfoRequest.onsuccess = ()=>{
                    const out = {};
                    for (const item of getAllInfoRequest.result)out[item.modelPath] = item.modelArtifactsInfo;
                    resolve(out);
                };
                getAllInfoRequest.onerror = (error)=>{
                    db.close();
                    return reject(getAllInfoRequest.error);
                };
                tx.oncomplete = ()=>db.close();
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                const infoTx = db.transaction(INFO_STORE_NAME, "readwrite");
                const infoStore = infoTx.objectStore(INFO_STORE_NAME);
                const getInfoRequest = infoStore.get(path);
                let modelTx;
                getInfoRequest.onsuccess = ()=>{
                    if (getInfoRequest.result == null) {
                        db.close();
                        return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));
                    } else {
                        // First, delete the entry in the info store.
                        const deleteInfoRequest = infoStore.delete(path);
                        const deleteModelData = ()=>{
                            // Second, delete the entry in the model store.
                            modelTx = db.transaction(MODEL_STORE_NAME, "readwrite");
                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                            const deleteModelRequest = modelStore.delete(path);
                            deleteModelRequest.onsuccess = ()=>resolve(getInfoRequest.result.modelArtifactsInfo);
                            deleteModelRequest.onerror = (error)=>reject(getInfoRequest.error);
                        };
                        // Proceed with deleting model data regardless of whether deletion
                        // of info data succeeds or not.
                        deleteInfoRequest.onsuccess = deleteModelData;
                        deleteInfoRequest.onerror = (error)=>{
                            deleteModelData();
                            db.close();
                            return reject(getInfoRequest.error);
                        };
                    }
                };
                getInfoRequest.onerror = (error)=>{
                    db.close();
                    return reject(getInfoRequest.error);
                };
                infoTx.oncomplete = ()=>{
                    if (modelTx == null) db.close();
                    else modelTx.oncomplete = ()=>db.close();
                };
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
}

},{"../flags":"krVi8","../environment":"8tlxC","./io_utils":"iRZ4M","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRZ4M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */ parcelHelpers.export(exports, "encodeWeights", ()=>encodeWeights);
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */ parcelHelpers.export(exports, "decodeWeights", ()=>decodeWeights);
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */ parcelHelpers.export(exports, "concatenateTypedArrays", ()=>concatenateTypedArrays);
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */ parcelHelpers.export(exports, "stringByteLength", ()=>stringByteLength);
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */ parcelHelpers.export(exports, "arrayBufferToBase64String", ()=>arrayBufferToBase64String);
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */ parcelHelpers.export(exports, "base64StringToArrayBuffer", ()=>base64StringToArrayBuffer);
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */ parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>concatenateArrayBuffers);
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */ parcelHelpers.export(exports, "basename", ()=>basename);
/**
 * Create `ModelJSON` from `ModelArtifacts`.
 *
 * @param artifacts Model artifacts, describing the model and its weights.
 * @param manifest Weight manifest, describing where the weights of the
 *     `ModelArtifacts` are stored, and some metadata about them.
 * @returns Object representing the `model.json` file describing the model
 *     artifacts and weights
 */ parcelHelpers.export(exports, "getModelJSONForModelArtifacts", ()=>getModelJSONForModelArtifacts);
/**
 * Create `ModelArtifacts` from a JSON file.
 *
 * @param modelJSON Object containing the parsed JSON of `model.json`
 * @param loadWeights Function that takes the JSON file's weights manifest,
 *     reads weights from the listed path(s), and returns a Promise of the
 *     weight manifest entries along with the weights data.
 * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.
 */ parcelHelpers.export(exports, "getModelArtifactsForJSON", ()=>getModelArtifactsForJSON);
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */ parcelHelpers.export(exports, "getModelArtifactsInfoForJSON", ()=>getModelArtifactsInfoForJSON);
/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */ parcelHelpers.export(exports, "getFloat16Decoder", ()=>getFloat16Decoder);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _complex = require("../ops/complex");
var _tensor = require("../ops/tensor");
var _util = require("../util");
var _types = require("./types");
var Buffer = require("buffer").Buffer;
/** Number of bytes reserved for the length of the string. (32bit integer). */ const NUM_BYTES_STRING_LENGTH = 4;
async function encodeWeights(tensors, group) {
    // TODO(adarob, cais): Support quantization.
    const specs = [];
    const dataPromises = [];
    const names = Array.isArray(tensors) ? tensors.map((tensor)=>tensor.name) : Object.keys(tensors);
    for(let i = 0; i < names.length; ++i){
        const name = names[i];
        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];
        if (t.dtype !== "float32" && t.dtype !== "int32" && t.dtype !== "bool" && t.dtype !== "string" && t.dtype !== "complex64") throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
        const spec = {
            name,
            shape: t.shape,
            dtype: t.dtype
        };
        if (t.dtype === "string") {
            const utf8bytes = new Promise(async (resolve)=>{
                const vals = await t.bytes();
                const totalNumBytes = vals.reduce((p, c)=>p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;
                const bytes = new Uint8Array(totalNumBytes);
                let offset = 0;
                for(let i = 0; i < vals.length; i++){
                    const val = vals[i];
                    const bytesOfLength = new Uint8Array(new Uint32Array([
                        val.length
                    ]).buffer);
                    bytes.set(bytesOfLength, offset);
                    offset += NUM_BYTES_STRING_LENGTH;
                    bytes.set(val, offset);
                    offset += val.length;
                }
                resolve(bytes);
            });
            dataPromises.push(utf8bytes);
        } else dataPromises.push(t.data());
        if (group != null) spec.group = group;
        specs.push(spec);
    }
    const tensorValues = await Promise.all(dataPromises);
    return {
        data: concatenateTypedArrays(tensorValues),
        specs
    };
}
function decodeWeights(buffer, specs) {
    // TODO(adarob, cais): Support quantization.
    const out = {};
    let float16Decode;
    let offset = 0;
    for (const spec of specs){
        const name = spec.name;
        const dtype = spec.dtype;
        const shape = spec.shape;
        const size = (0, _util.sizeFromShape)(shape);
        let values;
        if ("quantization" in spec) {
            const quantization = spec.quantization;
            if (quantization.dtype === "uint8" || quantization.dtype === "uint16") {
                if (!("min" in quantization && "scale" in quantization)) throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);
            } else if (quantization.dtype === "float16") {
                if (dtype !== "float32") throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);
            } else throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);
            const quantizationSizeFactor = (0, _types.DTYPE_VALUE_SIZE_MAP)[quantization.dtype];
            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
            const quantizedArray = quantization.dtype === "uint8" ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);
            if (dtype === "float32") {
                if (quantization.dtype === "uint8" || quantization.dtype === "uint16") {
                    values = new Float32Array(quantizedArray.length);
                    for(let i = 0; i < quantizedArray.length; i++){
                        const v = quantizedArray[i];
                        values[i] = v * quantization.scale + quantization.min;
                    }
                } else if (quantization.dtype === "float16") {
                    if (float16Decode === undefined) float16Decode = getFloat16Decoder();
                    values = float16Decode(quantizedArray);
                } else throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);
            } else if (dtype === "int32") {
                if (quantization.dtype !== "uint8" && quantization.dtype !== "uint16") throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);
                values = new Int32Array(quantizedArray.length);
                for(let i1 = 0; i1 < quantizedArray.length; i1++){
                    const v1 = quantizedArray[i1];
                    values[i1] = Math.round(v1 * quantization.scale + quantization.min);
                }
            } else throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            offset += size * quantizationSizeFactor;
        } else if (dtype === "string") {
            const size1 = (0, _util.sizeFromShape)(spec.shape);
            values = [];
            for(let i2 = 0; i2 < size1; i2++){
                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                offset += NUM_BYTES_STRING_LENGTH;
                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                values.push(bytes);
                offset += byteLength;
            }
        } else {
            const dtypeFactor = (0, _types.DTYPE_VALUE_SIZE_MAP)[dtype];
            const byteBuffer1 = buffer.slice(offset, offset + size * dtypeFactor);
            if (dtype === "float32") values = new Float32Array(byteBuffer1);
            else if (dtype === "int32") values = new Int32Array(byteBuffer1);
            else if (dtype === "bool") values = new Uint8Array(byteBuffer1);
            else if (dtype === "complex64") {
                values = new Float32Array(byteBuffer1);
                const real = new Float32Array(values.length / 2);
                const image = new Float32Array(values.length / 2);
                for(let i3 = 0; i3 < real.length; i3++){
                    real[i3] = values[i3 * 2];
                    image[i3] = values[i3 * 2 + 1];
                }
                const realTensor = (0, _tensor.tensor)(real, shape, "float32");
                const imageTensor = (0, _tensor.tensor)(image, shape, "float32");
                out[name] = (0, _complex.complex)(realTensor, imageTensor);
                realTensor.dispose();
                imageTensor.dispose();
            } else throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            offset += size * dtypeFactor;
        }
        if (dtype !== "complex64") out[name] = (0, _tensor.tensor)(values, shape, dtype);
    }
    return out;
}
function concatenateTypedArrays(xs) {
    // TODO(adarob, cais): Support quantization.
    if (xs === null) throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
    let totalByteLength = 0;
    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
    // can have a different byte length from that of the `TypedArray` itself,
    // for example, when the `TypedArray` is created from an offset in an
    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
    // the `TypedArray` in byte length. If an element of `xs` does not show
    // this property, a new `TypedArray` that satisfy this property will be
    // constructed and pushed into `normalizedXs`.
    const normalizedXs = [];
    xs.forEach((x)=>{
        totalByteLength += x.byteLength;
        // tslint:disable:no-any
        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));
        if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
    // tslint:enable:no-any
    });
    const y = new Uint8Array(totalByteLength);
    let offset = 0;
    normalizedXs.forEach((x)=>{
        y.set(new Uint8Array(x.buffer), offset);
        offset += x.byteLength;
    });
    return y.buffer;
}
// Use Buffer on Node.js instead of Blob/atob/btoa
const useNodeBuffer = typeof Buffer !== "undefined" && (typeof Blob === "undefined" || typeof atob === "undefined" || typeof btoa === "undefined");
function stringByteLength(str) {
    if (useNodeBuffer) return Buffer.byteLength(str);
    return new Blob([
        str
    ]).size;
}
function arrayBufferToBase64String(buffer) {
    if (useNodeBuffer) return Buffer.from(buffer).toString("base64");
    const buf = new Uint8Array(buffer);
    let s = "";
    for(let i = 0, l = buf.length; i < l; i++)s += String.fromCharCode(buf[i]);
    return btoa(s);
}
function base64StringToArrayBuffer(str) {
    if (useNodeBuffer) {
        const buf = Buffer.from(str, "base64");
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    const s = atob(str);
    const buffer = new Uint8Array(s.length);
    for(let i = 0; i < s.length; ++i)buffer.set([
        s.charCodeAt(i)
    ], i);
    return buffer.buffer;
}
function concatenateArrayBuffers(buffers) {
    if (buffers.length === 1) return buffers[0];
    let totalByteLength = 0;
    buffers.forEach((buffer)=>{
        totalByteLength += buffer.byteLength;
    });
    const temp = new Uint8Array(totalByteLength);
    let offset = 0;
    buffers.forEach((buffer)=>{
        temp.set(new Uint8Array(buffer), offset);
        offset += buffer.byteLength;
    });
    return temp.buffer;
}
function basename(path) {
    const SEPARATOR = "/";
    path = path.trim();
    while(path.endsWith(SEPARATOR))path = path.slice(0, path.length - 1);
    const items = path.split(SEPARATOR);
    return items[items.length - 1];
}
function getModelJSONForModelArtifacts(artifacts, manifest) {
    const result = {
        modelTopology: artifacts.modelTopology,
        format: artifacts.format,
        generatedBy: artifacts.generatedBy,
        convertedBy: artifacts.convertedBy,
        weightsManifest: manifest
    };
    if (artifacts.signature != null) result.signature = artifacts.signature;
    if (artifacts.userDefinedMetadata != null) result.userDefinedMetadata = artifacts.userDefinedMetadata;
    if (artifacts.modelInitializer != null) result.modelInitializer = artifacts.modelInitializer;
    if (artifacts.trainingConfig != null) result.trainingConfig = artifacts.trainingConfig;
    return result;
}
async function getModelArtifactsForJSON(modelJSON, loadWeights) {
    const modelArtifacts = {
        modelTopology: modelJSON.modelTopology,
        format: modelJSON.format,
        generatedBy: modelJSON.generatedBy,
        convertedBy: modelJSON.convertedBy
    };
    if (modelJSON.trainingConfig != null) modelArtifacts.trainingConfig = modelJSON.trainingConfig;
    if (modelJSON.weightsManifest != null) {
        const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);
        modelArtifacts.weightSpecs = weightSpecs;
        modelArtifacts.weightData = weightData;
    }
    if (modelJSON.signature != null) modelArtifacts.signature = modelJSON.signature;
    if (modelJSON.userDefinedMetadata != null) modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;
    if (modelJSON.modelInitializer != null) modelArtifacts.modelInitializer = modelJSON.modelInitializer;
    return modelArtifacts;
}
function getModelArtifactsInfoForJSON(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
        dateSaved: new Date(),
        modelTopologyType: "JSON",
        modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
        weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
        weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength
    };
}
/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */ function computeFloat16MantisaTable() {
    const convertMantissa = (i)=>{
        let m = i << 13;
        let e = 0;
        while((m & 0x00800000) === 0){
            e -= 0x00800000;
            m <<= 1;
        }
        m &= -8388609;
        e += 0x38800000;
        return m | e;
    };
    const mantisaTable = new Uint32Array(2048);
    mantisaTable[0] = 0;
    for(let i = 1; i < 1024; i++)mantisaTable[i] = convertMantissa(i);
    for(let i1 = 1024; i1 < 2048; i1++)mantisaTable[i1] = 0x38000000 + (i1 - 1024 << 13);
    return mantisaTable;
}
/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */ function computeFloat16ExponentTable() {
    const exponentTable = new Uint32Array(64);
    exponentTable[0] = 0;
    exponentTable[31] = 0x47800000;
    exponentTable[32] = 0x80000000;
    exponentTable[63] = 0xc7800000;
    for(let i = 1; i < 31; i++)exponentTable[i] = i << 23;
    for(let i1 = 33; i1 < 63; i1++)exponentTable[i1] = 0x80000000 + (i1 - 32 << 23);
    return exponentTable;
}
/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */ function computeFloat16OffsetTable() {
    const offsetTable = new Uint32Array(64);
    for(let i = 0; i < 64; i++)offsetTable[i] = 1024;
    offsetTable[0] = offsetTable[32] = 0;
    return offsetTable;
}
function getFloat16Decoder() {
    // Algorithm is based off of
    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
    // Cache lookup tables
    const mantisaTable = computeFloat16MantisaTable();
    const exponentTable = computeFloat16ExponentTable();
    const offsetTable = computeFloat16OffsetTable();
    return (quantizedArray)=>{
        const buffer = new ArrayBuffer(4 * quantizedArray.length);
        const bufferUint32View = new Uint32Array(buffer);
        for(let index = 0; index < quantizedArray.length; index++){
            const float16Bits = quantizedArray[index];
            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];
            bufferUint32View[index] = float32Bits;
        }
        return new Float32Array(buffer);
    };
}

},{"../ops/complex":"h6n1M","../ops/tensor":"eIzFA","../util":"9v6Fb","./types":"2qT38","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h6n1M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complex", ()=>complex);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function complex_(real, imag) {
    const $real = (0, _tensorUtilEnv.convertToTensor)(real, "real", "complex");
    const $imag = (0, _tensorUtilEnv.convertToTensor)(imag, "imag", "complex");
    _util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` + `must match in call to tf.complex().`);
    const inputs = {
        real: $real,
        imag: $imag
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Complex), inputs);
}
const complex = (0, _operation.op)({
    complex_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsyzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inferShape", ()=>inferShape);
parcelHelpers.export(exports, "convertToTensor", ()=>convertToTensor);
parcelHelpers.export(exports, "convertToTensorArray", ()=>convertToTensorArray);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _environment = require("./environment");
var _tensor = require("./tensor");
var _util = require("./util");
function inferShape(val, dtype) {
    let firstElem = val;
    if ((0, _util.isTypedArray)(val)) return dtype === "string" ? [] : [
        val.length
    ];
    if (!Array.isArray(val)) return []; // Scalar.
    const shape = [];
    while(Array.isArray(firstElem) || (0, _util.isTypedArray)(firstElem) && dtype !== "string"){
        shape.push(firstElem.length);
        firstElem = firstElem[0];
    }
    if (Array.isArray(val) && (0, _environment.env)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")) deepAssertShapeConsistency(val, shape, []);
    return shape;
}
function deepAssertShapeConsistency(val, shape, indices) {
    indices = indices || [];
    if (!Array.isArray(val) && !(0, _util.isTypedArray)(val)) {
        (0, _util.assert)(shape.length === 0, ()=>`Element arr[${indices.join("][")}] is a primitive, ` + `but should be an array/TypedArray of ${shape[0]} elements`);
        return;
    }
    (0, _util.assert)(shape.length > 0, ()=>`Element arr[${indices.join("][")}] should be a primitive, ` + `but is an array of ${val.length} elements`);
    (0, _util.assert)(val.length === shape[0], ()=>`Element arr[${indices.join("][")}] should have ${shape[0]} ` + `elements, but has ${val.length} elements`);
    const subShape = shape.slice(1);
    for(let i = 0; i < val.length; ++i)deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
}
function assertDtype(expectedDtype, actualDType, argName, functionName) {
    if (expectedDtype === "string_or_numeric") return;
    if (expectedDtype == null) throw new Error(`Expected dtype cannot be null.`);
    if (expectedDtype !== "numeric" && expectedDtype !== actualDType || expectedDtype === "numeric" && actualDType === "string") throw new Error(`Argument '${argName}' passed to '${functionName}' must ` + `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
}
function convertToTensor(x, argName, functionName, parseAsDtype = "numeric") {
    if (x instanceof (0, _tensor.Tensor)) {
        assertDtype(parseAsDtype, x.dtype, argName, functionName);
        return x;
    }
    let inferredDtype = (0, _util.inferDtype)(x);
    // If the user expects a bool/int/float, use that info to update the
    // inferredDtype when it is not a string.
    if (inferredDtype !== "string" && [
        "bool",
        "int32",
        "float32"
    ].indexOf(parseAsDtype) >= 0) inferredDtype = parseAsDtype;
    assertDtype(parseAsDtype, inferredDtype, argName, functionName);
    if (x == null || !(0, _util.isTypedArray)(x) && !Array.isArray(x) && typeof x !== "number" && typeof x !== "boolean" && typeof x !== "string") {
        const type = x == null ? "null" : x.constructor.name;
        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` + `Tensor or TensorLike, but got '${type}'`);
    }
    const inferredShape = inferShape(x, inferredDtype);
    if (!(0, _util.isTypedArray)(x) && !Array.isArray(x)) x = [
        x
    ];
    const skipTypedArray = true;
    const values = inferredDtype !== "string" ? (0, _util.toTypedArray)(x, inferredDtype) : (0, _util.flatten)(x, [], skipTypedArray);
    return (0, _engine.ENGINE).makeTensor(values, inferredShape, inferredDtype);
}
function convertToTensorArray(arg, argName, functionName, parseAsDtype = "numeric") {
    if (!Array.isArray(arg)) throw new Error(`Argument ${argName} passed to ${functionName} must be a ` + "`Tensor[]` or `TensorLike[]`");
    const tensors = arg;
    return tensors.map((t, i)=>convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));
}

},{"./engine":"1aEvR","./environment":"8tlxC","./tensor":"DPGBx","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6IGY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OP_SCOPE_SUFFIX", ()=>OP_SCOPE_SUFFIX);
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */ parcelHelpers.export(exports, "op", ()=>op);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
const OP_SCOPE_SUFFIX = "__op";
function op(f) {
    const keys = Object.keys(f);
    if (keys.length !== 1) throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);
    let opName = keys[0];
    const fn = f[opName];
    // Strip the underscore from the end of the function name.
    if (opName.endsWith("_")) opName = opName.substring(0, opName.length - 1);
    // add an __op suffix to distinguish ops from kernels in tf.profile
    opName = opName + OP_SCOPE_SUFFIX;
    // tslint:disable-next-line:no-any
    const f2 = (...args)=>{
        (0, _engine.ENGINE).startScope(opName);
        try {
            const result = fn(...args);
            if ((0, _util.isPromise)(result)) console.error("Cannot return a Promise inside of tidy.");
            (0, _engine.ENGINE).endScope(result);
            return result;
        } catch (ex) {
            (0, _engine.ENGINE).endScope(null);
            throw ex;
        }
    };
    Object.defineProperty(f2, "name", {
        value: opName,
        configurable: true
    });
    // tslint:disable-next-line:no-any
    return f2;
}

},{"../engine":"1aEvR","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eIzFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor", ()=>tensor);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor(values, shape, dtype) {
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"VO6YN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** This is shared code across all tensor creation methods. */ parcelHelpers.export(exports, "makeTensor", ()=>makeTensor);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
function makeTensor(values, shape, inferredShape, dtype) {
    if (dtype == null) dtype = (0, _util.inferDtype)(values);
    if (dtype === "complex64") throw new Error(`Cannot construct a complex64 tensor directly. ` + `Please use tf.complex(real, imag).`);
    if (!(0, _util.isTypedArray)(values) && !Array.isArray(values) && typeof values !== "number" && typeof values !== "boolean" && typeof values !== "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
    if (shape != null) {
        (0, _util.assertNonNegativeIntegerDimensions)(shape);
        const providedSize = (0, _util.sizeFromShape)(shape);
        const inferredSize = (0, _util.sizeFromShape)(inferredShape);
        (0, _util.assert)(providedSize === inferredSize, ()=>`Based on the provided shape, [${shape}], the tensor should have ` + `${providedSize} values but has ${inferredSize}`);
        for(let i = 0; i < inferredShape.length; ++i){
            const inferred = inferredShape[i];
            const flatDimsDontMatch = i === inferredShape.length - 1 ? inferred !== (0, _util.sizeFromShape)(shape.slice(i)) : true;
            (0, _util.assert)(inferredShape[i] === shape[i] || !flatDimsDontMatch, ()=>`Error creating a new Tensor. Inferred shape ` + `(${inferredShape}) does not match the provided ` + `shape (${shape}). `);
        }
    }
    if (!(0, _util.isTypedArray)(values) && !Array.isArray(values)) values = [
        values
    ];
    shape = shape || inferredShape;
    values = dtype !== "string" ? (0, _util.toTypedArray)(values, dtype) : (0, _util.flatten)(values, [], true);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}

},{"../engine":"1aEvR","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qT38":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DTYPE_VALUE_SIZE_MAP", ()=>DTYPE_VALUE_SIZE_MAP);
const DTYPE_VALUE_SIZE_MAP = {
    "float32": 4,
    "float16": 2,
    "int32": 4,
    "uint16": 2,
    "uint8": 1,
    "bool": 1,
    "complex64": 8
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"76AgW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "IORouterRegistry", ()=>IORouterRegistry);
parcelHelpers.export(exports, "registerSaveRouter", ()=>registerSaveRouter);
parcelHelpers.export(exports, "registerLoadRouter", ()=>registerLoadRouter);
parcelHelpers.export(exports, "getSaveHandlers", ()=>getSaveHandlers);
parcelHelpers.export(exports, "getLoadHandlers", ()=>getLoadHandlers);
class IORouterRegistry {
    constructor(){
        this.saveRouters = [];
        this.loadRouters = [];
    }
    static getInstance() {
        if (IORouterRegistry.instance == null) IORouterRegistry.instance = new IORouterRegistry();
        return IORouterRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */ static registerSaveRouter(saveRouter) {
        IORouterRegistry.getInstance().saveRouters.push(saveRouter);
    }
    /**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */ static registerLoadRouter(loadRouter) {
        IORouterRegistry.getInstance().loadRouters.push(loadRouter);
    }
    /**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */ static getSaveHandlers(url) {
        return IORouterRegistry.getHandlers(url, "save");
    }
    /**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */ static getLoadHandlers(url, loadOptions) {
        return IORouterRegistry.getHandlers(url, "load", loadOptions);
    }
    static getHandlers(url, handlerType, loadOptions) {
        const validHandlers = [];
        const routers = handlerType === "load" ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;
        routers.forEach((router)=>{
            const handler = router(url, loadOptions);
            if (handler !== null) validHandlers.push(handler);
        });
        return validHandlers;
    }
}
const registerSaveRouter = (loudRouter)=>IORouterRegistry.registerSaveRouter(loudRouter);
const registerLoadRouter = (loudRouter)=>IORouterRegistry.registerLoadRouter(loudRouter);
const getSaveHandlers = (url)=>IORouterRegistry.getSaveHandlers(url);
const getLoadHandlers = (url, loadOptions)=>IORouterRegistry.getLoadHandlers(url, loadOptions);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXcld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */ parcelHelpers.export(exports, "purgeLocalStorageArtifacts", ()=>purgeLocalStorageArtifacts);
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */ parcelHelpers.export(exports, "BrowserLocalStorage", ()=>BrowserLocalStorage);
parcelHelpers.export(exports, "localStorageRouter", ()=>localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */ parcelHelpers.export(exports, "browserLocalStorage", ()=>browserLocalStorage);
parcelHelpers.export(exports, "BrowserLocalStorageManager", ()=>BrowserLocalStorageManager);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _flags = require("../flags");
var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
const PATH_SEPARATOR = "/";
const PATH_PREFIX = "tensorflowjs_models";
const INFO_SUFFIX = "info";
const MODEL_TOPOLOGY_SUFFIX = "model_topology";
const WEIGHT_SPECS_SUFFIX = "weight_specs";
const WEIGHT_DATA_SUFFIX = "weight_data";
const MODEL_METADATA_SUFFIX = "model_metadata";
function purgeLocalStorageArtifacts() {
    if (!(0, _environment.env)().getBool("IS_BROWSER") || typeof window === "undefined" || typeof window.localStorage === "undefined") throw new Error("purgeLocalStorageModels() cannot proceed because local storage is unavailable in the current environment.");
    const LS = window.localStorage;
    const purgedModelPaths = [];
    for(let i = 0; i < LS.length; ++i){
        const key = LS.key(i);
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        if (key.startsWith(prefix) && key.length > prefix.length) {
            LS.removeItem(key);
            const modelName = getModelPathFromKey(key);
            if (purgedModelPaths.indexOf(modelName) === -1) purgedModelPaths.push(modelName);
        }
    }
    return purgedModelPaths;
}
function getModelKeys(path) {
    return {
        info: [
            PATH_PREFIX,
            path,
            INFO_SUFFIX
        ].join(PATH_SEPARATOR),
        topology: [
            PATH_PREFIX,
            path,
            MODEL_TOPOLOGY_SUFFIX
        ].join(PATH_SEPARATOR),
        weightSpecs: [
            PATH_PREFIX,
            path,
            WEIGHT_SPECS_SUFFIX
        ].join(PATH_SEPARATOR),
        weightData: [
            PATH_PREFIX,
            path,
            WEIGHT_DATA_SUFFIX
        ].join(PATH_SEPARATOR),
        modelMetadata: [
            PATH_PREFIX,
            path,
            MODEL_METADATA_SUFFIX
        ].join(PATH_SEPARATOR)
    };
}
function removeItems(keys) {
    for (const key of Object.values(keys))window.localStorage.removeItem(key);
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */ function getModelPathFromKey(key) {
    const items = key.split(PATH_SEPARATOR);
    if (items.length < 3) throw new Error(`Invalid key format: ${key}`);
    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;
}
class BrowserLocalStorage {
    constructor(modelPath){
        if (!(0, _environment.env)().getBool("IS_BROWSER") || typeof window === "undefined" || typeof window.localStorage === "undefined") // TODO(cais): Add more info about what IOHandler subtypes are
        // available.
        //   Maybe point to a doc page on the web and/or automatically determine
        //   the available IOHandlers and print them in the error message.
        throw new Error("The current environment does not support local storage.");
        this.LS = window.localStorage;
        if (modelPath == null || !modelPath) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
        this.modelPath = modelPath;
        this.keys = getModelKeys(this.modelPath);
    }
    /**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */ async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        else {
            const topology = JSON.stringify(modelArtifacts.modelTopology);
            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
            const modelArtifactsInfo = (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                this.LS.setItem(this.keys.topology, topology);
                this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                this.LS.setItem(this.keys.weightData, (0, _ioUtils.arrayBufferToBase64String)(modelArtifacts.weightData));
                // Note that JSON.stringify doesn't write out keys that have undefined
                // values, so for some keys, we set undefined instead of a null-ish
                // value.
                const metadata = {
                    format: modelArtifacts.format,
                    generatedBy: modelArtifacts.generatedBy,
                    convertedBy: modelArtifacts.convertedBy,
                    signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,
                    userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,
                    modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,
                    trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined
                };
                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));
                return {
                    modelArtifactsInfo
                };
            } catch (err) {
                // If saving failed, clean up all items saved so far.
                removeItems(this.keys);
                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
            }
        }
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */ async load() {
        const info = JSON.parse(this.LS.getItem(this.keys.info));
        if (info == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
        if (info.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
        const out = {};
        // Load topology.
        const topology = JSON.parse(this.LS.getItem(this.keys.topology));
        if (topology == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);
        out.modelTopology = topology;
        // Load weight specs.
        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (weightSpecs == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);
        out.weightSpecs = weightSpecs;
        // Load meta-data fields.
        const metadataString = this.LS.getItem(this.keys.modelMetadata);
        if (metadataString != null) {
            const metadata = JSON.parse(metadataString);
            out.format = metadata.format;
            out.generatedBy = metadata.generatedBy;
            out.convertedBy = metadata.convertedBy;
            if (metadata.signature != null) out.signature = metadata.signature;
            if (metadata.userDefinedMetadata != null) out.userDefinedMetadata = metadata.userDefinedMetadata;
            if (metadata.modelInitializer != null) out.modelInitializer = metadata.modelInitializer;
            if (metadata.trainingConfig != null) out.trainingConfig = metadata.trainingConfig;
        }
        // Load weight data.
        const weightDataBase64 = this.LS.getItem(this.keys.weightData);
        if (weightDataBase64 == null) throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);
        out.weightData = (0, _ioUtils.base64StringToArrayBuffer)(weightDataBase64);
        return out;
    }
}
BrowserLocalStorage.URL_SCHEME = "localstorage://";
const localStorageRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(localStorageRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(localStorageRouter);
function browserLocalStorage(modelPath) {
    return new BrowserLocalStorage(modelPath);
}
class BrowserLocalStorageManager {
    constructor(){
        (0, _util.assert)((0, _environment.env)().getBool("IS_BROWSER"), ()=>"Current environment is not a web browser");
        (0, _util.assert)(typeof window === "undefined" || typeof window.localStorage !== "undefined", ()=>"Current browser does not appear to support localStorage");
        this.LS = window.localStorage;
    }
    async listModels() {
        const out = {};
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        const suffix = PATH_SEPARATOR + INFO_SUFFIX;
        for(let i = 0; i < this.LS.length; ++i){
            const key = this.LS.key(i);
            if (key.startsWith(prefix) && key.endsWith(suffix)) {
                const modelPath = getModelPathFromKey(key);
                out[modelPath] = JSON.parse(this.LS.getItem(key));
            }
        }
        return out;
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        const keys = getModelKeys(path);
        if (this.LS.getItem(keys.info) == null) throw new Error(`Cannot find model at path '${path}'`);
        const info = JSON.parse(this.LS.getItem(keys.info));
        removeItems(keys);
        return info;
    }
}

},{"../flags":"krVi8","../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8VhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModelStoreManagerRegistry", ()=>ModelStoreManagerRegistry);
parcelHelpers.export(exports, "moveModel", ()=>moveModel);
parcelHelpers.export(exports, "copyModel", ()=>copyModel);
parcelHelpers.export(exports, "removeModel", ()=>removeModel);
parcelHelpers.export(exports, "listModels", ()=>listModels);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */ var _util = require("../util");
var _routerRegistry = require("./router_registry");
const URL_SCHEME_SUFFIX = "://";
class ModelStoreManagerRegistry {
    constructor(){
        this.managers = {};
    }
    static getInstance() {
        if (ModelStoreManagerRegistry.instance == null) ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
        return ModelStoreManagerRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */ static registerManager(scheme, manager) {
        (0, _util.assert)(scheme != null, ()=>"scheme must not be undefined or null.");
        if (scheme.endsWith(URL_SCHEME_SUFFIX)) scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
        (0, _util.assert)(scheme.length > 0, ()=>"scheme must not be an empty string.");
        const registry = ModelStoreManagerRegistry.getInstance();
        (0, _util.assert)(registry.managers[scheme] == null, ()=>`A model store manager is already registered for scheme '${scheme}'.`);
        registry.managers[scheme] = manager;
    }
    static getManager(scheme) {
        const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];
        if (manager == null) throw new Error(`Cannot find model manager for scheme '${scheme}'`);
        return manager;
    }
    static getSchemes() {
        return Object.keys(ModelStoreManagerRegistry.getInstance().managers);
    }
}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */ function parseURL(url) {
    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(",")}`);
    return {
        scheme: url.split(URL_SCHEME_SUFFIX)[0],
        path: url.split(URL_SCHEME_SUFFIX)[1]
    };
}
async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
    (0, _util.assert)(sourceURL !== destURL, ()=>`Old path and new path are the same: '${sourceURL}'`);
    const loadHandlers = (0, _routerRegistry.IORouterRegistry).getLoadHandlers(sourceURL);
    (0, _util.assert)(loadHandlers.length > 0, ()=>`Copying failed because no load handler is found for source URL ${sourceURL}.`);
    (0, _util.assert)(loadHandlers.length < 2, ()=>`Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);
    const loadHandler = loadHandlers[0];
    const saveHandlers = (0, _routerRegistry.IORouterRegistry).getSaveHandlers(destURL);
    (0, _util.assert)(saveHandlers.length > 0, ()=>`Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);
    (0, _util.assert)(saveHandlers.length < 2, ()=>`Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);
    const saveHandler = saveHandlers[0];
    const sourceScheme = parseURL(sourceURL).scheme;
    const sourcePath = parseURL(sourceURL).path;
    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
    const modelArtifacts = await loadHandler.load();
    // If moving within the same storage medium, remove the old model as soon as
    // the loading is done. Without doing this, it is possible that the combined
    // size of the two models will cause the cloning to fail.
    if (deleteSource && sameMedium) await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
    const saveResult = await saveHandler.save(modelArtifacts);
    // If moving between mediums, the deletion is done after the save succeeds.
    // This guards against the case in which saving to the destination medium
    // fails.
    if (deleteSource && !sameMedium) await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
    return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function listModels() {
    const schemes = ModelStoreManagerRegistry.getSchemes();
    const out = {};
    for (const scheme of schemes){
        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();
        for(const path in schemeOut){
            const url = scheme + URL_SCHEME_SUFFIX + path;
            out[url] = schemeOut[path];
        }
    }
    return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function removeModel(url) {
    const schemeAndPath = parseURL(url);
    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
    return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function copyModel(sourceURL, destURL) {
    const deleteSource = false;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function moveModel(sourceURL, destURL) {
    const deleteSource = true;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}

},{"../util":"9v6Fb","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ydqs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNodeFetch", ()=>getNodeFetch);
// These getters and setters are for testing so we don't export a mutable
// variable.
parcelHelpers.export(exports, "resetSystemFetch", ()=>resetSystemFetch);
parcelHelpers.export(exports, "setSystemFetch", ()=>setSystemFetch);
parcelHelpers.export(exports, "getSystemFetch", ()=>getSystemFetch);
parcelHelpers.export(exports, "PlatformNode", ()=>PlatformNode);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var process = require("process");
const getNodeFetch = {
    // tslint:disable-next-line:no-require-imports
    importFetch: ()=>require("node-fetch")
};
let systemFetch;
function resetSystemFetch() {
    systemFetch = null;
}
function setSystemFetch(fetchFn) {
    systemFetch = fetchFn;
}
function getSystemFetch() {
    return systemFetch;
}
class PlatformNode {
    constructor(){
        // tslint:disable-next-line:no-require-imports
        this.util = require("util");
        // According to the spec, the built-in encoder can do only UTF-8 encoding.
        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
        this.textEncoder = new this.util.TextEncoder();
    }
    fetch(path, requestInits) {
        if ((0, _environment.env)().global.fetch != null) return (0, _environment.env)().global.fetch(path, requestInits);
        if (systemFetch == null) systemFetch = getNodeFetch.importFetch();
        return systemFetch(path, requestInits);
    }
    now() {
        const time = process.hrtime();
        return time[0] * 1000 + time[1] / 1000000;
    }
    encode(text, encoding) {
        if (encoding !== "utf-8" && encoding !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        if (bytes.length === 0) return "";
        return new this.util.TextDecoder(encoding).decode(bytes);
    }
}
if ((0, _environment.env)().get("IS_NODE") && !(0, _environment.env)().get("IS_BROWSER")) (0, _environment.env)().setPlatform("node", new PlatformNode());

},{"../environment":"8tlxC","process":"d5jf4","node-fetch":"jhUEF","util":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"e0wS6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "buffer", ()=>buffer);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("../tensor");
var _util = require("../util");
function buffer(shape, dtype = "float32", values) {
    dtype = dtype || "float32";
    _util.assertNonNegativeIntegerDimensions(shape);
    return new (0, _tensor.TensorBuffer)(shape, dtype, values);
}

},{"../tensor":"DPGBx","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a7v0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cast", ()=>cast);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function cast_(x, dtype) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cast");
    // Sanity checks.
    if (!_util.isValidDtype(dtype)) throw new Error(`Failed to cast to unknown dtype ${dtype}`);
    if (dtype === "string" && $x.dtype !== "string" || dtype !== "string" && $x.dtype === "string") throw new Error("Only strings can be casted to strings");
    const inputs = {
        x: $x
    };
    const attrs = {
        dtype
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Cast), inputs, attrs);
}
const cast = (0, _operation.op)({
    cast_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cWcE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function clone_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "clone", "string_or_numeric");
    const inputs = {
        x: $x
    };
    // Note this op is called tf.identity in python. Hence the kernel name used
    // here.
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Identity), inputs);
}
const clone = (0, _operation.op)({
    clone_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63DiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "print", ()=>print);
function print(x, verbose = false) {
    console.log(x.toString(verbose));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5K6Dc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdadeltaOptimizer", ()=>(0, _adadeltaOptimizer.AdadeltaOptimizer));
parcelHelpers.export(exports, "AdagradOptimizer", ()=>(0, _adagradOptimizer.AdagradOptimizer));
parcelHelpers.export(exports, "AdamOptimizer", ()=>(0, _adamOptimizer.AdamOptimizer));
parcelHelpers.export(exports, "AdamaxOptimizer", ()=>(0, _adamaxOptimizer.AdamaxOptimizer));
parcelHelpers.export(exports, "MomentumOptimizer", ()=>(0, _momentumOptimizer.MomentumOptimizer));
parcelHelpers.export(exports, "Optimizer", ()=>(0, _optimizer.Optimizer));
// Optimizers.
parcelHelpers.export(exports, "OptimizerConstructors", ()=>(0, _optimizerConstructors.OptimizerConstructors));
parcelHelpers.export(exports, "RMSPropOptimizer", ()=>(0, _rmspropOptimizer.RMSPropOptimizer));
parcelHelpers.export(exports, "SGDOptimizer", ()=>(0, _sgdOptimizer.SGDOptimizer));
parcelHelpers.export(exports, "Tensor", ()=>(0, _tensor.Tensor));
parcelHelpers.export(exports, "TensorBuffer", ()=>(0, _tensor.TensorBuffer));
parcelHelpers.export(exports, "Variable", ()=>(0, _tensor.Variable));
parcelHelpers.export(exports, "Rank", ()=>(0, _types.Rank));
parcelHelpers.export(exports, "sumOutType", ()=>(0, _types.sumOutType));
parcelHelpers.export(exports, "upcastType", ()=>(0, _types.upcastType));
parcelHelpers.export(exports, "Reduction", ()=>(0, _lossOpsUtils.Reduction));
parcelHelpers.export(exports, "customGrad", ()=>(0, _gradients.customGrad));
parcelHelpers.export(exports, "grad", ()=>(0, _gradients.grad));
parcelHelpers.export(exports, "grads", ()=>(0, _gradients.grads));
parcelHelpers.export(exports, "valueAndGrad", ()=>(0, _gradients.valueAndGrad));
parcelHelpers.export(exports, "valueAndGrads", ()=>(0, _gradients.valueAndGrads));
parcelHelpers.export(exports, "variableGrads", ()=>(0, _gradients.variableGrads));
parcelHelpers.export(exports, "Environment", ()=>(0, _environment.Environment));
parcelHelpers.export(exports, "env", ()=>(0, _environment.env));
parcelHelpers.export(exports, "ENV", ()=>(0, _environment.ENV));
parcelHelpers.export(exports, "version_core", ()=>(0, _version.version));
// Top-level method exports.
parcelHelpers.export(exports, "nextFrame", ()=>(0, _browserUtil.nextFrame));
parcelHelpers.export(exports, "browser", ()=>_browser);
parcelHelpers.export(exports, "io", ()=>_io);
parcelHelpers.export(exports, "math", ()=>_math);
parcelHelpers.export(exports, "serialization", ()=>_serialization);
parcelHelpers.export(exports, "test_util", ()=>_testUtil);
parcelHelpers.export(exports, "util", ()=>_util);
parcelHelpers.export(exports, "backend_util", ()=>_backendUtil);
parcelHelpers.export(exports, "broadcast_util", ()=>_broadcastUtil);
parcelHelpers.export(exports, "tensor_util", ()=>_tensorUtil);
parcelHelpers.export(exports, "slice_util", ()=>_sliceUtil);
parcelHelpers.export(exports, "gather_util", ()=>_gatherNdUtil);
parcelHelpers.export(exports, "scatter_util", ()=>_scatterNdUtil);
parcelHelpers.export(exports, "device_util", ()=>_deviceUtil);
parcelHelpers.export(exports, "kernel_impls", ()=>_kernelImpls);
// Backend specific.
parcelHelpers.export(exports, "KernelBackend", ()=>(0, _backend.KernelBackend));
parcelHelpers.export(exports, "DataStorage", ()=>(0, _backend.DataStorage));
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // base.ts is tfjs-core without auto registration of things like flags,
// gradients, chained ops or the opHandler. See base_side_effects.ts for parts
// tfjs core that are required side effects.
/**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */ // Serialization.
var _io = require("./io/io");
var _math = require("./math");
var _broadcastUtil = require("./ops/broadcast_util");
var _browser = require("./ops/browser");
var _gatherNdUtil = require("./ops/gather_nd_util");
var _scatterNdUtil = require("./ops/scatter_nd_util");
var _sliceUtil = require("./ops/slice_util");
var _serialization = require("./serialization");
var _tensorUtil = require("./tensor_util");
var _testUtil = require("./test_util");
var _util = require("./util");
var _version = require("./version");
// Second level exports.
var _backendUtil = require("./backends/backend_util");
var _deviceUtil = require("./device_util");
var _kernelImpls = require("./backends/kernel_impls");
var _adadeltaOptimizer = require("./optimizers/adadelta_optimizer");
var _adagradOptimizer = require("./optimizers/adagrad_optimizer");
var _adamOptimizer = require("./optimizers/adam_optimizer");
var _adamaxOptimizer = require("./optimizers/adamax_optimizer");
var _momentumOptimizer = require("./optimizers/momentum_optimizer");
var _optimizer = require("./optimizers/optimizer");
var _optimizerConstructors = require("./optimizers/optimizer_constructors");
var _rmspropOptimizer = require("./optimizers/rmsprop_optimizer");
var _sgdOptimizer = require("./optimizers/sgd_optimizer");
var _tensor = require("./tensor");
var _types = require("./types");
var _ops = require("./ops/ops");
parcelHelpers.exportAll(_ops, exports);
var _lossOpsUtils = require("./ops/loss_ops_utils");
var _train = require("./train");
parcelHelpers.exportAll(_train, exports);
var _globals = require("./globals");
parcelHelpers.exportAll(_globals, exports);
var _kernelRegistry = require("./kernel_registry");
parcelHelpers.exportAll(_kernelRegistry, exports);
var _gradients = require("./gradients");
var _environment = require("./environment");
var _browserUtil = require("./browser_util");
var _backend = require("./backends/backend");
// Export all kernel names / info.
var _kernelNames = require("./kernel_names");
parcelHelpers.exportAll(_kernelNames, exports);

},{"./io/io":"2y2Ef","./math":"dWBjd","./ops/broadcast_util":"kQqEF","./ops/browser":"eNnql","./ops/gather_nd_util":"6p9Tw","./ops/scatter_nd_util":"h9rnV","./ops/slice_util":"3jgPu","./serialization":"wKqJz","./tensor_util":"kUGKD","./test_util":"9tuFM","./util":"9v6Fb","./version":"v1SEt","./backends/backend_util":"8CK58","./device_util":"ctAag","./backends/kernel_impls":"9xKxz","./optimizers/adadelta_optimizer":"7LYeo","./optimizers/adagrad_optimizer":"1K352","./optimizers/adam_optimizer":"lKjPX","./optimizers/adamax_optimizer":"d9QP5","./optimizers/momentum_optimizer":"5ywAZ","./optimizers/optimizer":"jFpqK","./optimizers/optimizer_constructors":"2Pbck","./optimizers/rmsprop_optimizer":"21qx8","./optimizers/sgd_optimizer":"h9wSb","./tensor":"DPGBx","./types":"aToA9","./ops/ops":"iDElj","./ops/loss_ops_utils":"j8gBR","./train":"hMjG0","./globals":"gfrr7","./kernel_registry":"3ziE7","./gradients":"4PSmY","./environment":"8tlxC","./browser_util":"kHUPK","./backends/backend":"2CVFT","./kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2y2Ef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copyModel", ()=>(0, _modelManagement.copyModel));
parcelHelpers.export(exports, "listModels", ()=>(0, _modelManagement.listModels));
parcelHelpers.export(exports, "moveModel", ()=>(0, _modelManagement.moveModel));
parcelHelpers.export(exports, "removeModel", ()=>(0, _modelManagement.removeModel));
parcelHelpers.export(exports, "browserFiles", ()=>(0, _browserFiles.browserFiles));
parcelHelpers.export(exports, "browserHTTPRequest", ()=>(0, _http.browserHTTPRequest));
parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>(0, _ioUtils.concatenateArrayBuffers));
parcelHelpers.export(exports, "decodeWeights", ()=>(0, _ioUtils.decodeWeights));
parcelHelpers.export(exports, "encodeWeights", ()=>(0, _ioUtils.encodeWeights));
parcelHelpers.export(exports, "fromMemory", ()=>(0, _passthrough.fromMemory));
parcelHelpers.export(exports, "fromMemorySync", ()=>(0, _passthrough.fromMemorySync));
parcelHelpers.export(exports, "getLoadHandlers", ()=>(0, _routerRegistry.getLoadHandlers));
parcelHelpers.export(exports, "getModelArtifactsForJSON", ()=>(0, _ioUtils.getModelArtifactsForJSON));
parcelHelpers.export(exports, "getModelArtifactsInfoForJSON", ()=>(0, _ioUtils.getModelArtifactsInfoForJSON));
parcelHelpers.export(exports, "getSaveHandlers", ()=>(0, _routerRegistry.getSaveHandlers));
parcelHelpers.export(exports, "http", ()=>(0, _http.http));
parcelHelpers.export(exports, "isHTTPScheme", ()=>(0, _http.isHTTPScheme));
parcelHelpers.export(exports, "loadWeights", ()=>(0, _weightsLoader.loadWeights));
parcelHelpers.export(exports, "registerLoadRouter", ()=>(0, _routerRegistry.registerLoadRouter));
parcelHelpers.export(exports, "registerSaveRouter", ()=>(0, _routerRegistry.registerSaveRouter));
parcelHelpers.export(exports, "weightsLoaderFactory", ()=>(0, _weightsLoader.weightsLoaderFactory));
parcelHelpers.export(exports, "withSaveHandler", ()=>(0, _passthrough.withSaveHandler));
parcelHelpers.export(exports, "withSaveHandlerSync", ()=>(0, _passthrough.withSaveHandlerSync));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Importing local_storage and indexed_db is necessary for the routers to be
// registered.
var _indexedDb = require("./indexed_db");
var _localStorage = require("./local_storage");
var _browserFiles = require("./browser_files");
var _http = require("./http");
var _ioUtils = require("./io_utils");
var _passthrough = require("./passthrough");
var _routerRegistry = require("./router_registry");
var _weightsLoader = require("./weights_loader");
var _modelManagement = require("./model_management");

},{"./indexed_db":"jCoGm","./local_storage":"fXcld","./browser_files":"l5Cns","./http":"ihQHl","./io_utils":"iRZ4M","./passthrough":"9R8iF","./router_registry":"76AgW","./weights_loader":"hG5HD","./model_management":"d8VhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l5Cns":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserDownloads", ()=>BrowserDownloads);
parcelHelpers.export(exports, "browserDownloadsRouter", ()=>browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "browserDownloads", ()=>browserDownloads);
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "browserFiles", ()=>browserFiles);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */ var _flags = require("../flags");
var _environment = require("../environment");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
const DEFAULT_FILE_NAME_PREFIX = "model";
const DEFAULT_JSON_EXTENSION_NAME = ".json";
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin";
function defer(f) {
    return new Promise((resolve)=>setTimeout(resolve)).then(f);
}
class BrowserDownloads {
    constructor(fileNamePrefix){
        if (!(0, _environment.env)().getBool("IS_BROWSER")) // TODO(cais): Provide info on what IOHandlers are available under the
        //   current environment.
        throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
        if (fileNamePrefix == null || fileNamePrefix.length === 0) fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
        this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    async save(modelArtifacts) {
        if (typeof document === "undefined") throw new Error("Browser downloads are not supported in this environment since `document` is not present");
        const weightsURL = window.URL.createObjectURL(new Blob([
            modelArtifacts.weightData
        ], {
            type: "application/octet-stream"
        }));
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
        else {
            const weightsManifest = [
                {
                    paths: [
                        "./" + this.weightDataFileName
                    ],
                    weights: modelArtifacts.weightSpecs
                }
            ];
            const modelJSON = (0, _ioUtils.getModelJSONForModelArtifacts)(modelArtifacts, weightsManifest);
            const modelJsonURL = window.URL.createObjectURL(new Blob([
                JSON.stringify(modelJSON)
            ], {
                type: "application/json"
            }));
            // If anchor elements are not provided, create them without attaching them
            // to parents, so that the downloaded file names can be controlled.
            const jsonAnchor = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
            jsonAnchor.download = this.modelJsonFileName;
            jsonAnchor.href = modelJsonURL;
            // Trigger downloads by evoking a click event on the download anchors.
            // When multiple downloads are started synchronously, Firefox will only
            // save the last one.
            await defer(()=>jsonAnchor.dispatchEvent(new MouseEvent("click")));
            if (modelArtifacts.weightData != null) {
                const weightDataAnchor = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
                weightDataAnchor.download = this.weightDataFileName;
                weightDataAnchor.href = weightsURL;
                await defer(()=>weightDataAnchor.dispatchEvent(new MouseEvent("click")));
            }
            return {
                modelArtifactsInfo: (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts)
            };
        }
    }
}
BrowserDownloads.URL_SCHEME = "downloads://";
class BrowserFiles {
    constructor(files){
        if (files == null || files.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);
        this.jsonFile = files[0];
        this.weightsFiles = files.slice(1);
    }
    async load() {
        return new Promise((resolve, reject)=>{
            const jsonReader = new FileReader();
            jsonReader.onload = (event)=>{
                // tslint:disable-next-line:no-any
                const modelJSON = JSON.parse(event.target.result);
                const modelTopology = modelJSON.modelTopology;
                if (modelTopology == null) {
                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
                    return;
                }
                const weightsManifest = modelJSON.weightsManifest;
                if (weightsManifest == null) {
                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
                    return;
                }
                if (this.weightsFiles.length === 0) {
                    resolve({
                        modelTopology
                    });
                    return;
                }
                const modelArtifactsPromise = (0, _ioUtils.getModelArtifactsForJSON)(modelJSON, (weightsManifest)=>this.loadWeights(weightsManifest));
                resolve(modelArtifactsPromise);
            };
            jsonReader.onerror = (error)=>reject(`Failed to read model topology and weights manifest JSON ` + `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);
            jsonReader.readAsText(this.jsonFile);
        });
    }
    loadWeights(weightsManifest) {
        const weightSpecs = [];
        const paths = [];
        for (const entry of weightsManifest){
            weightSpecs.push(...entry.weights);
            paths.push(...entry.paths);
        }
        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);
        const promises = paths.map((path)=>this.loadWeightsFile(path, pathToFile[path]));
        return Promise.all(promises).then((buffers)=>[
                weightSpecs,
                (0, _ioUtils.concatenateArrayBuffers)(buffers)
            ]);
    }
    loadWeightsFile(path, file) {
        return new Promise((resolve, reject)=>{
            const weightFileReader = new FileReader();
            weightFileReader.onload = (event)=>{
                // tslint:disable-next-line:no-any
                const weightData = event.target.result;
                resolve(weightData);
            };
            weightFileReader.onerror = (error)=>reject(`Failed to weights data from file of path '${path}'.`);
            weightFileReader.readAsArrayBuffer(file);
        });
    }
    /**
     * Check the compatibility between weights manifest and weight files.
     */ checkManifestAndWeightFiles(manifest) {
        const basenames = [];
        const fileNames = this.weightsFiles.map((file)=>(0, _ioUtils.basename)(file.name));
        const pathToFile = {};
        for (const group of manifest)group.paths.forEach((path)=>{
            const pathBasename = (0, _ioUtils.basename)(path);
            if (basenames.indexOf(pathBasename) !== -1) throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);
            basenames.push(pathBasename);
            if (fileNames.indexOf(pathBasename) === -1) throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
            else pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];
        });
        if (basenames.length !== this.weightsFiles.length) throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${this.weightsFiles.length}).`);
        return pathToFile;
    }
}
const browserDownloadsRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(browserDownloadsRouter);
function browserDownloads(fileNamePrefix = "model") {
    return new BrowserDownloads(fileNamePrefix);
}
function browserFiles(files) {
    return new BrowserFiles(files);
}

},{"../flags":"krVi8","../environment":"8tlxC","./io_utils":"iRZ4M","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihQHl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTTPRequest", ()=>HTTPRequest);
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */ parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
parcelHelpers.export(exports, "isHTTPScheme", ()=>isHTTPScheme);
parcelHelpers.export(exports, "httpRouter", ()=>httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "http", ()=>http);
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */ parcelHelpers.export(exports, "browserHTTPRequest", ()=>browserHTTPRequest);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */ var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
var _weightsLoader = require("./weights_loader");
const OCTET_STREAM_MIME_TYPE = "application/octet-stream";
const JSON_TYPE = "application/json";
class HTTPRequest {
    constructor(path, loadOptions){
        this.DEFAULT_METHOD = "POST";
        if (loadOptions == null) loadOptions = {};
        this.weightPathPrefix = loadOptions.weightPathPrefix;
        this.onProgress = loadOptions.onProgress;
        this.weightUrlConverter = loadOptions.weightUrlConverter;
        if (loadOptions.fetchFunc != null) {
            (0, _util.assert)(typeof loadOptions.fetchFunc === "function", ()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)");
            this.fetch = loadOptions.fetchFunc;
        } else this.fetch = (0, _environment.env)().platform.fetch;
        (0, _util.assert)(path != null && path.length > 0, ()=>"URL path for http must not be null, undefined or empty.");
        if (Array.isArray(path)) (0, _util.assert)(path.length === 2, ()=>"URL paths for http must have a length of 2, " + `(actual length is ${path.length}).`);
        this.path = path;
        if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
        this.requestInit = loadOptions.requestInit || {};
    }
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
        const init = Object.assign({
            method: this.DEFAULT_METHOD
        }, this.requestInit);
        init.body = new FormData();
        const weightsManifest = [
            {
                paths: [
                    "./model.weights.bin"
                ],
                weights: modelArtifacts.weightSpecs
            }
        ];
        const modelTopologyAndWeightManifest = (0, _ioUtils.getModelJSONForModelArtifacts)(modelArtifacts, weightsManifest);
        init.body.append("model.json", new Blob([
            JSON.stringify(modelTopologyAndWeightManifest)
        ], {
            type: JSON_TYPE
        }), "model.json");
        if (modelArtifacts.weightData != null) init.body.append("model.weights.bin", new Blob([
            modelArtifacts.weightData
        ], {
            type: OCTET_STREAM_MIME_TYPE
        }), "model.weights.bin");
        const response = await this.fetch(this.path, init);
        if (response.ok) return {
            modelArtifactsInfo: (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts),
            responses: [
                response
            ]
        };
        else throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);
    }
    /**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */ async load() {
        const modelConfigRequest = await this.fetch(this.path, this.requestInit);
        if (!modelConfigRequest.ok) throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);
        let modelJSON;
        try {
            modelJSON = await modelConfigRequest.json();
        } catch (e) {
            let message = `Failed to parse model JSON of response from ${this.path}.`;
            // TODO(nsthorat): Remove this after some time when we're comfortable that
            // .pb files are mostly gone.
            if (this.path.endsWith(".pb")) message += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.";
            else message += " Please make sure the server is serving valid JSON for this request.";
            throw new Error(message);
        }
        // We do not allow both modelTopology and weightsManifest to be missing.
        const modelTopology = modelJSON.modelTopology;
        const weightsManifest = modelJSON.weightsManifest;
        if (modelTopology == null && weightsManifest == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);
        return (0, _ioUtils.getModelArtifactsForJSON)(modelJSON, (weightsManifest)=>this.loadWeights(weightsManifest));
    }
    async loadWeights(weightsManifest) {
        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
        const [prefix, suffix] = parseUrl(weightPath);
        const pathPrefix = this.weightPathPrefix || prefix;
        const weightSpecs = [];
        for (const entry of weightsManifest)weightSpecs.push(...entry.weights);
        const fetchURLs = [];
        const urlPromises = [];
        for (const weightsGroup of weightsManifest){
            for (const path of weightsGroup.paths)if (this.weightUrlConverter != null) urlPromises.push(this.weightUrlConverter(path));
            else fetchURLs.push(pathPrefix + path + suffix);
        }
        if (this.weightUrlConverter) fetchURLs.push(...await Promise.all(urlPromises));
        const buffers = await (0, _weightsLoader.loadWeightsAsArrayBuffer)(fetchURLs, {
            requestInit: this.requestInit,
            fetchFunc: this.fetch,
            onProgress: this.onProgress
        });
        return [
            weightSpecs,
            (0, _ioUtils.concatenateArrayBuffers)(buffers)
        ];
    }
}
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
function parseUrl(url) {
    const lastSlash = url.lastIndexOf("/");
    const lastSearchParam = url.lastIndexOf("?");
    const prefix = url.substring(0, lastSlash);
    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : "";
    return [
        prefix + "/",
        suffix
    ];
}
function isHTTPScheme(url) {
    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}
const httpRouter = (url, loadOptions)=>{
    if (typeof fetch === "undefined" && (loadOptions == null || loadOptions.fetchFunc == null)) // `http` uses `fetch` or `node-fetch`, if one wants to use it in
    // an environment that is not the browser or node they have to setup a
    // global fetch polyfill.
    return null;
    else {
        let isHTTP = true;
        if (Array.isArray(url)) isHTTP = url.every((urlItem)=>isHTTPScheme(urlItem));
        else isHTTP = isHTTPScheme(url);
        if (isHTTP) return http(url, loadOptions);
    }
    return null;
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(httpRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(httpRouter);
function http(path, loadOptions) {
    return new HTTPRequest(path, loadOptions);
}
function browserHTTPRequest(path, loadOptions) {
    return http(path, loadOptions);
}

},{"../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./router_registry":"76AgW","./weights_loader":"hG5HD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hG5HD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */ parcelHelpers.export(exports, "loadWeightsAsArrayBuffer", ()=>loadWeightsAsArrayBuffer);
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */ parcelHelpers.export(exports, "loadWeights", ()=>loadWeights);
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */ parcelHelpers.export(exports, "weightsLoaderFactory", ()=>weightsLoaderFactory);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _progress = require("./progress");
var _types = require("./types");
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
    if (loadOptions == null) loadOptions = {};
    const fetchFunc = loadOptions.fetchFunc == null ? (0, _environment.env)().platform.fetch : loadOptions.fetchFunc;
    // Create the requests for all of the weights in parallel.
    const requests = fetchURLs.map((fetchURL)=>fetchFunc(fetchURL, loadOptions.requestInit, {
            isBinary: true
        }));
    const fetchStartFraction = 0;
    const fetchEndFraction = 0.5;
    const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await (0, _progress.monitorPromisesProgress)(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
    const bufferPromises = responses.map((response)=>response.arrayBuffer());
    const bufferStartFraction = 0.5;
    const bufferEndFraction = 1;
    const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await (0, _progress.monitorPromisesProgress)(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
    return buffers;
}
async function loadWeights(manifest, filePathPrefix = "", weightNames, requestInit) {
    // TODO(nsthorat): Groups are currently fetched atomically. If you need a
    // single weight from a group, the whole group will be fetched. At a future
    // date, we should support fetching only the individual shards within a
    // group that are needed to reconstruct the requested weight.
    // TODO(cais): Use `decodeWeights` for implementation.
    const fetchWeights = (fetchUrls)=>loadWeightsAsArrayBuffer(fetchUrls, {
            requestInit
        });
    const loadWeights = weightsLoaderFactory(fetchWeights);
    return loadWeights(manifest, filePathPrefix, weightNames);
}
function weightsLoaderFactory(fetchWeightsFunction) {
    return async (manifest, filePathPrefix = "", weightNames)=>{
        // Collect all the groups, weights, and their relative offsets to be
        // fetched.
        const groupIndicesToFetchMap = manifest.map(()=>false);
        const groupWeightsToFetch = {};
        const weightsFound = weightNames != null ? weightNames.map(()=>false) : [];
        const allManifestWeightNames = [];
        manifest.forEach((manifestGroupConfig, groupIndex)=>{
            let groupOffset = 0;
            manifestGroupConfig.weights.forEach((weightsEntry)=>{
                const rawDtype = "quantization" in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;
                const weightsBytes = (0, _types.DTYPE_VALUE_SIZE_MAP)[rawDtype] * _util.sizeFromShape(weightsEntry.shape);
                const enqueueWeightsForFetchingFn = ()=>{
                    groupIndicesToFetchMap[groupIndex] = true;
                    if (groupWeightsToFetch[groupIndex] == null) groupWeightsToFetch[groupIndex] = [];
                    groupWeightsToFetch[groupIndex].push({
                        manifestEntry: weightsEntry,
                        groupOffset,
                        sizeBytes: weightsBytes
                    });
                };
                if (weightNames != null) weightNames.forEach((weightName, weightIndex)=>{
                    if (weightName === weightsEntry.name) {
                        enqueueWeightsForFetchingFn();
                        weightsFound[weightIndex] = true;
                    }
                });
                else enqueueWeightsForFetchingFn();
                allManifestWeightNames.push(weightsEntry.name);
                groupOffset += weightsBytes;
            });
        });
        if (!weightsFound.every((found)=>found)) {
            const weightsNotFound = weightNames.filter((_, i)=>!weightsFound[i]);
            throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(", ")}. \n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(", ")}.`);
        }
        // Convert the one-hot boolean groupId => shouldFetch map to a list of group
        // IDs.
        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i)=>{
            if (shouldFetch) accumulator.push(i);
            return accumulator;
        }, []);
        const fetchUrls = [];
        groupIndicesToFetch.forEach((i)=>{
            manifest[i].paths.forEach((filepath)=>{
                const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith("/") ? "/" : "") + filepath;
                fetchUrls.push(fetchUrl);
            });
        });
        const buffers = await fetchWeightsFunction(fetchUrls);
        const weightsTensorMap = {};
        let bufferIndexOffset = 0;
        groupIndicesToFetch.forEach((i)=>{
            const numBuffers = manifest[i].paths.length;
            let groupBytes = 0;
            for(let i1 = 0; i1 < numBuffers; i1++)groupBytes += buffers[bufferIndexOffset + i1].byteLength;
            // Create a buffer for the whole group.
            const groupBuffer = new ArrayBuffer(groupBytes);
            const groupByteBuffer = new Uint8Array(groupBuffer);
            let groupBufferOffset = 0;
            for(let i2 = 0; i2 < numBuffers; i2++){
                const buffer = new Uint8Array(buffers[bufferIndexOffset + i2]);
                groupByteBuffer.set(buffer, groupBufferOffset);
                groupBufferOffset += buffer.byteLength;
            }
            const weightsEntries = groupWeightsToFetch[i];
            weightsEntries.forEach((weightsEntry)=>{
                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                const nameToTensorMap = (0, _ioUtils.decodeWeights)(byteBuffer, [
                    weightsEntry.manifestEntry
                ]);
                for(const name in nameToTensorMap)weightsTensorMap[name] = nameToTensorMap[name];
            });
            bufferIndexOffset += numBuffers;
        });
        return weightsTensorMap;
    };
}

},{"../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./progress":"7GW3I","./types":"2qT38","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GW3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */ parcelHelpers.export(exports, "monitorPromisesProgress", ()=>monitorPromisesProgress);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
    checkPromises(promises);
    startFraction = startFraction == null ? 0 : startFraction;
    endFraction = endFraction == null ? 1 : endFraction;
    checkFraction(startFraction, endFraction);
    let resolvedPromise = 0;
    const registerMonitor = (promise)=>{
        promise.then((value)=>{
            const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);
            // pass fraction as parameter to callback function.
            onProgress(fraction);
            return value;
        });
        return promise;
    };
    function checkPromises(promises) {
        (0, _util.assert)(promises != null && Array.isArray(promises) && promises.length > 0, ()=>"promises must be a none empty array");
    }
    function checkFraction(startFraction, endFraction) {
        (0, _util.assert)(startFraction >= 0 && startFraction <= 1, ()=>`Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);
        (0, _util.assert)(endFraction >= 0 && endFraction <= 1, ()=>`Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);
        (0, _util.assert)(endFraction >= startFraction, ()=>`startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);
    }
    return Promise.all(promises.map(registerMonitor));
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9R8iF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data. Optional.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs. Optional.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */ parcelHelpers.export(exports, "fromMemory", ()=>fromMemory);
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data. Optional.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs. Optional.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandlerSync` that simply loads the provided data.
 */ parcelHelpers.export(exports, "fromMemorySync", ()=>fromMemorySync);
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     promise that resolves to a `SaveResult`.
 */ parcelHelpers.export(exports, "withSaveHandler", ()=>withSaveHandler);
/**
 * Creates an IOHandlerSync that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */ parcelHelpers.export(exports, "withSaveHandlerSync", ()=>withSaveHandlerSync);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class PassthroughLoader {
    constructor(modelArtifacts){
        this.modelArtifacts = modelArtifacts;
    }
    load() {
        return this.modelArtifacts;
    }
}
class PassthroughSaver {
    constructor(saveHandler){
        this.saveHandler = saveHandler;
    }
    save(modelArtifacts) {
        return this.saveHandler(modelArtifacts);
    }
}
class PassthroughAsync {
    constructor(handler){
        if (handler.load) this.load = ()=>Promise.resolve(handler.load());
        if (handler.save) this.save = (modelArtifacts)=>Promise.resolve(handler.save(modelArtifacts));
    }
}
function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
    const args = arguments;
    return new PassthroughAsync(fromMemorySync(...args));
}
function fromMemorySync(modelArtifacts, weightSpecs, weightData, trainingConfig) {
    if (arguments.length === 1) {
        const isModelArtifacts = modelArtifacts.modelTopology != null || modelArtifacts.weightSpecs != null;
        if (isModelArtifacts) return new PassthroughLoader(modelArtifacts);
        else {
            // Legacy support: with only modelTopology.
            // TODO(cais): Remove this deprecated API.
            console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.");
            return new PassthroughLoader({
                modelTopology: modelArtifacts
            });
        }
    } else {
        // Legacy support.
        // TODO(cais): Remove this deprecated API.
        console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.");
        return new PassthroughLoader({
            modelTopology: modelArtifacts,
            weightSpecs,
            weightData,
            trainingConfig
        });
    }
}
function withSaveHandler(saveHandler) {
    return new PassthroughSaver(saveHandler);
}
function withSaveHandlerSync(saveHandler) {
    return new PassthroughSaver(saveHandler);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWBjd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confusionMatrix", ()=>(0, _confusionMatrix.confusionMatrix));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Exports under the tf.math.* namespace.
 */ var _confusionMatrix = require("./ops/confusion_matrix");

},{"./ops/confusion_matrix":"1Nmh0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Nmh0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ parcelHelpers.export(exports, "confusionMatrix_", ()=>confusionMatrix_);
parcelHelpers.export(exports, "confusionMatrix", ()=>confusionMatrix);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _cast = require("./cast");
var _matMul = require("./mat_mul");
var _oneHot = require("./one_hot");
var _operation = require("./operation");
var _transpose = require("./transpose");
function confusionMatrix_(labels, predictions, numClasses) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "confusionMatrix");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "confusionMatrix");
    _util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), ()=>`If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);
    _util.assert($labels.rank === 1, ()=>`Expected the rank of labels to be 1, but got ${$labels.rank}`);
    _util.assert($predictions.rank === 1, ()=>`Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);
    _util.assert($labels.shape[0] === $predictions.shape[0], ()=>`Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);
    _util.assert(numClasses > 0 && Number.isInteger(numClasses), ()=>`numClasses is required to be a positive integer, but got ` + `${numClasses}`);
    // TODO(cais): In the future, if oneHot supports tensors inputs for
    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
    const oneHotLabels = (0, _oneHot.oneHot)((0, _cast.cast)($labels, "int32"), numClasses);
    const oneHotPredictions = (0, _oneHot.oneHot)((0, _cast.cast)($predictions, "int32"), numClasses);
    const oneHotLabelsT = (0, _transpose.transpose)(oneHotLabels);
    const product = (0, _matMul.matMul)(oneHotLabelsT, oneHotPredictions);
    return (0, _cast.cast)(product, "int32");
}
const confusionMatrix = (0, _operation.op)({
    confusionMatrix_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./cast":"a7v0X","./mat_mul":"SZp9a","./one_hot":"5171s","./operation":"l6IGY","./transpose":"5Lger","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SZp9a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matMul", ()=>matMul);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function matMul_(a, b, transposeA = false, transposeB = false) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "matMul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "matMul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    const attrs = {
        transposeA,
        transposeB
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.BatchMatMul), inputs, attrs);
}
const matMul = (0, _operation.op)({
    matMul_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5171s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oneHot", ()=>oneHot);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 * `indices` used to encode prediction class must start from 0. For example,
 *  if you have 3 classes of data, class 1 should be encoded as 0, class 2
 *  should be 1, and class 3 should be 2.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must
 * start from 0.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 * @param dtype The dtype of the output tensor, default to 'int32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function oneHot_(indices, depth, onValue = 1, offValue = 0, dtype = "int32") {
    if (depth < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "oneHot", "int32");
    const inputs = {
        indices: $indices
    };
    const attrs = {
        dtype,
        depth,
        onValue,
        offValue
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.OneHot), inputs, attrs);
}
const oneHot = (0, _operation.op)({
    oneHot_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Lger":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _complex = require("./complex");
var _imag = require("./imag");
var _neg = require("./neg");
var _operation = require("./operation");
var _real = require("./real");
/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 * @param conjugate Will conjugate complex input if true.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function transpose_(x, perm, conjugate) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "transpose");
    if (perm == null) perm = $x.shape.map((s, i)=>i).reverse();
    _util.assert($x.rank === perm.length, ()=>`Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);
    perm.forEach((axis)=>{
        _util.assert(axis >= 0 && axis < $x.rank, ()=>`All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);
    });
    if ($x.rank <= 1) return $x.clone();
    const inputs = {
        x: $x
    };
    const attrs = {
        perm
    };
    if ($x.dtype === "complex64") return (0, _globals.tidy)(()=>{
        let $real = (0, _real.real)($x);
        let $imag = (0, _imag.imag)($x);
        $real = (0, _engine.ENGINE).runKernel((0, _kernelNames.Transpose), {
            x: $real
        }, attrs);
        $imag = (0, _engine.ENGINE).runKernel((0, _kernelNames.Transpose), {
            x: $imag
        }, attrs);
        if (conjugate) $imag = (0, _neg.neg)($imag);
        return (0, _complex.complex)($real, $imag);
    });
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Transpose), inputs, attrs);
}
const transpose = (0, _operation.op)({
    transpose_
});

},{"../engine":"1aEvR","../globals":"gfrr7","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./complex":"h6n1M","./imag":"4ZVj9","./neg":"0PGOC","./operation":"l6IGY","./real":"bX5g4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gfrr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "enableProdMode", ()=>enableProdMode);
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "enableDebugMode", ()=>enableDebugMode);
/** Globally disables deprecation warnings */ parcelHelpers.export(exports, "disableDeprecationWarnings", ()=>disableDeprecationWarnings);
/** Warn users about deprecated functionality. */ parcelHelpers.export(exports, "deprecationWarn", ()=>deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "disposeVariables", ()=>disposeVariables);
/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */ parcelHelpers.export(exports, "engine", ()=>engine);
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */ parcelHelpers.export(exports, "memory", ()=>memory);
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 * - `kernelNames`: an array of unique strings with just the names of the
 * kernels in the `kernels` array.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */ parcelHelpers.export(exports, "profile", ()=>profile);
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */ parcelHelpers.export(exports, "tidy", ()=>tidy);
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */ parcelHelpers.export(exports, "dispose", ()=>dispose);
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */ parcelHelpers.export(exports, "keep", ()=>keep);
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */ parcelHelpers.export(exports, "time", ()=>time);
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "setBackend", ()=>setBackend);
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "ready", ()=>ready);
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "getBackend", ()=>getBackend);
/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "removeBackend", ()=>removeBackend);
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */ parcelHelpers.export(exports, "findBackend", ()=>findBackend);
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */ parcelHelpers.export(exports, "findBackendFactory", ()=>findBackendFactory);
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "registerBackend", ()=>registerBackend);
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */ parcelHelpers.export(exports, "backend", ()=>backend);
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */ parcelHelpers.export(exports, "setPlatform", ()=>setPlatform);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _environment = require("./environment");
var _tensor = require("./tensor");
var _tensorUtil = require("./tensor_util");
function enableProdMode() {
    (0, _environment.env)().set("PROD", true);
}
function enableDebugMode() {
    (0, _environment.env)().set("DEBUG", true);
}
function disableDeprecationWarnings() {
    (0, _environment.env)().set("DEPRECATION_WARNINGS_ENABLED", false);
    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
function deprecationWarn(msg) {
    if ((0, _environment.env)().getBool("DEPRECATION_WARNINGS_ENABLED")) console.warn(msg + " You can disable deprecation warnings with " + "tf.disableDeprecationWarnings().");
}
(0, _tensor.setDeprecationWarningFn)(deprecationWarn);
function disposeVariables() {
    (0, _engine.ENGINE).disposeVariables();
}
function engine() {
    return 0, _engine.ENGINE;
}
function memory() {
    return (0, _engine.ENGINE).memory();
}
function profile(f) {
    return (0, _engine.ENGINE).profile(f);
}
function tidy(nameOrFn, fn) {
    return (0, _engine.ENGINE).tidy(nameOrFn, fn);
}
function dispose(container) {
    const tensors = (0, _tensorUtil.getTensorsInContainer)(container);
    tensors.forEach((tensor)=>tensor.dispose());
}
function keep(result) {
    return (0, _engine.ENGINE).keep(result);
}
function time(f) {
    return (0, _engine.ENGINE).time(f);
}
function setBackend(backendName) {
    return (0, _engine.ENGINE).setBackend(backendName);
}
function ready() {
    return (0, _engine.ENGINE).ready();
}
function getBackend() {
    return (0, _engine.ENGINE).backendName;
}
function removeBackend(name) {
    (0, _engine.ENGINE).removeBackend(name);
}
function findBackend(name) {
    return (0, _engine.ENGINE).findBackend(name);
}
function findBackendFactory(name) {
    return (0, _engine.ENGINE).findBackendFactory(name);
}
function registerBackend(name, factory, priority = 1) {
    return (0, _engine.ENGINE).registerBackend(name, factory, priority);
}
function backend() {
    return (0, _engine.ENGINE).backend;
}
function setPlatform(platformName, platform) {
    (0, _environment.env)().setPlatform(platformName, platform);
}

},{"./engine":"1aEvR","./environment":"8tlxC","./tensor":"DPGBx","./tensor_util":"kUGKD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ZVj9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "imag", ()=>imag);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function imag_(input) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "imag");
    const inputs = {
        input: $input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Imag), inputs);
}
const imag = (0, _operation.op)({
    imag_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0PGOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "neg", ()=>neg);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function neg_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "neg");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Neg), inputs);
}
const neg = (0, _operation.op)({
    neg_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bX5g4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "real", ()=>real);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function real_(input) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "real");
    const inputs = {
        input: $input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Real), inputs);
}
const real = (0, _operation.op)({
    real_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQqEF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */ parcelHelpers.export(exports, "getBroadcastDims", ()=>getBroadcastDims);
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */ parcelHelpers.export(exports, "getReductionAxes", ()=>getReductionAxes);
parcelHelpers.export(exports, "assertAndGetBroadcastShape", ()=>assertAndGetBroadcastShape);
function getBroadcastDims(inShape, outShape) {
    const inRank = inShape.length;
    const dims = [];
    for(let i = 0; i < inRank; i++){
        const dim = inRank - 1 - i;
        const a = inShape[dim] || 1;
        const b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) dims.unshift(dim);
    }
    return dims;
}
function getReductionAxes(inShape, outShape) {
    const result = [];
    for(let i = 0; i < outShape.length; i++){
        const inDim = inShape[inShape.length - i - 1];
        const outAxis = outShape.length - i - 1;
        const outDim = outShape[outAxis];
        if (inDim == null || inDim === 1 && outDim > 1) result.unshift(outAxis);
    }
    return result;
}
function assertAndGetBroadcastShape(shapeA, shapeB) {
    const result = [];
    const l = Math.max(shapeA.length, shapeB.length);
    for(let i = 0; i < l; i++){
        let a = shapeA[shapeA.length - i - 1];
        if (a == null) a = 1;
        let b = shapeB[shapeB.length - i - 1];
        if (b == null) b = 1;
        if (a === 1) result.unshift(b);
        else if (b === 1) result.unshift(a);
        else if (a !== b) {
            const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;
            throw Error(errMsg);
        } else result.unshift(a);
    }
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eNnql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a `tf.Tensor` from an image in async way.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * (await tf.browser.fromPixelsAsync(image)).print();
 * ```
 * This API is the async version of fromPixels. The API will first
 * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to
 * imageBitmap if the flag is set to true.
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */ parcelHelpers.export(exports, "fromPixelsAsync", ()=>fromPixelsAsync);
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor
 * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If
 * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */ parcelHelpers.export(exports, "toPixels", ()=>toPixels);
parcelHelpers.export(exports, "fromPixels", ()=>fromPixels);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _environment = require("../environment");
var _kernelNames = require("../kernel_names");
var _kernelRegistry = require("../kernel_registry");
var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _cast = require("./cast");
var _operation = require("./operation");
var _tensor3D = require("./tensor3d");
let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @returns A Tensor3D with the shape `[height, width, numChannels]`.
 *
 * Note: fromPixels can be lossy in some cases, same image may result in
 * slightly different tensor values, if rendered by different rendering
 * engines. This means that results from different browsers, or even same
 * browser with CPU and GPU rendering engines can be different. See discussion
 * in details:
 * https://github.com/tensorflow/tfjs/issues/5482
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */ function fromPixels_(pixels, numChannels = 3) {
    // Sanity checks.
    if (numChannels > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
    if (pixels == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
    let isPixelData = false;
    let isImageData = false;
    let isVideo = false;
    let isImage = false;
    let isCanvasLike = false;
    let isImageBitmap = false;
    if (pixels.data instanceof Uint8Array) isPixelData = true;
    else if (typeof ImageData !== "undefined" && pixels instanceof ImageData) isImageData = true;
    else if (typeof HTMLVideoElement !== "undefined" && pixels instanceof HTMLVideoElement) isVideo = true;
    else if (typeof HTMLImageElement !== "undefined" && pixels instanceof HTMLImageElement) isImage = true;
    else if (pixels.getContext != null) isCanvasLike = true;
    else if (typeof ImageBitmap !== "undefined" && pixels instanceof ImageBitmap) isImageBitmap = true;
    else throw new Error("pixels passed to tf.browser.fromPixels() must be either an " + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);
    // If the current backend has 'FromPixels' registered, it has a more
    // efficient way of handling pixel uploads, so we call that.
    const kernel = (0, _kernelRegistry.getKernel)((0, _kernelNames.FromPixels), (0, _engine.ENGINE).backendName);
    if (kernel != null) {
        const inputs = {
            pixels
        };
        const attrs = {
            numChannels
        };
        return (0, _engine.ENGINE).runKernel((0, _kernelNames.FromPixels), inputs, attrs);
    }
    const [width, height] = isVideo ? [
        pixels.videoWidth,
        pixels.videoHeight
    ] : [
        pixels.width,
        pixels.height
    ];
    let vals;
    if (isCanvasLike) vals = // tslint:disable-next-line:no-any
    pixels.getContext("2d").getImageData(0, 0, width, height).data;
    else if (isImageData || isPixelData) vals = pixels.data;
    else if (isImage || isVideo || isImageBitmap) {
        if (fromPixels2DContext == null) {
            if (typeof document === "undefined") {
                if (typeof OffscreenCanvas !== "undefined" && typeof OffscreenCanvasRenderingContext2D !== "undefined") // @ts-ignore
                fromPixels2DContext = new OffscreenCanvas(1, 1).getContext("2d");
                else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
            } else fromPixels2DContext = document.createElement("canvas").getContext("2d", {
                willReadFrequently: true
            });
        }
        fromPixels2DContext.canvas.width = width;
        fromPixels2DContext.canvas.height = height;
        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
    }
    let values;
    if (numChannels === 4) values = new Int32Array(vals);
    else {
        const numPixels = width * height;
        values = new Int32Array(numPixels * numChannels);
        for(let i = 0; i < numPixels; i++)for(let channel = 0; channel < numChannels; ++channel)values[i * numChannels + channel] = vals[i * 4 + channel];
    }
    const outShape = [
        height,
        width,
        numChannels
    ];
    return (0, _tensor3D.tensor3d)(values, outShape, "int32");
}
// Helper functions for |fromPixelsAsync| to check whether the input can
// be wrapped into imageBitmap.
function isPixelData(pixels) {
    return pixels != null && pixels.data instanceof Uint8Array;
}
function isImageBitmapFullySupported() {
    return typeof window !== "undefined" && typeof ImageBitmap !== "undefined" && window.hasOwnProperty("createImageBitmap");
}
function isNonEmptyPixels(pixels) {
    return pixels != null && pixels.width !== 0 && pixels.height !== 0;
}
function canWrapPixelsToImageBitmap(pixels) {
    return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);
}
async function fromPixelsAsync(pixels, numChannels = 3) {
    let inputs = null;
    // Check whether the backend needs to wrap |pixels| to imageBitmap and
    // whether |pixels| can be wrapped to imageBitmap.
    if ((0, _environment.env)().getBool("WRAP_TO_IMAGEBITMAP") && canWrapPixelsToImageBitmap(pixels)) {
        // Force the imageBitmap creation to not do any premultiply alpha
        // ops.
        let imageBitmap;
        try {
            // wrap in try-catch block, because createImageBitmap may not work
            // properly in some browsers, e.g.
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594
            // tslint:disable-next-line: no-any
            imageBitmap = await createImageBitmap(pixels, {
                premultiplyAlpha: "none"
            });
        } catch (e) {
            imageBitmap = null;
        }
        // createImageBitmap will clip the source size.
        // In some cases, the input will have larger size than its content.
        // E.g. new Image(10, 10) but with 1 x 1 content. Using
        // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which
        // is not correct. We should avoid wrapping such resouce to
        // imageBitmap.
        if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) inputs = imageBitmap;
        else inputs = pixels;
    } else inputs = pixels;
    return fromPixels_(inputs, numChannels);
}
async function toPixels(img, canvas) {
    let $img = (0, _tensorUtilEnv.convertToTensor)(img, "img", "toPixels");
    if (!(img instanceof (0, _tensor.Tensor))) {
        // Assume int32 if user passed a native array.
        const originalImgTensor = $img;
        $img = (0, _cast.cast)(originalImgTensor, "int32");
        originalImgTensor.dispose();
    }
    if ($img.rank !== 2 && $img.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
    const [height, width] = $img.shape.slice(0, 2);
    const depth = $img.rank === 2 ? 1 : $img.shape[2];
    if (depth > 4 || depth === 2) throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);
    if ($img.dtype !== "float32" && $img.dtype !== "int32") throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);
    const data = await $img.data();
    const multiplier = $img.dtype === "float32" ? 255 : 1;
    const bytes = new Uint8ClampedArray(width * height * 4);
    for(let i = 0; i < height * width; ++i){
        const rgba = [
            0,
            0,
            0,
            255
        ];
        for(let d = 0; d < depth; d++){
            const value = data[i * depth + d];
            if ($img.dtype === "float32") {
                if (value < 0 || value > 1) throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);
            } else if ($img.dtype === "int32") {
                if (value < 0 || value > 255) throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);
            }
            if (depth === 1) {
                rgba[0] = value * multiplier;
                rgba[1] = value * multiplier;
                rgba[2] = value * multiplier;
            } else rgba[d] = value * multiplier;
        }
        const j = i * 4;
        bytes[j + 0] = Math.round(rgba[0]);
        bytes[j + 1] = Math.round(rgba[1]);
        bytes[j + 2] = Math.round(rgba[2]);
        bytes[j + 3] = Math.round(rgba[3]);
    }
    if (canvas != null) {
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext("2d");
        const imageData = new ImageData(bytes, width, height);
        ctx.putImageData(imageData, 0, 0);
    }
    if ($img !== img) $img.dispose();
    return bytes;
}
const fromPixels = (0, _operation.op)({
    fromPixels_
});

},{"../engine":"1aEvR","../environment":"8tlxC","../kernel_names":"2CzXQ","../kernel_registry":"3ziE7","../tensor":"DPGBx","../tensor_util_env":"fsyzK","./cast":"a7v0X","./operation":"l6IGY","./tensor3d":"dd1iP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dd1iP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor3d", ()=>tensor3d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor3d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 3) throw new Error("tensor3d() requires shape to have three numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 3 && inferredShape.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6p9Tw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */ parcelHelpers.export(exports, "prepareAndValidate", ()=>prepareAndValidate);
var _util = require("../util");
function prepareAndValidate(tensor, indices) {
    const tensorRank = tensor.shape.length;
    const indicesRank = indices.shape.length;
    if (tensorRank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher," + ` but the rank was ${tensorRank}.`);
    if (indicesRank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher," + ` but the rank was ${indicesRank}.`);
    if (indices.dtype !== "int32") throw new Error("tf.gatherND() expects the indices to be int32 type," + ` but the dtype was ${indices.dtype}.`);
    if (indices.shape[indicesRank - 1] > tensorRank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);
    if ((0, _util.sizeFromShape)(tensor.shape) === 0) throw new Error("Requested more than 0 entries, but input is empty." + ` Input shape: ${tensor.shape}.`);
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    // The result shape is
    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
    let nResult = 1;
    for(let i = 0; i < indicesShape.length - 1; ++i)nResult *= indicesShape[i];
    const inputShape = tensor.shape;
    const resultShape = indicesShape.slice();
    resultShape.pop();
    let sliceSize = 1;
    for(let i1 = sliceRank; i1 < tensorRank; ++i1){
        sliceSize *= inputShape[i1];
        resultShape.push(inputShape[i1]);
    }
    const strides = [
        ...(0, _util.computeStrides)(tensor.shape).map((stride)=>stride / sliceSize),
        1
    ].slice(0, sliceRank);
    return [
        resultShape,
        nResult,
        sliceSize,
        strides
    ];
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9rnV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */ parcelHelpers.export(exports, "validateUpdateShape", ()=>validateUpdateShape);
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */ parcelHelpers.export(exports, "validateInput", ()=>validateInput);
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */ parcelHelpers.export(exports, "calculateShapes", ()=>calculateShapes);
var _util = require("../util");
function validateUpdateShape(shape, indices, updates) {
    const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;
    const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;
    const shapeError = "Must have updates.shape = indices.shape[:batchDim] + " + `shape[sliceDim:], got updates.shape: ${updates.shape}` + `, indices.shape: ${indices.shape}, shape: ${shape}` + `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;
    if (updates.rank < batchDim) throw new Error(shapeError + ` update.rank < ${batchDim}. `);
    if (shape.length < sliceDim + (updates.rank - batchDim)) throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
    if (updates.rank !== batchDim + shape.length - sliceDim) throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
    for(let d = 0; d < batchDim; ++d){
        if (updates.shape[d] !== indices.shape[d]) throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
    }
    for(let d1 = 0; d1 < updates.rank - batchDim; ++d1){
        if (updates.shape[d1 + batchDim] !== shape[d1 + sliceDim]) throw new Error(shapeError + ` updates.shape[${d1 + batchDim}] (${updates.shape[d1 + batchDim]}) != shape[${d1 + batchDim}] (${shape[d1 + batchDim]})`);
    }
}
function validateInput(updates, indices, shape) {
    if (indices.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher," + ` but the rank was ${indices.rank}.`);
    if (updates.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher," + ` but the rank was ${updates.rank}.`);
    if (indices.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
    if (shape.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
    if (shape.length === 0) {
        if (indices.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
        if (updates.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
    }
    validateUpdateShape(shape, indices, updates);
}
function calculateShapes(updates, indices, shape) {
    // Calculate the number of dimensions in indices
    const indicesRank = indices.shape.length;
    const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1;
    // Calculate the number of elements that make up each slice of our updated
    // tensor. This allows us to work with flattened tensors and copy over whole
    // slices at a time.
    const totalNd = shape.length;
    let sliceSize = 1;
    for(let i = sliceRank; i < totalNd; ++i)sliceSize *= shape[i];
    const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;
    const numUpdates = (0, _util.sizeFromShape)(indices.shape) / safeSliceDim;
    const strides = [
        ...(0, _util.computeStrides)(shape.slice(0, sliceRank)),
        1
    ];
    const outputSize = (0, _util.sizeFromShape)(shape);
    return {
        sliceRank,
        numUpdates,
        sliceSize,
        strides,
        outputSize
    };
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jgPu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertParamsValid", ()=>assertParamsValid);
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */ parcelHelpers.export(exports, "maskToAxes", ()=>maskToAxes);
/** Computes the output shape given the strided slice params. */ parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.
parcelHelpers.export(exports, "stridesWithElidedDims", ()=>stridesWithElidedDims);
// Normalize the start, end and strides.
parcelHelpers.export(exports, "getNormalizedAxes", ()=>getNormalizedAxes);
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.
parcelHelpers.export(exports, "startIndicesWithElidedDims", ()=>startIndicesWithElidedDims);
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.
parcelHelpers.export(exports, "stopIndicesWithElidedDims", ()=>stopIndicesWithElidedDims);
parcelHelpers.export(exports, "stridesForAxis", ()=>stridesForAxis);
parcelHelpers.export(exports, "startForAxis", ()=>startForAxis);
parcelHelpers.export(exports, "stopForAxis", ()=>stopForAxis);
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */ parcelHelpers.export(exports, "isSliceContinous", ()=>isSliceContinous);
parcelHelpers.export(exports, "computeFlatOffset", ()=>computeFlatOffset);
parcelHelpers.export(exports, "parseSliceParams", ()=>parseSliceParams);
// Convert the slicing specification from a sparse representation to a dense
// representation. This means that all ellipses and newaxis are expanded out.
parcelHelpers.export(exports, "sliceInfo", ()=>sliceInfo);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
const NEW_AXIS = -2;
const SHRINK_AXIS = -1;
function assertParamsValid(input, begin, size) {
    const inputRank = input.shape.length;
    _util.assert(inputRank === begin.length, ()=>`Error in slice${inputRank}D: Length of begin ${begin} must ` + `match the rank of the array (${inputRank}).`);
    _util.assert(inputRank === size.length, ()=>`Error in slice${inputRank}D: Length of size ${size} must ` + `match the rank of the array (${inputRank}).`);
    for(let i = 0; i < inputRank; ++i)_util.assert(begin[i] + size[i] <= input.shape[i], ()=>`Error in slice${inputRank}D: begin[${i}] + size[${i}] ` + `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
}
function maskToAxes(mask) {
    const axes = [];
    let axis = 0;
    while(mask > 0){
        if (mask & 1) axes.push(axis);
        mask /= 2;
        axis++;
    }
    return axes;
}
function computeOutShape(begin, end, strides) {
    const size = [];
    for(let axis = 0; axis < begin.length; axis++)size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
    return size;
}
function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
    const newStrides = [
        ...strides
    ];
    for(let i = newStrides.length; i < inputShape.length; i++)newStrides.push(1);
    for(let i1 = 0; i1 < numElidedAxes; i1++)if (i1 === 0) newStrides[ellipsisInsertionIndex] = 1;
    else {
        newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */ , 1 /* element to add */ );
        newStrides.pop();
    }
    return newStrides;
}
function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
    if (normalizedAxis <= ellipsisInsertionIndex) return normalizedAxis;
    return normalizedAxis - (numElidedAxes - 1);
}
function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
    const elidedAxes = [];
    for(let i = 0; i < numElidedAxes; i++)elidedAxes.push(ellipsisInsertionIndex + i);
    return elidedAxes;
}
function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
    const inputRank = inputShape.length;
    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);
    if (ellipsisAxes.length && numInterpolatedAxes > 0) {
        const fullIndex = ellipsisAxes[0];
        // The ellipsis applies to the masked index as well as any dimensions
        // that are interpolated.
        const numElidedAxes = numInterpolatedAxes + 1;
        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
        normalizedStrides = stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
    } else for(let axis = 0; axis < inputRank; axis++){
        normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
        normalizedEnd[axis] = stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
        normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
    }
    return {
        begin: normalizedBegin,
        end: normalizedEnd,
        strides: normalizedStrides
    };
}
function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
    const newIndices = [
        ...inputShape
    ];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for(let axis = 0; axis < newIndices.length; axis++)if (elidedAxes.indexOf(axis) > -1) newIndices[axis] = 0;
    else {
        const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
        let originalValue = originalBegin[originalAxis];
        if (beginMask & 1 << originalAxis) originalValue = 0;
        newIndices[axis] = originalValue;
    }
    return newIndices;
}
function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
    const newIndices = [
        ...inputShape
    ];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for(let axis = 0; axis < newIndices.length; axis++)if (elidedAxes.indexOf(axis) > -1) newIndices[axis] = Number.MAX_SAFE_INTEGER;
    else {
        const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
        let originalValue = originalEnd[originalAxis];
        if (endMask & 1 << originalAxis) originalValue = Number.MAX_SAFE_INTEGER;
        newIndices[axis] = originalValue;
    }
    for(let i = 0; i < newIndices.length; i++){
        // Handle negative indices
        const axisSize = inputShape[i];
        if (newIndices[i] < 0) newIndices[i] += axisSize;
        newIndices[i] = _util.clamp(0, newIndices[i], inputShape[i]);
    }
    return newIndices;
}
function stridesForAxis(strides, axis, ellipsisMask) {
    let stride = strides[axis];
    if (ellipsisMask & 1 << axis || stride == null) stride = 1;
    return stride;
}
function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let start = startIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or the begin index is not set
    // for the axis.
    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
        if (stride > 0) // Forward iteration - use the first element. These values will get
        // clamped below (Note: We could have set them to 0 and axis_size-1, but
        // use lowest() and max() to maintain symmetry with StopForAxis())
        start = Number.MIN_SAFE_INTEGER;
        else // Backward iteration - use the last element.
        start = Number.MAX_SAFE_INTEGER;
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (start < 0) start += axisSize;
    // Clamping
    start = _util.clamp(0, start, axisSize - 1);
    return start;
}
function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let stop = stopIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or if the stop index is not
    // set for this axis.
    if (endMask & 1 << axis || ellipsisMask & 1 << axis || stop == null) {
        if (stride > 0) // Forward iteration - use the last element. These values will get
        // clamped below
        stop = Number.MAX_SAFE_INTEGER;
        else // Backward iteration - use the first element.
        stop = Number.MIN_SAFE_INTEGER;
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (stop < 0) stop += axisSize;
    // Clamping
    // Because the end index points one past the last element, we need slightly
    // different clamping ranges depending on the direction.
    if (stride > 0) // Forward iteration
    stop = _util.clamp(0, stop, axisSize);
    else // Backward iteration
    stop = _util.clamp(-1, stop, axisSize - 1);
    return stop;
}
function isSliceContinous(shape, begin, size) {
    // Index of the first axis that has size > 1.
    let firstNonOneAxis = size.length;
    for(let i = 0; i < size.length; i++)if (size[i] > 1) {
        firstNonOneAxis = i;
        break;
    }
    for(let i1 = firstNonOneAxis + 1; i1 < size.length; i1++){
        if (begin[i1] > 0 || size[i1] !== shape[i1]) return false;
    }
    return true;
}
function computeFlatOffset(begin, strides) {
    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
    for(let i = 0; i < begin.length - 1; i++)flatOffset += begin[i] * strides[i];
    return flatOffset;
}
function parseSliceParams(x, begin, size) {
    // The following logic allows for more ergonomic calls.
    let begin_;
    const xRank = x.shape.length;
    if (typeof begin === "number") begin_ = [
        begin,
        ...new Array(xRank - 1).fill(0)
    ];
    else if (begin.length < xRank) begin_ = begin.concat(new Array(xRank - begin.length).fill(0));
    else begin_ = begin.slice();
    begin_.forEach((d)=>{
        _util.assert(d !== -1, ()=>"slice() does not support negative begin indexing.");
    });
    let size_;
    if (size == null) size_ = new Array(xRank).fill(-1);
    else if (typeof size === "number") size_ = [
        size,
        ...new Array(xRank - 1).fill(-1)
    ];
    else if (size.length < xRank) size_ = size.concat(new Array(xRank - size.length).fill(-1));
    else size_ = size;
    size_ = size_.map((d, i)=>{
        if (d >= 0) return d;
        else {
            _util.assert(d === -1, ()=>`Negative size values should be exactly -1 but got ` + `${d} for the slice() size at index ${i}.`);
            return x.shape[i] - begin_[i];
        }
    });
    return [
        begin_,
        size_
    ];
}
function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
    let stridesNonNull;
    if (strides == null) {
        stridesNonNull = new Array(begin.length);
        stridesNonNull.fill(1);
    } else stridesNonNull = strides;
    // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask
    // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power
    // of 2. When i is a power of 2, i & (i - 1) is always 0.
    // Also ref:
    // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
    if (ellipsisMask != null && (ellipsisMask & ellipsisMask - 1) !== 0) throw new Error("Multiple ellipses in slice is not allowed.");
    // Step 1: Account for ellipsis and new axis.
    // Check for ellipsis and count how many non-newaxis there are after.
    let ellipsisSeen = false;
    const sparseSpec = {
        dims: stridesNonNull.length,
        numAddAxisAfterEllipsis: 0,
        begin: begin.slice(),
        end: end.slice(),
        strides: stridesNonNull.slice(),
        beginMask,
        endMask,
        ellipsisMask,
        newAxisMask,
        shrinkAxisMask
    };
    for(let i = 0; i < sparseSpec.dims; i++){
        if (ellipsisSeen && (1 << i & newAxisMask) !== 0) sparseSpec.numAddAxisAfterEllipsis++;
        if (1 << i & ellipsisMask) ellipsisSeen = true;
    }
    // If no ellipsis insert one at the end.
    if (!ellipsisSeen) {
        sparseSpec.ellipsisMask |= 1 << sparseSpec.dims;
        sparseSpec.dims++; // this effects loop iteration below
    }
    // Step 2: Make a sparse spec into a full index spec.
    //
    // The sparse spec deos not correspond to the number of dimensions.
    // Make a dense spec that cooresponds to the number of dimensions.
    //
    // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to
    // produce the missing beginMask for the first two dimensions i.e. from
    // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),
    // endMask = 7 (111).
    const denseSpec = {
        dims: xShape.length,
        beginMask: 0,
        endMask: 0,
        beginValid: false,
        endValid: false
    };
    buildDenseSpec(sparseSpec, denseSpec);
    // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit
    // and bounds check.
    let isIdentity = true;
    let sliceDim0 = true;
    let isSimpleSlice = true;
    const processingShape = [];
    const finalShape = [];
    for(let i1 = 0; i1 < xShape.length; ++i1){
        if (denseSpec.strides[i1] === 0) throw Error(`strides[${i1}] must be non-zero`);
        const shrinkI = !!(denseSpec.shrinkAxisMask & 1 << i1);
        const dimI = xShape[i1];
        if (dimI === -1) {
            processingShape.push(shrinkI ? 1 : -1);
            continue;
        }
        const masks = [
            denseSpec.beginMask & 1 << i1,
            denseSpec.endMask & 1 << i1
        ];
        const validRange = [
            denseSpec.strides[i1] > 0 ? 0 : -1,
            denseSpec.strides[i1] > 0 ? dimI : dimI - 1
        ];
        if (shrinkI && denseSpec.strides[i1] <= 0) throw Error("only stride 1 allowed on non-range indexing.");
        isSimpleSlice = isSimpleSlice && denseSpec.strides[i1] === 1;
        const beginAndEndMasked = !!(denseSpec.beginMask & 1 << i1 && denseSpec.endMask & 1 << i1);
        if (denseSpec.beginValid && denseSpec.endValid) {
            if (shrinkI) {
                // If we are shrinking, the end index is now possibly incorrect. In
                // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.
                // and canonical puts these to n-1 and 0, which implies a degenerate
                // interval. Fortunately, it is now safe to re-create end as begin + 1.
                const xFwd = denseSpec.begin[i1] < 0 ? dimI + denseSpec.begin[i1] : denseSpec.begin[i1];
                denseSpec.begin[i1] = xFwd;
                denseSpec.end[i1] = denseSpec.begin[i1] + 1;
                if (xFwd < 0 || xFwd >= dimI) throw Error(`slice index ${denseSpec.begin[i1]} of dimension ${i1} out of bounds.`);
            } else {
                denseSpec.begin[i1] = canonical(denseSpec.begin[i1], 0, denseSpec.strides[i1], dimI, masks, validRange);
                denseSpec.end[i1] = canonical(denseSpec.end[i1], 1, denseSpec.strides[i1], dimI, masks, validRange);
            }
            // Update optimization values
            const takeAllInDimension = denseSpec.strides[i1] === 1 && denseSpec.begin[i1] === 0 && denseSpec.end[i1] === dimI;
            isIdentity = isIdentity && takeAllInDimension;
            sliceDim0 = sliceDim0 && (i1 === 0 && denseSpec.strides[i1] === 1 || takeAllInDimension);
        } else {
            isIdentity = isIdentity && denseSpec.strides[i1] === 1 && beginAndEndMasked;
            sliceDim0 = sliceDim0 && (i1 === 0 && denseSpec.strides[i1] === 1 || beginAndEndMasked);
        }
        // Compute the processing shape (the intermediate Eigen will produce)
        let intervalLength;
        let knownInterval = false;
        if (denseSpec.beginValid && denseSpec.endValid) {
            intervalLength = denseSpec.end[i1] - denseSpec.begin[i1];
            knownInterval = true;
        } else if (shrinkI) {
            // The dimension is still known as 1 for the processingShape, but will be
            // discarded for the final shape.
            intervalLength = 1;
            knownInterval = true;
        } else if (beginAndEndMasked) // Even if we don't have values for begin or end, we do know that this
        // dimension covers the whole interval. If we have shape information for
        // this dimension, that tells us the interval length.
        {
            if (dimI >= 0) {
                if (denseSpec.strides[i1] < 0) intervalLength = -dimI;
                else intervalLength = dimI;
                knownInterval = true;
            }
        }
        if (knownInterval) {
            let sizeI;
            // Hold zero if the interval is degenerate, otherwise account for
            // remainder
            if (intervalLength === 0 || intervalLength < 0 !== denseSpec.strides[i1] < 0) sizeI = 0;
            else sizeI = Math.trunc(intervalLength / denseSpec.strides[i1]) + (intervalLength % denseSpec.strides[i1] !== 0 ? 1 : 0);
            processingShape.push(sizeI);
        } else processingShape.push(-1);
    }
    // Step 4: Compute the final shape
    //
    // newAxis will increase dimension by 1 (with a one-size dimension)
    // slices like foo[3, ...] will reduce dimension by 1.
    // This cannot be done earlier, because it depends on Step 3.
    for(let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim){
        const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];
        if (gatherIndex >= 0) finalShape.push(processingShape[gatherIndex]);
        else if (gatherIndex === NEW_AXIS) finalShape.push(1);
    }
    const finalShapeSparse = finalShape.filter((dim, i)=>denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);
    return {
        finalShapeSparse,
        finalShape,
        isIdentity,
        sliceDim0,
        isSimpleSlice,
        begin: denseSpec.begin,
        end: denseSpec.end,
        strides: denseSpec.strides
    };
}
function buildDenseSpec(sparse, dense) {
    dense.beginMask = 0;
    dense.endMask = 0;
    dense.shrinkAxisMask = 0;
    let fullIndex = 0;
    dense.beginValid = sparse.begin != null;
    dense.endValid = sparse.end != null;
    dense.begin = new Array(dense.dims);
    dense.end = new Array(dense.dims);
    dense.strides = new Array(dense.dims);
    dense.finalShapeGatherIndices = [];
    dense.finalShapeGatherIndicesSparse = [];
    dense.inputShapeGatherIndicesSparse = new Array(dense.dims);
    for(let i = 0; i < sparse.dims; i++){
        if (1 << i & sparse.ellipsisMask) {
            // Only the bit that has ellipsis will fall in this condition.
            // Expand the ellipsis into the appropriate indices
            // Note: this only works because we guaranteed one ellipsis.
            const nextIndex = Math.min(dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis, dense.dims);
            for(; fullIndex < nextIndex; fullIndex++){
                // newAxis aren't real axis so you have to skip.
                dense.begin[fullIndex] = 0;
                dense.end[fullIndex] = 0;
                dense.strides[fullIndex] = 1;
                dense.beginMask |= 1 << fullIndex;
                dense.endMask |= 1 << fullIndex;
                dense.finalShapeGatherIndices.push(fullIndex);
                dense.finalShapeGatherIndicesSparse.push(-1);
                dense.inputShapeGatherIndicesSparse[fullIndex] = i;
            }
        } else if (1 << i & sparse.newAxisMask) {
            // Only the bit that has newAxis will fall in this condition.
            dense.finalShapeGatherIndices.push(NEW_AXIS);
            dense.finalShapeGatherIndicesSparse.push(-1);
        } else {
            if (fullIndex === dense.begin.length) throw Error(`Index out of range using input dim ${fullIndex}; input ` + `has only ${dense.dims} dims, ${dense.begin.length}.`);
            // Gather slicing spec into appropriate index.
            if (sparse.begin != null) dense.begin[fullIndex] = sparse.begin[i];
            if (sparse.end != null) dense.end[fullIndex] = sparse.end[i];
            dense.strides[fullIndex] = sparse.strides[i];
            if (sparse.beginMask & 1 << i) dense.beginMask |= 1 << fullIndex;
            if (sparse.endMask & 1 << i) dense.endMask |= 1 << fullIndex;
            // If shrink, record where to get the dimensionality from (i.e. newAxis)
            // creates a fake 1 size dimension. Also remember shrink axis (now in
            // dense form) so we can ignore dense.end below.
            if (sparse.shrinkAxisMask & 1 << i) {
                dense.finalShapeGatherIndices.push(SHRINK_AXIS);
                dense.finalShapeGatherIndicesSparse.push(-1);
                dense.shrinkAxisMask |= 1 << fullIndex;
            } else {
                dense.finalShapeGatherIndices.push(fullIndex);
                // Remember that where in the sparse shape the dense dim comes from.
                dense.finalShapeGatherIndicesSparse.push(i);
            }
            dense.inputShapeGatherIndicesSparse[fullIndex] = i;
            fullIndex++;
        }
    }
}
function canonical(x, c, strideI, dimI, masks, validRange) {
    if (masks[c]) return strideI > 0 ? validRange[c] : validRange[c + 1 & 1];
    else {
        const xFwd = x < 0 ? dimI + x : x; // make negative indices positive
        return xFwd < validRange[0] ? validRange[0] : xFwd > validRange[1] ? validRange[1] : xFwd;
    }
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wKqJz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */ parcelHelpers.export(exports, "Serializable", ()=>Serializable);
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */ parcelHelpers.export(exports, "SerializationMap", ()=>SerializationMap);
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */ parcelHelpers.export(exports, "registerClass", ()=>registerClass);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
class Serializable {
    /**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */ getClassName() {
        return this.constructor.className;
    }
    /**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     */ /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config);
    }
}
class SerializationMap {
    constructor(){
        this.classNameMap = {};
    }
    /**
     * Returns the singleton instance of the map.
     */ static getMap() {
        if (SerializationMap.instance == null) SerializationMap.instance = new SerializationMap();
        return SerializationMap.instance;
    }
    /**
     * Registers the class as serializable.
     */ static register(cls) {
        SerializationMap.getMap().classNameMap[cls.className] = [
            cls,
            cls.fromConfig
        ];
    }
}
function registerClass(cls) {
    (0, _util.assert)(cls.className != null, ()=>`Class being registered does not have the static className ` + `property defined.`);
    (0, _util.assert)(typeof cls.className === "string", ()=>`className is required to be a string, but got type ` + typeof cls.className);
    (0, _util.assert)(cls.className.length > 0, ()=>`Class being registered has an empty-string as its className, ` + `which is disallowed.`);
    SerializationMap.register(cls);
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tuFM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEST_EPSILON_FLOAT16", ()=>TEST_EPSILON_FLOAT16);
parcelHelpers.export(exports, "expectArraysClose", ()=>expectArraysClose);
parcelHelpers.export(exports, "testEpsilon", ()=>testEpsilon);
parcelHelpers.export(exports, "expectPromiseToFail", ()=>expectPromiseToFail);
parcelHelpers.export(exports, "expectArraysEqual", ()=>expectArraysEqual);
parcelHelpers.export(exports, "expectNumbersClose", ()=>expectNumbersClose);
parcelHelpers.export(exports, "expectValuesInRange", ()=>expectValuesInRange);
parcelHelpers.export(exports, "expectArrayBuffersEqual", ()=>expectArrayBuffersEqual);
/** Encodes strings into utf-8 bytes. */ parcelHelpers.export(exports, "encodeStrings", ()=>encodeStrings);
/** Creates an HTMLVideoElement with autoplay-friendly default settings. */ parcelHelpers.export(exports, "createVideoElement", ()=>createVideoElement);
parcelHelpers.export(exports, "play", ()=>play);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _tensorUtilEnv = require("./tensor_util_env");
var _util = require("./util");
const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon == null) epsilon = testEpsilon();
    return expectArraysPredicate(actual, expected, (a, b)=>areClose(a, b, epsilon));
}
function testEpsilon() {
    return (0, _engine.ENGINE).backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
}
function expectArraysPredicate(actual, expected, predicate) {
    let checkClassType = true;
    if ((0, _util.isTypedArray)(actual) || (0, _util.isTypedArray)(expected)) checkClassType = false;
    if ((0, _util.isTypedArray)(actual) && (0, _util.isTypedArray)(expected)) checkClassType = true;
    if (checkClassType) {
        const aType = actual.constructor.name;
        const bType = expected.constructor.name;
        if (aType !== bType) throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);
    }
    if (Array.isArray(actual) && Array.isArray(expected)) {
        const actualShape = (0, _tensorUtilEnv.inferShape)(actual);
        const expectedShape = (0, _tensorUtilEnv.inferShape)(expected);
        if (!(0, _util.arraysEqual)(actualShape, expectedShape)) throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
    }
    const actualFlat = (0, _util.isTypedArray)(actual) ? actual : (0, _util.flatten)(actual);
    const expectedFlat = (0, _util.isTypedArray)(expected) ? expected : (0, _util.flatten)(expected);
    if (actualFlat.length !== expectedFlat.length) throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    for(let i = 0; i < expectedFlat.length; ++i){
        const a = actualFlat[i];
        const e = expectedFlat[i];
        if (!predicate(a, e)) throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    }
    if (typeof expect !== "undefined") expect().nothing();
}
function expectPromiseToFail(fn, done) {
    fn().then(()=>done.fail(), ()=>done());
    if (typeof expect !== "undefined") expect().nothing();
}
function expectArraysEqual(actual, expected) {
    const exp = typeof expected === "string" || typeof expected === "number" || typeof expected === "boolean" ? [
        expected
    ] : expected;
    if ((0, _util.isString)(actual) || (0, _util.isString)(actual[0]) || (0, _util.isString)(expected) || (0, _util.isString)(expected[0])) // tslint:disable-next-line: triple-equals
    return expectArraysPredicate(actual, exp, (a, b)=>a == b);
    return expectArraysPredicate(actual, expected, (a, b)=>areClose(a, b, 0));
}
function expectNumbersClose(a, e, epsilon) {
    if (epsilon == null) epsilon = testEpsilon();
    if (!areClose(a, e, epsilon)) throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
    if (typeof expect !== "undefined") expect().nothing();
}
function areClose(a, e, epsilon) {
    if (!isFinite(a) && !isFinite(e)) return true;
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) return false;
    return true;
}
function expectValuesInRange(actual, low, high) {
    for(let i = 0; i < actual.length; i++){
        if (actual[i] < low || actual[i] > high) throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
    }
}
function expectArrayBuffersEqual(actual, expected) {
    // Safari does not like comparing ArrayBuffers directly. Wrapping in
    // a Float32Array solves this issue.
    const actualArray = new Float32Array(actual);
    const expectedArray = new Float32Array(expected);
    if (actualArray.length !== expectedArray.length) throw new Error("Expected ArrayBuffer to be of length " + `${expectedArray.length}, but it was ${actualArray.length}`);
    for(let i = 0; i < expectedArray.length; i++){
        if (actualArray[i] !== expectedArray[i]) throw new Error(`Expected ArrayBuffer value at ${i} to be ` + `${expectedArray[i]} but got ${actualArray[i]} instead`);
    }
}
function encodeStrings(a) {
    for(let i = 0; i < a.length; i++){
        const val = a[i];
        if (Array.isArray(val)) encodeStrings(val);
        else a[i] = (0, _util.encodeString)(val);
    }
    return a;
}
function createVideoElement(source) {
    const video = document.createElement("video");
    if ("playsInline" in video) // tslint:disable-next-line:no-any
    video.playsInline = true;
    video.muted = true;
    video.loop = true;
    video.style.position = "fixed";
    video.style.left = "0px";
    video.style.top = "0px";
    video.preload = "auto";
    video.appendChild(source);
    return new Promise((resolve)=>{
        video.addEventListener("loadeddata", (_)=>resolve(video));
        video.load();
    });
}
async function play(video) {
    await video.play();
    if ("requestVideoFrameCallback" in video) await new Promise((resolve)=>{
        // tslint:disable-next-line:no-any
        video.requestVideoFrameCallback(resolve);
    });
}

},{"./engine":"1aEvR","./tensor_util_env":"fsyzK","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"v1SEt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "3.20.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CK58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice_util", ()=>_sliceUtil);
parcelHelpers.export(exports, "upcastType", ()=>(0, _types.upcastType));
parcelHelpers.export(exports, "segment_util", ()=>_segmentUtil);
parcelHelpers.export(exports, "fromUint8ToStringArray", ()=>fromUint8ToStringArray);
parcelHelpers.export(exports, "fromStringArrayToUint8", ()=>fromStringArrayToUint8);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
var _sliceUtil = require("../ops/slice_util");
var _segmentUtil = require("../ops/segment_util");
// Utilities needed by backend consumers of tf-core.
var _axisUtil = require("../ops/axis_util");
parcelHelpers.exportAll(_axisUtil, exports);
var _broadcastUtil = require("../ops/broadcast_util");
parcelHelpers.exportAll(_broadcastUtil, exports);
var _concatUtil = require("../ops/concat_util");
parcelHelpers.exportAll(_concatUtil, exports);
var _convUtil = require("../ops/conv_util");
parcelHelpers.exportAll(_convUtil, exports);
var _fusedUtil = require("../ops/fused_util");
parcelHelpers.exportAll(_fusedUtil, exports);
var _raggedToDenseUtil = require("../ops/ragged_to_dense_util");
parcelHelpers.exportAll(_raggedToDenseUtil, exports);
var _reduceUtil = require("../ops/reduce_util");
parcelHelpers.exportAll(_reduceUtil, exports);
var _types = require("../types");
var _rotateUtil = require("../ops/rotate_util");
parcelHelpers.exportAll(_rotateUtil, exports);
var _arrayOpsUtil = require("../ops/array_ops_util");
parcelHelpers.exportAll(_arrayOpsUtil, exports);
var _gatherNdUtil = require("../ops/gather_nd_util");
parcelHelpers.exportAll(_gatherNdUtil, exports);
var _scatterNdUtil = require("../ops/scatter_nd_util");
parcelHelpers.exportAll(_scatterNdUtil, exports);
var _seluUtil = require("../ops/selu_util");
parcelHelpers.exportAll(_seluUtil, exports);
parcelHelpers.exportAll(_fusedUtil, exports);
var _erfUtil = require("../ops/erf_util");
parcelHelpers.exportAll(_erfUtil, exports);
var _log = require("../log");
parcelHelpers.exportAll(_log, exports);
var _complexUtil = require("../backends/complex_util");
parcelHelpers.exportAll(_complexUtil, exports);
var _einsumUtil = require("../backends/einsum_util");
parcelHelpers.exportAll(_einsumUtil, exports);
var _splitUtil = require("../ops/split_util");
parcelHelpers.exportAll(_splitUtil, exports);
var _sparseFillEmptyRowsUtil = require("../ops/sparse/sparse_fill_empty_rows_util");
parcelHelpers.exportAll(_sparseFillEmptyRowsUtil, exports);
var _sparseReshapeUtil = require("../ops/sparse/sparse_reshape_util");
parcelHelpers.exportAll(_sparseReshapeUtil, exports);
var _sparseSegmentReductionUtil = require("../ops/sparse/sparse_segment_reduction_util");
parcelHelpers.exportAll(_sparseSegmentReductionUtil, exports);
function fromUint8ToStringArray(vals) {
    try {
        // Decode the bytes into string.
        return vals.map((val)=>(0, _util.decodeString)(val));
    } catch (err) {
        throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);
    }
}
function fromStringArrayToUint8(strings) {
    return strings.map((s)=>(0, _util.encodeString)(s));
}

},{"../util":"9v6Fb","../ops/slice_util":"3jgPu","../ops/segment_util":"hWYBC","../ops/axis_util":"1A9rc","../ops/broadcast_util":"kQqEF","../ops/concat_util":"4F290","../ops/conv_util":"oHP2H","../ops/fused_util":"9OXSQ","../ops/ragged_to_dense_util":"ebaqG","../ops/reduce_util":"6f6kp","../types":"aToA9","../ops/rotate_util":"bpkZ3","../ops/array_ops_util":"lpuBH","../ops/gather_nd_util":"6p9Tw","../ops/scatter_nd_util":"h9rnV","../ops/selu_util":"11lT6","../ops/erf_util":"jWo3R","../log":"fT4Tx","../backends/complex_util":"bKdDq","../backends/einsum_util":"l83yU","../ops/split_util":"ahiAQ","../ops/sparse/sparse_fill_empty_rows_util":"35ffZ","../ops/sparse/sparse_reshape_util":"gmJN9","../ops/sparse/sparse_segment_reduction_util":"4gaA2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWYBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "segOpComputeOptimalWindowSize", ()=>segOpComputeOptimalWindowSize);
parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
parcelHelpers.export(exports, "collectGatherOpShapeInfo", ()=>collectGatherOpShapeInfo);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
var _reduceUtil = require("./reduce_util");
function segOpComputeOptimalWindowSize(inSize, numSegments) {
    let done = false;
    let res;
    if (inSize <= (0, _reduceUtil.PARALLELIZE_THRESHOLD)) {
        res = inSize;
        done = true;
    } else res = (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
    while(!done)if (res > numSegments || res === inSize) done = true;
    else res = (0, _util.nearestDivisor)(inSize, res + 1);
    return res;
}
function computeOutShape(aShape, axis, numSegments) {
    const outShape = [];
    const rank = aShape.length;
    for(let dim = 0; dim < rank; dim++)if (dim !== axis) outShape.push(aShape[dim]);
    else outShape.push(numSegments);
    return outShape;
}
function collectGatherOpShapeInfo(x, indices, axis, batchDims) {
    const indicesRank = indices.shape.length;
    const xRank = x.shape.length;
    if (batchDims !== 0) {
        if (batchDims < -indicesRank || batchDims > indicesRank) throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);
    }
    if (batchDims < 0) batchDims += indicesRank;
    if (batchDims > xRank) throw new Error(`batchDims (${batchDims}) must be less than rank(x) (
    ${xRank}).`);
    if (axis < batchDims) throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);
    for(let i = 0; i < batchDims; ++i){
        if (x.shape[i] !== indices.shape[i]) throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);
    }
    const dimSize = x.shape[axis];
    const outputShape = [];
    let batchSize = 1;
    let outerSize = 1;
    let sliceSize = 1;
    for(let i1 = 0; i1 < batchDims; ++i1){
        outputShape.push(x.shape[i1]);
        batchSize *= x.shape[i1];
    }
    for(let i2 = batchDims; i2 < axis; i2++){
        outputShape.push(x.shape[i2]);
        outerSize *= x.shape[i2];
    }
    for(let i3 = batchDims; i3 < indicesRank; i3++)outputShape.push(indices.shape[i3]);
    for(let i4 = axis + 1; i4 < xRank; i4++){
        outputShape.push(x.shape[i4]);
        sliceSize *= x.shape[i4];
    }
    return {
        batchSize,
        sliceSize,
        outerSize,
        dimSize,
        outputShape
    };
}

},{"../util":"9v6Fb","./reduce_util":"6f6kp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6f6kp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PARALLELIZE_THRESHOLD", ()=>PARALLELIZE_THRESHOLD);
parcelHelpers.export(exports, "computeOptimalWindowSize", ()=>computeOptimalWindowSize);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */ var _util = require("../util");
const PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= PARALLELIZE_THRESHOLD) return inSize;
    return (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1A9rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */ parcelHelpers.export(exports, "axesAreInnerMostDims", ()=>axesAreInnerMostDims);
parcelHelpers.export(exports, "combineLocations", ()=>combineLocations);
parcelHelpers.export(exports, "computeOutAndReduceShapes", ()=>computeOutAndReduceShapes);
parcelHelpers.export(exports, "expandShapeToKeepDim", ()=>expandShapeToKeepDim);
parcelHelpers.export(exports, "assertAxesAreInnerMostDims", ()=>assertAxesAreInnerMostDims);
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */ parcelHelpers.export(exports, "getAxesPermutation", ()=>getAxesPermutation);
/** Returns the axes permutation that undoes the original permutation. */ parcelHelpers.export(exports, "getUndoAxesPermutation", ()=>getUndoAxesPermutation);
parcelHelpers.export(exports, "getInnerMostAxes", ()=>getInnerMostAxes);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function axesAreInnerMostDims(axes, rank) {
    for(let i = 0; i < axes.length; ++i){
        if (axes[axes.length - i - 1] !== rank - 1 - i) return false;
    }
    return true;
}
function combineLocations(outputLoc, reduceLoc, axes) {
    const rank = outputLoc.length + reduceLoc.length;
    const loc = [];
    let outIdx = 0;
    let reduceIdx = 0;
    for(let dim = 0; dim < rank; dim++)if (axes.indexOf(dim) === -1) loc.push(outputLoc[outIdx++]);
    else loc.push(reduceLoc[reduceIdx++]);
    return loc;
}
function computeOutAndReduceShapes(aShape, axes) {
    const outShape = [];
    const rank = aShape.length;
    for(let dim = 0; dim < rank; dim++)if (axes.indexOf(dim) === -1) outShape.push(aShape[dim]);
    const reduceShape = axes.map((dim)=>aShape[dim]);
    return [
        outShape,
        reduceShape
    ];
}
function expandShapeToKeepDim(shape, axes) {
    const reduceSubShape = axes.map((x)=>1);
    return combineLocations(shape, reduceSubShape, axes);
}
function assertAxesAreInnerMostDims(msg, axes, rank) {
    _util.assert(axesAreInnerMostDims(axes, rank), ()=>`${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);
}
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) return null;
    const result = [];
    for(let i = 0; i < rank; ++i)if (axes.indexOf(i) === -1) result.push(i);
    axes.forEach((axis)=>result.push(axis));
    return result;
}
function getUndoAxesPermutation(axes) {
    return axes.map((axis, i)=>[
            i,
            axis
        ]).sort((a, b)=>a[1] - b[1]).map((x)=>x[0]);
}
function getInnerMostAxes(numAxes, rank) {
    const res = [];
    for(let i = rank - numAxes; i < rank; ++i)res.push(i);
    return res;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4F290":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertParamsConsistent", ()=>assertParamsConsistent);
parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function assertParamsConsistent(shapes, axis) {
    const rank = shapes[0].length;
    shapes.forEach((shape, i)=>{
        _util.assert(shape.length === rank, ()=>`Error in concat${rank}D: rank of tensors[${i}] must be the same ` + `as the rank of the rest (${rank})`);
    });
    _util.assert(axis >= 0 && axis < rank, ()=>`Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
    const firstShape = shapes[0];
    shapes.forEach((shape, i)=>{
        for(let r = 0; r < rank; r++)_util.assert(r === axis || shape[r] === firstShape[r], ()=>`Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` + `does not match the shape of the rest (${firstShape}) ` + `along the non-concatenated axis ${i}.`);
    });
}
function computeOutShape(shapes, axis) {
    const outputShape = shapes[0].slice();
    for(let i = 1; i < shapes.length; i++)outputShape[axis] += shapes[i][axis];
    return outputShape;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"oHP2H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */ parcelHelpers.export(exports, "computeDilation2DInfo", ()=>computeDilation2DInfo);
parcelHelpers.export(exports, "computePool2DInfo", ()=>computePool2DInfo);
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */ parcelHelpers.export(exports, "computePool3DInfo", ()=>computePool3DInfo);
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */ parcelHelpers.export(exports, "computeConv2DInfo", ()=>computeConv2DInfo);
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */ parcelHelpers.export(exports, "computeConv3DInfo", ()=>computeConv3DInfo);
parcelHelpers.export(exports, "computeDefaultPad", ()=>computeDefaultPad);
parcelHelpers.export(exports, "tupleValuesAreOne", ()=>tupleValuesAreOne);
parcelHelpers.export(exports, "eitherStridesOrDilationsAreOne", ()=>eitherStridesOrDilationsAreOne);
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */ parcelHelpers.export(exports, "convertConv2DDataFormat", ()=>convertConv2DDataFormat);
/**
 * Check validity of pad when using dimRoundingMode.
 * @param opDesc A string of op description
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @throws unknown padding parameter
 */ parcelHelpers.export(exports, "checkPadOnDimRoundingMode", ()=>checkPadOnDimRoundingMode);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = "NHWC", dilations) {
    // `computerConv2DInfo` require filterShape to be in the dimension of:
    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
    // outDepth, it should have the same depth as the input.
    // Input shape: [batch, height, width, inChannels]
    const inputChannels = inputShape[3];
    const $filterShape = [
        ...filterShape,
        inputChannels
    ];
    const $dataFormat = convertConv2DDataFormat(dataFormat);
    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null, null, $dataFormat);
}
function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = "channelsLast") {
    const [filterHeight, filterWidth] = parseTupleParam(filterSize);
    let filterShape;
    if (dataFormat === "channelsLast") filterShape = [
        filterHeight,
        filterWidth,
        inShape[3],
        inShape[3]
    ];
    else if (dataFormat === "channelsFirst") filterShape = [
        filterHeight,
        filterWidth,
        inShape[1],
        inShape[1]
    ];
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = "NDHWC") {
    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
    let filterShape;
    let $dataFormat;
    if (dataFormat === "NDHWC") {
        $dataFormat = "channelsLast";
        filterShape = [
            filterDepth,
            filterHeight,
            filterWidth,
            inShape[4],
            inShape[4]
        ];
    } else if (dataFormat === "NCDHW") {
        $dataFormat = "channelsFirst";
        filterShape = [
            filterDepth,
            filterHeight,
            filterWidth,
            inShape[1],
            inShape[1]
        ];
    } else throw new Error(`Unknown dataFormat ${dataFormat}`);
    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = "channelsLast") {
    let [batchSize, inHeight, inWidth, inChannels] = [
        -1,
        -1,
        -1,
        -1
    ];
    if (dataFormat === "channelsLast") [batchSize, inHeight, inWidth, inChannels] = inShape;
    else if (dataFormat === "channelsFirst") [batchSize, inChannels, inHeight, inWidth] = inShape;
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    const [filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideHeight, strideWidth] = parseTupleParam(strides);
    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo , outHeight , outWidth  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === "channelsFirst") outShape = [
        batchSize,
        outChannels,
        outHeight,
        outWidth
    ];
    else if (dataFormat === "channelsLast") outShape = [
        batchSize,
        outHeight,
        outWidth,
        outChannels
    ];
    return {
        batchSize,
        dataFormat,
        inHeight,
        inWidth,
        inChannels,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideHeight,
        strideWidth,
        filterHeight,
        filterWidth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = "channelsLast", roundingMode) {
    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [
        -1,
        -1,
        -1,
        -1,
        -1
    ];
    if (dataFormat === "channelsLast") [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
    else if (dataFormat === "channelsFirst") [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo , outDepth , outHeight , outWidth  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === "channelsFirst") outShape = [
        batchSize,
        outChannels,
        outDepth,
        outHeight,
        outWidth
    ];
    else if (dataFormat === "channelsLast") outShape = [
        batchSize,
        outDepth,
        outHeight,
        outWidth,
        outChannels
    ];
    return {
        batchSize,
        dataFormat,
        inDepth,
        inHeight,
        inWidth,
        inChannels,
        outDepth,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideDepth,
        strideHeight,
        strideWidth,
        filterDepth,
        filterHeight,
        filterWidth,
        effectiveFilterDepth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationDepth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
    if (zeroPad == null) zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    const inputRows = inShape[0];
    const inputCols = inShape[1];
    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    return [
        outputRows,
        outputCols
    ];
}
function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
    if (zeroPad == null) zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    const inputDepth = inShape[0];
    const inputRows = inShape[1];
    const inputCols = inShape[2];
    const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    return [
        outputDepths,
        outputRows,
        outputCols,
        outChannels
    ];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
function parseTupleParam(param) {
    if (typeof param === "number") return [
        param,
        param,
        param
    ];
    if (param.length === 2) return [
        param[0],
        param[1],
        1
    ];
    return param;
}
function parse3TupleParam(param) {
    return typeof param === "number" ? [
        param,
        param,
        param
    ] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */ function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) return filterSize;
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
    let padInfo;
    let outHeight;
    let outWidth;
    if (typeof pad === "number") {
        const padType = pad === 0 ? "VALID" : "NUMBER";
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            type: padType
        };
        const outShape = computeOutputShape2D([
            inHeight,
            inWidth
        ], filterHeight, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    } else if (pad === "same") {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = {
            top,
            bottom,
            left,
            right,
            type: "SAME"
        };
    } else if (pad === "valid") {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            type: "VALID"
        };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    } else if (typeof pad === "object") {
        const top1 = dataFormat === "channelsLast" ? pad[1][0] : pad[2][0];
        const bottom1 = dataFormat === "channelsLast" ? pad[1][1] : pad[2][1];
        const left1 = dataFormat === "channelsLast" ? pad[2][0] : pad[3][0];
        const right1 = dataFormat === "channelsLast" ? pad[2][1] : pad[3][1];
        const padType1 = top1 === 0 && bottom1 === 0 && left1 === 0 && right1 === 0 ? "VALID" : "EXPLICIT";
        padInfo = {
            top: top1,
            bottom: bottom1,
            left: left1,
            right: right1,
            type: padType1
        };
        outHeight = round((inHeight - filterHeight + top1 + bottom1) / strideHeight + 1, roundingMode);
        outWidth = round((inWidth - filterWidth + left1 + right1) / strideWidth + 1, roundingMode);
    } else throw Error(`Unknown padding parameter: ${pad}`);
    return {
        padInfo,
        outHeight,
        outWidth
    };
}
function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
    let padInfo;
    let outDepth;
    let outHeight;
    let outWidth;
    if (typeof pad === "number") {
        const padType = pad === 0 ? "VALID" : "NUMBER";
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            front: pad,
            back: pad,
            type: padType
        };
        const outShape = computeOutputShape4D([
            inDepth,
            inHeight,
            inWidth,
            1
        ], filterDepth, 1, strideDepth, pad, roundingMode);
        outDepth = outShape[0];
        outHeight = outShape[1];
        outWidth = outShape[2];
    } else if (pad === "same") {
        outDepth = Math.ceil(inDepth / strideDepth);
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        const front = Math.floor(padAlongDepth / 2);
        const back = padAlongDepth - front;
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = {
            top,
            bottom,
            left,
            right,
            front,
            back,
            type: "SAME"
        };
    } else if (pad === "valid") {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            front: 0,
            back: 0,
            type: "VALID"
        };
        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    } else throw Error(`Unknown padding parameter: ${pad}`);
    return {
        padInfo,
        outDepth,
        outHeight,
        outWidth
    };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */ function round(value, roundingMode) {
    if (!roundingMode) return Math.trunc(value);
    switch(roundingMode){
        case "round":
            // used for Caffe Conv
            return Math.round(value);
        case "ceil":
            // used for Caffe Pool
            return Math.ceil(value);
        case "floor":
            return Math.floor(value);
        default:
            throw new Error(`Unknown roundingMode ${roundingMode}`);
    }
}
function tupleValuesAreOne(param) {
    const [dimA, dimB, dimC] = parseTupleParam(param);
    return dimA === 1 && dimB === 1 && dimC === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
function convertConv2DDataFormat(dataFormat) {
    if (dataFormat === "NHWC") return "channelsLast";
    else if (dataFormat === "NCHW") return "channelsFirst";
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
}
function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {
    if (dimRoundingMode != null) {
        if (typeof pad === "string") throw Error(`Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
        else if (typeof pad === "number") _util.assert(_util.isInt(pad), ()=>`Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
        else if (typeof pad === "object") pad.forEach((p)=>{
            p.forEach((v)=>{
                _util.assert(_util.isInt(v), ()=>`Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);
            });
        });
        else throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);
    }
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OXSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Returns gradient for fused activation.
parcelHelpers.export(exports, "getFusedDyActivation", ()=>getFusedDyActivation);
// Returns gradient for fused bias.
parcelHelpers.export(exports, "getFusedBiasGradient", ()=>getFusedBiasGradient);
parcelHelpers.export(exports, "applyActivation", ()=>applyActivation);
parcelHelpers.export(exports, "shouldFuse", ()=>shouldFuse);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _broadcastUtil = require("./broadcast_util");
var _elu = require("./elu");
var _leakyRelu = require("./leaky_relu");
var _mul = require("./mul");
var _prelu = require("./prelu");
var _relu = require("./relu");
var _relu6 = require("./relu6");
var _reshape = require("./reshape");
var _sigmoid = require("./sigmoid");
var _step = require("./step");
var _sum = require("./sum");
function getFusedDyActivation(dy, y, activation) {
    if (activation == null || activation === "linear") return dy;
    if (activation === "relu") return (0, _mul.mul)(dy, (0, _step.step)(y));
    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
}
function getFusedBiasGradient(bias, dyActivation) {
    let res = dyActivation;
    const reduceAxes = _broadcastUtil.getReductionAxes(bias.shape, dyActivation.shape);
    if (reduceAxes.length > 0) res = (0, _sum.sum)(res, reduceAxes);
    return (0, _reshape.reshape)(res, bias.shape);
}
function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {
    if (activation === "linear") return x;
    else if (activation === "relu") return (0, _relu.relu)(x);
    else if (activation === "elu") return (0, _elu.elu)(x);
    else if (activation === "relu6") return (0, _relu6.relu6)(x);
    else if (activation === "prelu") return (0, _prelu.prelu)(x, preluActivationWeights);
    else if (activation === "leakyrelu") return (0, _leakyRelu.leakyRelu)(x, leakyreluAlpha);
    else if (activation === "sigmoid") return (0, _sigmoid.sigmoid)(x);
    throw new Error(`Unknown fused activation ${activation}.`);
}
const shouldFuse = (gradientDepth, activation)=>{
    const gradientMode = gradientDepth > 0;
    return !gradientMode || activation === "linear";
};

},{"./broadcast_util":"kQqEF","./elu":"2zzFy","./leaky_relu":"7u3Px","./mul":"8s4p1","./prelu":"hazkZ","./relu":"azijv","./relu6":"zIzY1","./reshape":"45nfd","./sigmoid":"gXSuy","./step":"jjkm2","./sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zzFy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "elu", ()=>elu);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function elu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "elu", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Elu), inputs);
}
const elu = (0, _operation.op)({
    elu_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7u3Px":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leakyRelu", ()=>leakyRelu);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function leakyRelu_(x, alpha = 0.2) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "leakyRelu");
    const inputs = {
        x: $x
    };
    const attrs = {
        alpha
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LeakyRelu), inputs, attrs);
}
const leakyRelu = (0, _operation.op)({
    leakyRelu_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8s4p1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mul", ()=>mul);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function mul_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "mul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "mul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Multiply), inputs);
}
const mul = (0, _operation.op)({
    mul_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hazkZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prelu", ()=>prelu);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function prelu_(x, alpha) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "prelu");
    const $alpha = (0, _tensorUtilEnv.convertToTensor)(alpha, "alpha", "prelu");
    const inputs = {
        x: $x,
        alpha: $alpha
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Prelu), inputs);
}
const prelu = (0, _operation.op)({
    prelu_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"azijv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relu", ()=>relu);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function relu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "relu");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Relu), inputs);
}
const relu = (0, _operation.op)({
    relu_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zIzY1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relu6", ()=>relu6);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function relu6_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "relu6");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Relu6), inputs);
}
const relu6 = (0, _operation.op)({
    relu6_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45nfd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshape", ()=>reshape);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function reshape_(x, shape) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reshape", "string_or_numeric");
    const inputs = {
        x: $x
    };
    const attrs = {
        shape
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Reshape), inputs, attrs);
}
const reshape = (0, _operation.op)({
    reshape_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gXSuy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sigmoid", ()=>sigmoid);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function sigmoid_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sigmoid", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sigmoid), inputs);
}
const sigmoid = (0, _operation.op)({
    sigmoid_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjkm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "step", ()=>step);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function step_(x, alpha = 0.0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "step");
    const inputs = {
        x: $x
    };
    const attrs = {
        alpha
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Step), inputs, attrs);
}
const step = (0, _operation.op)({
    step_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91lxl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sum", ()=>sum);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _cast = require("./cast");
var _operation = require("./operation");
/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function sum_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sum");
    if ($x.dtype === "bool") $x = (0, _cast.cast)($x, "int32");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sum), inputs, attrs);
}
const sum = (0, _operation.op)({
    sum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./cast":"a7v0X","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ebaqG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RowPartitionType", ()=>RowPartitionType);
parcelHelpers.export(exports, "combineRaggedTensorToTensorShapes", ()=>combineRaggedTensorToTensorShapes);
parcelHelpers.export(exports, "getRowPartitionTypesHelper", ()=>getRowPartitionTypesHelper);
parcelHelpers.export(exports, "getRaggedRank", ()=>getRaggedRank);
parcelHelpers.export(exports, "validateDefaultValueShape", ()=>validateDefaultValueShape);
var RowPartitionType;
(function(RowPartitionType) {
    RowPartitionType[RowPartitionType["FIRST_DIM_SIZE"] = 0] = "FIRST_DIM_SIZE";
    RowPartitionType[RowPartitionType["VALUE_ROWIDS"] = 1] = "VALUE_ROWIDS";
    RowPartitionType[RowPartitionType["ROW_LENGTHS"] = 2] = "ROW_LENGTHS";
    RowPartitionType[RowPartitionType["ROW_SPLITS"] = 3] = "ROW_SPLITS";
    RowPartitionType[RowPartitionType["ROW_LIMITS"] = 4] = "ROW_LIMITS";
    RowPartitionType[RowPartitionType["ROW_STARTS"] = 5] = "ROW_STARTS";
})(RowPartitionType || (RowPartitionType = {}));
function combineRaggedTensorToTensorShapes(raggedRank, shape, valueShape) {
    // Test for consistency of valueShape and shape specified.
    // If shape is unspecified and valueShape is specified, then copy
    // over the size from the valueShape dimension.
    let outputShape = new Array();
    if (valueShape == null && shape == null) return outputShape;
    if (shape == null) // Here, value_shape must be of known size.
    while(outputShape.length < raggedRank + valueShape.length)outputShape.push(-1);
    else outputShape = shape.slice();
    if (valueShape == null) return outputShape;
    // At this point, valueShape and output_shape have known ranks.
    if (raggedRank + valueShape.length !== outputShape.length) throw new Error(`rt input.shape and shape=${shape} are incompatible: rt input.rank = ${raggedRank + valueShape.length}, but shape.rank = ${outputShape.length}`);
    for(let i = 1; i < valueShape.length; ++i){
        const valueDim = valueShape[i];
        const outputShapeDimIndex = outputShape[outputShape.length - valueShape.length + i];
        const outputShapeDim = outputShape[outputShapeDimIndex];
        if (valueDim >= 0) {
            if (outputShapeDim >= 0) {
                if (outputShapeDim !== valueDim) throw new Error(`rt input.shape and shape=${shape} are incompatible: rt input.shape[${i + raggedRank}] = ${valueDim} but shape[${i + raggedRank}] = ${outputShapeDim}`);
            } else outputShape[outputShapeDimIndex] = valueDim;
        }
    }
    return outputShape;
}
function getRowPartitionTypesHelper(rowPartitionTypeStrings) {
    const stringToType = {
        "FIRST_DIM_SIZE": RowPartitionType.FIRST_DIM_SIZE,
        "VALUE_ROWIDS": RowPartitionType.VALUE_ROWIDS,
        "ROW_LENGTHS": RowPartitionType.ROW_LENGTHS,
        "ROW_SPLITS": RowPartitionType.ROW_SPLITS,
        "ROW_LIMITS": RowPartitionType.ROW_LIMITS,
        "ROW_STARTS": RowPartitionType.ROW_STARTS
    };
    const result = [];
    for (const typeStr of rowPartitionTypeStrings){
        if (typeStr in stringToType) result.push(stringToType[typeStr]);
        else break;
    }
    return result;
}
function getRaggedRank(rowPartitionTypes) {
    if (rowPartitionTypes.length === 0) return 0;
    if (rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) return rowPartitionTypes.length - 1;
    return rowPartitionTypes.length;
}
function validateDefaultValueShape(defaultValueShape, valueShape) {
    if (defaultValueShape == null || valueShape == null) return;
    const defaultNDims = defaultValueShape.length;
    const valuesNDims = valueShape.length;
    if (defaultNDims >= valuesNDims) throw new Error(`defaultValue.shape=${defaultValueShape} and ragged tensor flatValues.shape=${valueShape}, are incompatible: defaultValue.rank = ${defaultNDims} must be less than ragged tensor input flatValues.rank = ${valuesNDims})`);
    for(let i = 0; i < Math.min(defaultNDims, valuesNDims - 1); ++i){
        const defaultDim = defaultValueShape[i];
        const valueDim = valueShape[i + 1];
        if (defaultDim >= 0 && valueDim >= 0 && defaultDim !== 1 && defaultDim !== valueDim) throw new Error(`defaultValue.shape=${defaultValueShape}, and ragged tensor input flatValues.shape=${valueShape} are incompatible: defaultValue.shape[${i - defaultValueShape.length}] = ${defaultDim} but ragged tensor input.flatValues.shape[${i - defaultValueShape.length}] = ${valueDim}`);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpkZ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Returns the image center in pixels.
parcelHelpers.export(exports, "getImageCenter", ()=>getImageCenter);
function getImageCenter(center, imageHeight, imageWidth) {
    const centerX = imageWidth * (typeof center === "number" ? center : center[0]);
    const centerY = imageHeight * (typeof center === "number" ? center : center[1]);
    return [
        centerX,
        centerY
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpuBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getReshaped", ()=>getReshaped);
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getPermuted", ()=>getPermuted);
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getReshapedPermuted", ()=>getReshapedPermuted);
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */ parcelHelpers.export(exports, "getSliceBeginCoords", ()=>getSliceBeginCoords);
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getSliceSize", ()=>getSliceSize);
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
    let reshaped = [];
    if (batchToSpace) {
        reshaped = reshaped.concat(blockShape.slice(0));
        reshaped.push(inputShape[0] / prod);
        reshaped = reshaped.concat(inputShape.slice(1));
    } else {
        reshaped = reshaped.concat(inputShape[0]);
        const spatialLength = blockShape.length;
        for(let i = 0; i < spatialLength; ++i)reshaped = reshaped.concat([
            inputShape[i + 1] / blockShape[i],
            blockShape[i]
        ]);
        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
    }
    return reshaped;
}
function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
    const permuted = [];
    if (batchToSpace) {
        permuted.push(blockShapeRank);
        for(let i = blockShapeRank + 1; i < reshapedRank; ++i)if (i <= 2 * blockShapeRank) {
            permuted.push(i);
            permuted.push(i - (blockShapeRank + 1));
        } else permuted.push(i);
    } else {
        const permutedBeforeBatch = [];
        const permutedAfterBatch = [];
        for(let i1 = 1; i1 < reshapedRank; ++i1)if (i1 >= blockShapeRank * 2 + 1 || i1 % 2 === 1) permutedAfterBatch.push(i1);
        else permutedBeforeBatch.push(i1);
        permuted.push(...permutedBeforeBatch);
        permuted.push(0);
        permuted.push(...permutedAfterBatch);
    }
    return permuted;
}
function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
    const reshapedPermuted = [];
    if (batchToSpace) reshapedPermuted.push(inputShape[0] / prod);
    else reshapedPermuted.push(inputShape[0] * prod);
    for(let i = 1; i < inputShape.length; ++i)if (i <= blockShape.length) {
        if (batchToSpace) reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
        else reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
    } else reshapedPermuted.push(inputShape[i]);
    return reshapedPermuted;
}
function getSliceBeginCoords(crops, blockShape) {
    const sliceBeginCoords = [
        0
    ];
    for(let i = 0; i < blockShape; ++i)sliceBeginCoords.push(crops[i][0]);
    return sliceBeginCoords;
}
function getSliceSize(uncroppedShape, crops, blockShape) {
    const sliceSize = uncroppedShape.slice(0, 1);
    for(let i = 0; i < blockShape; ++i)sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
    return sliceSize;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11lT6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SELU_SCALEALPHA", ()=>SELU_SCALEALPHA);
parcelHelpers.export(exports, "SELU_SCALE", ()=>SELU_SCALE);
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
const SELU_SCALE = 1.0507009873554804934193349852946;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jWo3R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERF_P", ()=>ERF_P);
parcelHelpers.export(exports, "ERF_A1", ()=>ERF_A1);
parcelHelpers.export(exports, "ERF_A2", ()=>ERF_A2);
parcelHelpers.export(exports, "ERF_A3", ()=>ERF_A3);
parcelHelpers.export(exports, "ERF_A4", ()=>ERF_A4);
parcelHelpers.export(exports, "ERF_A5", ()=>ERF_A5);
const ERF_P = 0.3275911;
const ERF_A1 = 0.254829592;
const ERF_A2 = -0.284496736;
const ERF_A3 = 1.421413741;
const ERF_A4 = -1.453152027;
const ERF_A5 = 1.061405429;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKdDq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */ parcelHelpers.export(exports, "mergeRealAndImagArrays", ()=>mergeRealAndImagArrays);
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */ parcelHelpers.export(exports, "splitRealAndImagArrays", ()=>splitRealAndImagArrays);
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */ parcelHelpers.export(exports, "complexWithEvenIndex", ()=>complexWithEvenIndex);
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */ parcelHelpers.export(exports, "complexWithOddIndex", ()=>complexWithOddIndex);
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */ parcelHelpers.export(exports, "getComplexWithIndex", ()=>getComplexWithIndex);
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */ parcelHelpers.export(exports, "assignToTypedArray", ()=>assignToTypedArray);
/**
 * Make the list of exponent terms used by FFT.
 */ parcelHelpers.export(exports, "exponents", ()=>exponents);
/**
 * Make the exponent term used by FFT.
 */ parcelHelpers.export(exports, "exponent", ()=>exponent);
function mergeRealAndImagArrays(real, imag) {
    if (real.length !== imag.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:` + `${real.length}, imag: ${imag.length}.`);
    const result = new Float32Array(real.length * 2);
    for(let i = 0; i < result.length; i += 2){
        result[i] = real[i / 2];
        result[i + 1] = imag[i / 2];
    }
    return result;
}
function splitRealAndImagArrays(complex) {
    const real = new Float32Array(complex.length / 2);
    const imag = new Float32Array(complex.length / 2);
    for(let i = 0; i < complex.length; i += 2){
        real[i / 2] = complex[i];
        imag[i / 2] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function complexWithEvenIndex(complex) {
    const len = Math.ceil(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for(let i = 0; i < complex.length; i += 4){
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function complexWithOddIndex(complex) {
    const len = Math.floor(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for(let i = 2; i < complex.length; i += 4){
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function getComplexWithIndex(complex, index) {
    const real = complex[index * 2];
    const imag = complex[index * 2 + 1];
    return {
        real,
        imag
    };
}
function assignToTypedArray(data, real, imag, index) {
    data[index * 2] = real;
    data[index * 2 + 1] = imag;
}
function exponents(n, inverse) {
    const real = new Float32Array(n / 2);
    const imag = new Float32Array(n / 2);
    for(let i = 0; i < Math.ceil(n / 2); i++){
        const x = (inverse ? 2 : -2) * Math.PI * (i / n);
        real[i] = Math.cos(x);
        imag[i] = Math.sin(x);
    }
    return {
        real,
        imag
    };
}
function exponent(k, n, inverse) {
    const x = (inverse ? 2 : -2) * Math.PI * (k / n);
    const real = Math.cos(x);
    const imag = Math.sin(x);
    return {
        real,
        imag
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l83yU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Parse an equation for einsum.
 *
 * @param equation The einsum equation (e.g., "ij,jk->ik").
 * @param numTensors Number of tensors provided along with `equation`. Used to
 *   check matching number of input tensors.
 * @returns An object consisting of the following fields:
 *   - allDims: all dimension names as strings.
 *   - summedDims: a list of all dimensions being summed over, as indices to
 *     the elements of `allDims`.
 *   - idDims: indices of the dimensions in each input tensor, as indices to
 *     the elements of `allDims.
 */ parcelHelpers.export(exports, "decodeEinsumEquation", ()=>decodeEinsumEquation);
/**
 * Get the permutation for a given input tensor.
 *
 * @param nDims Total number of dimension of all tensors involved in the einsum
 *   operation.
 * @param idDims Dimension indices involve in the tensor in question.
 * @returns An object consisting of the following fields:
 *   - permutationIndices: Indices to permute the axes of the tensor with.
 *   - expandDims: Indices to the dimension that need to be expanded from the
 *     tensor after permutation.
 */ parcelHelpers.export(exports, "getEinsumPermutation", ()=>getEinsumPermutation);
/**
 * Checks that the dimension sizes from different input tensors match the
 * equation.
 */ parcelHelpers.export(exports, "checkEinsumDimSizes", ()=>checkEinsumDimSizes);
/**
 * Gets path of computation for einsum.
 *
 * @param summedDims indices to the dimensions being summed over.
 * @param idDims A look up table for the dimensions present in each input
 *     tensor. Each consituent array contains indices for the dimensions in the
 *     corresponding input tensor.
 *
 * @return A map with two fields:
 *   - path: The path of computation, with each element indicating the dimension
 *     being summed over after the element-wise multiplication in that step.
 *   - steps: With the same length as `path`. Each element contains the indices
 *     to the input tensors being used for element-wise multiplication in the
 *     corresponding step.
 */ parcelHelpers.export(exports, "getEinsumComputePath", ()=>getEinsumComputePath);
/** Determines if an axes permutation is the identity permutation. */ parcelHelpers.export(exports, "isIdentityPermutation", ()=>isIdentityPermutation);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _utilBase = require("../util_base");
const ARROW = "->";
const ARROW_REGEX = /->/g;
const COMMA = ",";
const ELLIPSIS = "...";
function decodeEinsumEquation(equation, numTensors) {
    equation = equation.replace(/\s/g, ""); // Remove witespace in equation.
    const numArrows = (equation.length - equation.replace(ARROW_REGEX, "").length) / ARROW.length;
    if (numArrows < 1) throw new Error("Equations without an arrow are not supported.");
    else if (numArrows > 1) throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);
    const [inputString, outputString] = equation.split(ARROW);
    (0, _utilBase.assert)(inputString.indexOf(ELLIPSIS) === -1, ()=>`The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);
    const inputTerms = inputString.split(COMMA);
    const numInputs = inputTerms.length;
    if (numTensors !== numInputs) throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);
    if (numInputs > 2) throw new Error("Support for more than 2 input tensors is not implemented yet.");
    const allDims = [];
    for(let i = 0; i < outputString.length; ++i){
        const dimName = outputString[i];
        if (!inputTerms.some((inputTerm)=>inputTerm.indexOf(dimName) !== -1)) throw new Error(`Output subscripts contain the label ${dimName} ` + `not present in the input subscripts.`);
        if (allDims.indexOf(dimName) === -1) allDims.push(dimName);
    }
    for(let i1 = 0; i1 < inputString.length; ++i1){
        const dimName1 = inputString[i1];
        if (allDims.indexOf(dimName1) === -1 && dimName1 !== COMMA) allDims.push(dimName1);
    }
    const idDims = new Array(inputTerms.length);
    for(let i2 = 0; i2 < numInputs; ++i2){
        if (new Set(inputTerms[i2].split("")).size !== inputTerms[i2].length) throw new Error(`Found duplicate axes in input component ${inputTerms[i2]}. ` + `Support for duplicate axes in input is not implemented yet.`);
        idDims[i2] = [];
        for(let j = 0; j < inputTerms[i2].length; ++j)idDims[i2].push(allDims.indexOf(inputTerms[i2][j]));
    }
    const numDims = allDims.length; // Number of unique dimensions.
    const numOutDims = outputString.length; // Number of output dimensions.
    const summedDims = []; // Dimensions being summed over.
    for(let i3 = numOutDims; i3 < numDims; ++i3)summedDims.push(i3);
    return {
        allDims,
        summedDims,
        idDims
    };
}
function getEinsumPermutation(nDims, idDims) {
    let permutationIndices = new Array(nDims);
    permutationIndices.fill(-1);
    for(let i = 0; i < idDims.length; ++i)permutationIndices[idDims[i]] = i;
    const expandDims = [];
    for(let i1 = 0; i1 < nDims; ++i1)if (permutationIndices[i1] === -1) expandDims.push(i1);
    permutationIndices = permutationIndices.filter((d)=>d !== -1);
    return {
        permutationIndices,
        expandDims
    };
}
function checkEinsumDimSizes(nDims, idDims, tensors) {
    const dimSizes = new Array(nDims);
    for(let i = 0; i < tensors.length; ++i){
        const shape = tensors[i].shape;
        for(let j = 0; j < idDims[i].length; ++j)if (dimSizes[idDims[i][j]] === undefined) dimSizes[idDims[i][j]] = shape[j];
        else (0, _utilBase.assert)(dimSizes[idDims[i][j]] === shape[j], ()=>`Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` + `of input shaped ${JSON.stringify(shape)}, ` + `but got dimension ${shape[j]}`);
    }
}
function getEinsumComputePath(summedDims, idDims) {
    const path = summedDims;
    const steps = [];
    let nSteps = 0;
    if (summedDims.length === 0) // Einsum that involes no summing: e.g., transpose and outer product.
    path.push(-1);
    nSteps = summedDims.length + 1;
    for(let i = 0; i < nSteps; ++i)steps.push([]);
    const computedTermIndices = [];
    for(let i1 = 0; i1 < path.length; ++i1){
        const summedDim = path[i1];
        const termIndices = findTermsWithDim(idDims, summedDim);
        for (const termIndex of termIndices)if (computedTermIndices.indexOf(termIndex) === -1) {
            steps[i1].push(termIndex);
            computedTermIndices.push(termIndex);
        }
    }
    return {
        path,
        steps
    };
}
function isIdentityPermutation(perm) {
    return perm.every((dim, index)=>dim === index);
}
function findTermsWithDim(idDims, dim) {
    const termIndices = [];
    for(let i = 0; i < idDims.length; ++i)if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) termIndices.push(i);
    return termIndices;
}

},{"../util_base":"a2mCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ahiAQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */ parcelHelpers.export(exports, "prepareSplitSize", ()=>prepareSplitSize);
var _util = require("../util");
function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
    let splitSizes = [];
    if (typeof numOrSizeSplits === "number") {
        (0, _util.assert)(x.shape[axis] % numOrSizeSplits === 0, ()=>"Number of splits must evenly divide the axis.");
        splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
    } else {
        const numOfNegs = numOrSizeSplits.reduce((count, value)=>{
            if (value === -1) count += 1;
            return count;
        }, 0);
        (0, _util.assert)(numOfNegs <= 1, ()=>"There should be only one negative value in split array.");
        const negIndex = numOrSizeSplits.indexOf(-1);
        // Allow the number of split array to be -1, which indicates the rest
        // of dimension is allocated to that split.
        if (negIndex !== -1) {
            const total = numOrSizeSplits.reduce((a, b)=>b > 0 ? a + b : a);
            numOrSizeSplits[negIndex] = x.shape[axis] - total;
        }
        (0, _util.assert)(x.shape[axis] === numOrSizeSplits.reduce((a, b)=>a + b), ()=>"The sum of sizes must match the size of the axis dimension.");
        splitSizes = numOrSizeSplits;
    }
    return splitSizes;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"35ffZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Generates sparse fill empty rows indices, dense shape mismatch error message.
 *
 * @param indicesLength The first dimension of indices.
 */ parcelHelpers.export(exports, "getSparseFillEmptyRowsIndicesDenseShapeMismatch", ()=>getSparseFillEmptyRowsIndicesDenseShapeMismatch);
/**
 * Generates sparse fill empty rows negative index error message.
 *
 * @param index The index with a negative value.
 * @param value The negative value.
 */ parcelHelpers.export(exports, "getSparseFillEmptyRowsNegativeIndexErrorMessage", ()=>getSparseFillEmptyRowsNegativeIndexErrorMessage);
/**
 * Generates sparse fill empty rows out of range index error message.
 *
 * @param index The index with an out of range value.
 * @param value The out of range value.
 * @param limit The upper limit for indices.
 */ parcelHelpers.export(exports, "getSparseFillEmptyRowsOutOfRangeIndexErrorMessage", ()=>getSparseFillEmptyRowsOutOfRangeIndexErrorMessage);
function getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesLength) {
    return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${indicesLength}`;
}
function getSparseFillEmptyRowsNegativeIndexErrorMessage(index, value) {
    return `indices(${index}, 0) is invalid: ${value} < 0`;
}
function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(index, value, limit) {
    return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmJN9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Generates sparse reshape multiple negative 1 output dimension error message.
 *
 * @param dim1 The first dimension with a negative 1 value.
 * @param dim2 The second dimension with a negative 1 value.
 */ parcelHelpers.export(exports, "getSparseReshapeMultipleNegativeOneOutputDimErrorMessage", ()=>getSparseReshapeMultipleNegativeOneOutputDimErrorMessage);
/**
 * Generates sparse reshape negative output dimension error message.
 *
 * @param dim The dimension with a negative value.
 * @param value The negative value.
 */ parcelHelpers.export(exports, "getSparseReshapeNegativeOutputDimErrorMessage", ()=>getSparseReshapeNegativeOutputDimErrorMessage);
/**
 * Generates sparse reshape empty tensor zero output dimension error message.
 *
 */ parcelHelpers.export(exports, "getSparseReshapeEmptyTensorZeroOutputDimErrorMessage", ()=>getSparseReshapeEmptyTensorZeroOutputDimErrorMessage);
/**
 * Generates sparse reshape input output multiple mismatch error message.
 *
 * @param inputShape the input shape.
 * @param outputShape the requested output shape.
 */ parcelHelpers.export(exports, "getSparseReshapeInputOutputMultipleErrorMessage", ()=>getSparseReshapeInputOutputMultipleErrorMessage);
/**
 * Generates sparse reshape input output inequality error message.
 *
 * @param inputShape the input shape.
 * @param outputShape the requested output shape.
 */ parcelHelpers.export(exports, "getSparseReshapeInputOutputMismatchErrorMessage", ()=>getSparseReshapeInputOutputMismatchErrorMessage);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../../util");
function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {
    return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;
}
function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {
    return `size ${dim} must be non-negative, not ${value}`;
}
function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {
    return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {
    const inputSize = (0, _util.sizeFromShape)(inputShape);
    const outputSize = (0, _util.sizeFromShape)(outputShape);
    return `Input to reshape is a SparseTensor with ${inputSize}
  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;
}
function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {
    const inputSize = (0, _util.sizeFromShape)(inputShape);
    const outputSize = (0, _util.sizeFromShape)(outputShape);
    return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;
}

},{"../../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gaA2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Generates sparse segment reduction negative segment ids error message.
 *
 */ parcelHelpers.export(exports, "getSparseSegmentReductionNegativeSegmentIdsErrorMessage", ()=>getSparseSegmentReductionNegativeSegmentIdsErrorMessage);
/**
 * Generates sparse segment reduction non increasing segment ids error message.
 *
 */ parcelHelpers.export(exports, "getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage", ()=>getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage);
/**
 * Generates sparse segment reduction segment id out of range error message.
 *
 * @param segmentId The segment id index that is out of range.
 * @param outputRows Upper bound of valid segment id values.
 */ parcelHelpers.export(exports, "getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage", ()=>getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage);
/**
 * Generates sparse segment reduction input indice out of range error message.
 *
 * @param index The index that holds the out of range value.
 * @param indexValue The value that is out of range.
 * @param inputRows Upper bound of valid index values.
 */ parcelHelpers.export(exports, "getSparseSegmentReductionIndicesOutOfRangeErrorMessage", ()=>getSparseSegmentReductionIndicesOutOfRangeErrorMessage);
function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {
    return `segment ids must be >= 0`;
}
function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {
    return `segment ids are not increasing`;
}
function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {
    return `Segment id ${segmentId} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`;
}
function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {
    return `Bad: indices[${index}] == ${indexValue} out of range [0, ${inputRows})`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xKxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "nonMaxSuppressionV3Impl", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV3Impl));
parcelHelpers.export(exports, "nonMaxSuppressionV4Impl", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV4Impl));
parcelHelpers.export(exports, "nonMaxSuppressionV5Impl", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV5Impl));
parcelHelpers.export(exports, "whereImpl", ()=>(0, _whereImpl.whereImpl));
var _nonMaxSuppressionImpl = require("./non_max_suppression_impl");
var _whereImpl = require("./where_impl");

},{"./non_max_suppression_impl":"hzXRp","./where_impl":"gWXHH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hzXRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3Impl", ()=>nonMaxSuppressionV3Impl);
parcelHelpers.export(exports, "nonMaxSuppressionV4Impl", ()=>nonMaxSuppressionV4Impl);
parcelHelpers.export(exports, "nonMaxSuppressionV5Impl", ()=>nonMaxSuppressionV5Impl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _nonMaxSuppressionUtil = require("./non_max_suppression_util");
function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */ );
}
function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */ , false, padToMaxOutputSize /* padToMaxOutputSize */ , true);
}
function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true);
}
function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
    // The list is sorted in ascending order, so that we can always pop the
    // candidate with the largest score in O(1) time.
    const candidates = [];
    for(let i = 0; i < scores.length; i++)if (scores[i] > scoreThreshold) candidates.push({
        score: scores[i],
        boxIndex: i,
        suppressBeginIndex: 0
    });
    candidates.sort(ascendingComparator);
    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
    // before.
    const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;
    const selectedIndices = [];
    const selectedScores = [];
    while(selectedIndices.length < maxOutputSize && candidates.length > 0){
        const candidate = candidates.pop();
        const { score: originalScore , boxIndex , suppressBeginIndex  } = candidate;
        if (originalScore < scoreThreshold) break;
        // Overlapping boxes are likely to have similar scores, therefore we
        // iterate through the previously selected boxes backwards in order to
        // see if candidate's score should be suppressed. We use
        // suppressBeginIndex to track and ensure a candidate can be suppressed
        // by a selected box no more than once. Also, if the overlap exceeds
        // iouThreshold, we simply ignore the candidate.
        let ignoreCandidate = false;
        for(let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j){
            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
            if (iou >= iouThreshold) {
                ignoreCandidate = true;
                break;
            }
            candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);
            if (candidate.score <= scoreThreshold) break;
        }
        // At this point, if `candidate.score` has not dropped below
        // `scoreThreshold`, then we know that we went through all of the
        // previous selections and can safely update `suppressBeginIndex` to the
        // end of the selected array. Then we can re-insert the candidate with
        // the updated score and suppressBeginIndex back in the candidate list.
        // If on the other hand, `candidate.score` has dropped below the score
        // threshold, we will not add it back to the candidates list.
        candidate.suppressBeginIndex = selectedIndices.length;
        if (!ignoreCandidate) {
            // Candidate has passed all the tests, and is not suppressed, so
            // select the candidate.
            if (candidate.score === originalScore) {
                selectedIndices.push(boxIndex);
                selectedScores.push(candidate.score);
            } else if (candidate.score > scoreThreshold) // Candidate's score is suppressed but is still high enough to be
            // considered, so add back to the candidates list.
            (0, _nonMaxSuppressionUtil.binaryInsert)(candidates, candidate, ascendingComparator);
        }
    }
    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
    const validOutputs = selectedIndices.length;
    const elemsToPad = maxOutputSize - validOutputs;
    if (padToMaxOutputSize && elemsToPad > 0) {
        selectedIndices.push(...new Array(elemsToPad).fill(0));
        selectedScores.push(...new Array(elemsToPad).fill(0.0));
    }
    const result = {
        selectedIndices
    };
    if (returnScoresTensor) result["selectedScores"] = selectedScores;
    if (returnValidOutputs) result["validOutputs"] = validOutputs;
    return result;
}
function intersectionOverUnion(boxes, i, j) {
    const iCoord = boxes.subarray(i * 4, i * 4 + 4);
    const jCoord = boxes.subarray(j * 4, j * 4 + 4);
    const yminI = Math.min(iCoord[0], iCoord[2]);
    const xminI = Math.min(iCoord[1], iCoord[3]);
    const ymaxI = Math.max(iCoord[0], iCoord[2]);
    const xmaxI = Math.max(iCoord[1], iCoord[3]);
    const yminJ = Math.min(jCoord[0], jCoord[2]);
    const xminJ = Math.min(jCoord[1], jCoord[3]);
    const ymaxJ = Math.max(jCoord[0], jCoord[2]);
    const xmaxJ = Math.max(jCoord[1], jCoord[3]);
    const areaI = (ymaxI - yminI) * (xmaxI - xminI);
    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
    if (areaI <= 0 || areaJ <= 0) return 0.0;
    const intersectionYmin = Math.max(yminI, yminJ);
    const intersectionXmin = Math.max(xminI, xminJ);
    const intersectionYmax = Math.min(ymaxI, ymaxJ);
    const intersectionXmax = Math.min(xmaxI, xmaxJ);
    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);
    return intersectionArea / (areaI + areaJ - intersectionArea);
}
// A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.
function suppressWeight(iouThreshold, scale, iou) {
    const weight = Math.exp(scale * iou * iou);
    return iou <= iouThreshold ? weight : 0.0;
}
function ascendingComparator(c1, c2) {
    // For objects with same scores, we make the object with the larger index go
    // first. In an array that pops from the end, this means that the object with
    // the smaller index will be popped first. This ensures the same output as
    // the TensorFlow python version.
    return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;
}

},{"./non_max_suppression_util":"hgBjw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hgBjw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */ parcelHelpers.export(exports, "binaryInsert", ()=>binaryInsert);
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */ parcelHelpers.export(exports, "binarySearch", ()=>binarySearch);
function binaryInsert(arr, element, comparator) {
    const index = binarySearch(arr, element, comparator);
    const insertionPoint = index < 0 ? -(index + 1) : index;
    arr.splice(insertionPoint, 0, element);
}
function binarySearch(arr, target, comparator) {
    return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */ function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function binarySearch_(arr, target, comparator) {
    let left = 0;
    let right = arr.length;
    let middle = 0;
    let found = false;
    while(left < right){
        middle = left + (right - left >>> 1);
        const compareResult = comparator(target, arr[middle]);
        if (compareResult > 0) left = middle + 1;
        else {
            right = middle;
            // If compareResult is 0, the value is found. We record it is found,
            // and then keep looking because there may be duplicate.
            found = !compareResult;
        }
    }
    return found ? left : -left - 1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWXHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "whereImpl", ()=>whereImpl);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /** An implementation of the Where kernel shared between cpu and webgl */ var _buffer = require("../ops/buffer");
function whereImpl(condShape, condVals) {
    const indices = [];
    for(let i = 0; i < condVals.length; i++)if (condVals[i]) indices.push(i);
    const inBuffer = (0, _buffer.buffer)(condShape, "int32");
    const out = (0, _buffer.buffer)([
        indices.length,
        condShape.length
    ], "int32");
    for(let i1 = 0; i1 < indices.length; i1++){
        const loc = inBuffer.indexToLoc(indices[i1]);
        const offset = i1 * condShape.length;
        out.values.set(loc, offset);
    }
    return out.toTensor();
}

},{"../ops/buffer":"e0wS6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LYeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "AdadeltaOptimizer", ()=>AdadeltaOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _div = require("../ops/div");
var _mul = require("../ops/mul");
var _ops = require("../ops/ops");
var _square = require("../ops/square");
var _zerosLike = require("../ops/zeros_like");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdadeltaOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, rho, epsilon = null){
        super();
        this.learningRate = learningRate;
        this.rho = rho;
        this.epsilon = epsilon;
        this.accumulatedGrads = [];
        this.accumulatedUpdates = [];
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            const trainable = false;
            if (this.accumulatedGrads[i] == null) this.accumulatedGrads[i] = {
                originalName: `${name}/accum_grad`,
                variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedUpdates[i] == null) this.accumulatedUpdates[i] = {
                originalName: `${name}/accum_var`,
                variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
            };
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            const accumulatedUpdate = this.accumulatedUpdates[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedGrad = (0, _add.add)((0, _mul.mul)(accumulatedGrad, this.rho), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.rho));
                const updates = (0, _mul.mul)((0, _div.div)((0, _ops.sqrt)((0, _add.add)(accumulatedUpdate, this.epsilon)), (0, _ops.sqrt)((0, _add.add)(accumulatedGrad, this.epsilon))), gradient);
                const newAccumulatedUpdate = (0, _add.add)((0, _mul.mul)(accumulatedUpdate, this.rho), (0, _mul.mul)((0, _square.square)(updates), 1 - this.rho));
                accumulatedGrad.assign(newAccumulatedGrad);
                accumulatedUpdate.assign(newAccumulatedUpdate);
                const newValue = (0, _add.add)((0, _mul.mul)(updates, -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedUpdates != null) {
            (0, _globals.dispose)(this.accumulatedGrads.map((v)=>v.variable));
            (0, _globals.dispose)(this.accumulatedUpdates.map((v)=>v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedGrads,
            ...this.accumulatedUpdates
        ];
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedGrads = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "rho": this.rho,
            "epsilon": this.epsilon
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["rho"], config["epsilon"]);
    }
}
/** @nocollapse */ AdadeltaOptimizer.className = "Adadelta"; // Name matters for Python compatibility.
(0, _serialization.registerClass)(AdadeltaOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/div":"3bNgZ","../ops/mul":"8s4p1","../ops/ops":"iDElj","../ops/square":"52Axi","../ops/zeros_like":"dwK1F","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i4ulI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "add", ()=>add);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function add_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "add");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "add");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Add), inputs);
}
const add = (0, _operation.op)({
    add_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bNgZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "div", ()=>div);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _floorDiv = require("./floorDiv");
var _operation = require("./operation");
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function div_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "div");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "div");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "int32" && $b.dtype === "int32") return (0, _floorDiv.floorDiv)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    const attrs = {};
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.RealDiv), inputs, attrs);
}
const div = (0, _operation.op)({
    div_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./floorDiv":"cRmmy","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRmmy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorDiv", ()=>floorDiv);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function floorDiv_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "floorDiv");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "floorDiv");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.FloorDiv), inputs);
}
const floorDiv = (0, _operation.op)({
    floorDiv_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDElj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Modularized ops.
parcelHelpers.export(exports, "abs", ()=>(0, _abs.abs));
parcelHelpers.export(exports, "acos", ()=>(0, _acos.acos));
parcelHelpers.export(exports, "acosh", ()=>(0, _acosh.acosh));
parcelHelpers.export(exports, "add", ()=>(0, _add.add));
parcelHelpers.export(exports, "addN", ()=>(0, _addN.addN));
parcelHelpers.export(exports, "all", ()=>(0, _all.all));
parcelHelpers.export(exports, "any", ()=>(0, _any.any));
parcelHelpers.export(exports, "argMax", ()=>(0, _argMax.argMax));
parcelHelpers.export(exports, "argMin", ()=>(0, _argMin.argMin));
parcelHelpers.export(exports, "asin", ()=>(0, _asin.asin));
parcelHelpers.export(exports, "asinh", ()=>(0, _asinh.asinh));
parcelHelpers.export(exports, "atan", ()=>(0, _atan.atan));
parcelHelpers.export(exports, "atan2", ()=>(0, _atan2.atan2));
parcelHelpers.export(exports, "atanh", ()=>(0, _atanh.atanh));
parcelHelpers.export(exports, "avgPool", ()=>(0, _avgPool.avgPool));
parcelHelpers.export(exports, "avgPool3d", ()=>(0, _avgPool3D.avgPool3d));
parcelHelpers.export(exports, "basicLSTMCell", ()=>(0, _basicLstmCell.basicLSTMCell));
parcelHelpers.export(exports, "batchToSpaceND", ()=>(0, _batchToSpaceNd.batchToSpaceND));
parcelHelpers.export(exports, "batchNorm", ()=>(0, _batchnorm.batchNorm));
parcelHelpers.export(exports, "batchNorm2d", ()=>(0, _batchnorm2D.batchNorm2d));
parcelHelpers.export(exports, "batchNorm3d", ()=>(0, _batchnorm3D.batchNorm3d));
parcelHelpers.export(exports, "batchNorm4d", ()=>(0, _batchnorm4D.batchNorm4d));
parcelHelpers.export(exports, "bincount", ()=>(0, _bincount.bincount));
parcelHelpers.export(exports, "broadcastArgs", ()=>(0, _broadcastArgs.broadcastArgs));
parcelHelpers.export(exports, "broadcastTo", ()=>(0, _broadcastTo.broadcastTo));
parcelHelpers.export(exports, "buffer", ()=>(0, _buffer.buffer));
parcelHelpers.export(exports, "cast", ()=>(0, _cast.cast));
parcelHelpers.export(exports, "ceil", ()=>(0, _ceil.ceil));
parcelHelpers.export(exports, "clipByValue", ()=>(0, _clipByValue.clipByValue));
parcelHelpers.export(exports, "clone", ()=>(0, _clone.clone));
parcelHelpers.export(exports, "complex", ()=>(0, _complex.complex));
parcelHelpers.export(exports, "concat", ()=>(0, _concat.concat));
parcelHelpers.export(exports, "concat1d", ()=>(0, _concat1D.concat1d));
parcelHelpers.export(exports, "concat2d", ()=>(0, _concat2D.concat2d));
parcelHelpers.export(exports, "concat3d", ()=>(0, _concat3D.concat3d));
parcelHelpers.export(exports, "concat4d", ()=>(0, _concat4D.concat4d));
parcelHelpers.export(exports, "conv1d", ()=>(0, _conv1D.conv1d));
parcelHelpers.export(exports, "conv2d", ()=>(0, _conv2D.conv2d));
parcelHelpers.export(exports, "conv2dTranspose", ()=>(0, _conv2DTranspose.conv2dTranspose));
parcelHelpers.export(exports, "conv3d", ()=>(0, _conv3D.conv3d));
parcelHelpers.export(exports, "conv3dTranspose", ()=>(0, _conv3DTranspose.conv3dTranspose));
parcelHelpers.export(exports, "cos", ()=>(0, _cos.cos));
parcelHelpers.export(exports, "cosh", ()=>(0, _cosh.cosh));
parcelHelpers.export(exports, "cumprod", ()=>(0, _cumprod.cumprod));
parcelHelpers.export(exports, "cumsum", ()=>(0, _cumsum.cumsum));
parcelHelpers.export(exports, "denseBincount", ()=>(0, _denseBincount.denseBincount));
parcelHelpers.export(exports, "depthToSpace", ()=>(0, _depthToSpace.depthToSpace));
parcelHelpers.export(exports, "depthwiseConv2d", ()=>(0, _depthwiseConv2D.depthwiseConv2d));
parcelHelpers.export(exports, "diag", ()=>(0, _diag.diag));
parcelHelpers.export(exports, "dilation2d", ()=>(0, _dilation2D.dilation2d));
parcelHelpers.export(exports, "div", ()=>(0, _div.div));
parcelHelpers.export(exports, "divNoNan", ()=>(0, _divNoNan.divNoNan));
parcelHelpers.export(exports, "dot", ()=>(0, _dot.dot));
parcelHelpers.export(exports, "einsum", ()=>(0, _einsum.einsum));
parcelHelpers.export(exports, "elu", ()=>(0, _elu.elu));
parcelHelpers.export(exports, "equal", ()=>(0, _equal.equal));
parcelHelpers.export(exports, "erf", ()=>(0, _erf.erf));
parcelHelpers.export(exports, "euclideanNorm", ()=>(0, _euclideanNorm.euclideanNorm));
parcelHelpers.export(exports, "exp", ()=>(0, _exp.exp));
parcelHelpers.export(exports, "expandDims", ()=>(0, _expandDims.expandDims));
parcelHelpers.export(exports, "expm1", ()=>(0, _expm1.expm1));
parcelHelpers.export(exports, "eye", ()=>(0, _eye.eye));
parcelHelpers.export(exports, "fill", ()=>(0, _fill.fill));
parcelHelpers.export(exports, "floor", ()=>(0, _floor.floor));
parcelHelpers.export(exports, "floorDiv", ()=>(0, _floorDiv.floorDiv));
parcelHelpers.export(exports, "gather", ()=>(0, _gather.gather));
parcelHelpers.export(exports, "greater", ()=>(0, _greater.greater));
parcelHelpers.export(exports, "greaterEqual", ()=>(0, _greaterEqual.greaterEqual));
parcelHelpers.export(exports, "imag", ()=>(0, _imag.imag));
parcelHelpers.export(exports, "isFinite", ()=>(0, _isFinite.isFinite));
parcelHelpers.export(exports, "isInf", ()=>(0, _isInf.isInf));
parcelHelpers.export(exports, "isNaN", ()=>(0, _isNan.isNaN));
parcelHelpers.export(exports, "leakyRelu", ()=>(0, _leakyRelu.leakyRelu));
parcelHelpers.export(exports, "less", ()=>(0, _less.less));
parcelHelpers.export(exports, "lessEqual", ()=>(0, _lessEqual.lessEqual));
parcelHelpers.export(exports, "linspace", ()=>(0, _linspace.linspace));
parcelHelpers.export(exports, "localResponseNormalization", ()=>(0, _localResponseNormalization.localResponseNormalization));
parcelHelpers.export(exports, "log", ()=>(0, _log.log));
parcelHelpers.export(exports, "log1p", ()=>(0, _log1P.log1p));
parcelHelpers.export(exports, "logSigmoid", ()=>(0, _logSigmoid.logSigmoid));
parcelHelpers.export(exports, "logSoftmax", ()=>(0, _logSoftmax.logSoftmax));
parcelHelpers.export(exports, "logSumExp", ()=>(0, _logSumExp.logSumExp));
parcelHelpers.export(exports, "logicalAnd", ()=>(0, _logicalAnd.logicalAnd));
parcelHelpers.export(exports, "logicalNot", ()=>(0, _logicalNot.logicalNot));
parcelHelpers.export(exports, "logicalOr", ()=>(0, _logicalOr.logicalOr));
parcelHelpers.export(exports, "logicalXor", ()=>(0, _logicalXor.logicalXor));
parcelHelpers.export(exports, "lowerBound", ()=>(0, _lowerBound.lowerBound));
parcelHelpers.export(exports, "matMul", ()=>(0, _matMul.matMul));
parcelHelpers.export(exports, "max", ()=>(0, _max.max));
parcelHelpers.export(exports, "maxPool", ()=>(0, _maxPool.maxPool));
parcelHelpers.export(exports, "maxPool3d", ()=>(0, _maxPool3D.maxPool3d));
parcelHelpers.export(exports, "maxPoolWithArgmax", ()=>(0, _maxPoolWithArgmax.maxPoolWithArgmax));
parcelHelpers.export(exports, "maximum", ()=>(0, _maximum.maximum));
parcelHelpers.export(exports, "mean", ()=>(0, _mean.mean));
parcelHelpers.export(exports, "meshgrid", ()=>(0, _meshgrid.meshgrid));
parcelHelpers.export(exports, "min", ()=>(0, _min.min));
parcelHelpers.export(exports, "minimum", ()=>(0, _minimum.minimum));
parcelHelpers.export(exports, "mirrorPad", ()=>(0, _mirrorPad.mirrorPad));
parcelHelpers.export(exports, "mod", ()=>(0, _mod.mod));
parcelHelpers.export(exports, "moments", ()=>(0, _moments.moments));
parcelHelpers.export(exports, "mul", ()=>(0, _mul.mul));
parcelHelpers.export(exports, "multiRNNCell", ()=>(0, _multiRnnCell.multiRNNCell));
parcelHelpers.export(exports, "multinomial", ()=>(0, _multinomial.multinomial));
parcelHelpers.export(exports, "neg", ()=>(0, _neg.neg));
parcelHelpers.export(exports, "notEqual", ()=>(0, _notEqual.notEqual));
parcelHelpers.export(exports, "oneHot", ()=>(0, _oneHot.oneHot));
parcelHelpers.export(exports, "ones", ()=>(0, _ones.ones));
parcelHelpers.export(exports, "onesLike", ()=>(0, _onesLike.onesLike));
parcelHelpers.export(exports, "outerProduct", ()=>(0, _outerProduct.outerProduct));
parcelHelpers.export(exports, "pad", ()=>(0, _pad.pad));
parcelHelpers.export(exports, "pad1d", ()=>(0, _pad1D.pad1d));
parcelHelpers.export(exports, "pad2d", ()=>(0, _pad2D.pad2d));
parcelHelpers.export(exports, "pad3d", ()=>(0, _pad3D.pad3d));
parcelHelpers.export(exports, "pad4d", ()=>(0, _pad4D.pad4d));
parcelHelpers.export(exports, "pool", ()=>(0, _pool.pool));
parcelHelpers.export(exports, "pow", ()=>(0, _pow.pow));
parcelHelpers.export(exports, "prelu", ()=>(0, _prelu.prelu));
parcelHelpers.export(exports, "print", ()=>(0, _print.print));
parcelHelpers.export(exports, "prod", ()=>(0, _prod.prod));
parcelHelpers.export(exports, "raggedTensorToTensor", ()=>(0, _raggedTensorToTensor.raggedTensorToTensor));
parcelHelpers.export(exports, "rand", ()=>(0, _rand.rand));
parcelHelpers.export(exports, "randomGamma", ()=>(0, _randomGamma.randomGamma));
parcelHelpers.export(exports, "randomNormal", ()=>(0, _randomNormal.randomNormal));
parcelHelpers.export(exports, "randomStandardNormal", ()=>(0, _randomStandardNormal.randomStandardNormal));
parcelHelpers.export(exports, "randomUniform", ()=>(0, _randomUniform.randomUniform));
parcelHelpers.export(exports, "range", ()=>(0, _range.range));
parcelHelpers.export(exports, "real", ()=>(0, _real.real));
parcelHelpers.export(exports, "reciprocal", ()=>(0, _reciprocal.reciprocal));
parcelHelpers.export(exports, "relu", ()=>(0, _relu.relu));
parcelHelpers.export(exports, "relu6", ()=>(0, _relu6.relu6));
parcelHelpers.export(exports, "reshape", ()=>(0, _reshape.reshape));
parcelHelpers.export(exports, "reverse", ()=>(0, _reverse.reverse));
parcelHelpers.export(exports, "reverse1d", ()=>(0, _reverse1D.reverse1d));
parcelHelpers.export(exports, "reverse2d", ()=>(0, _reverse2D.reverse2d));
parcelHelpers.export(exports, "reverse3d", ()=>(0, _reverse3D.reverse3d));
parcelHelpers.export(exports, "reverse4d", ()=>(0, _reverse4D.reverse4d));
parcelHelpers.export(exports, "round", ()=>(0, _round.round));
parcelHelpers.export(exports, "rsqrt", ()=>(0, _rsqrt.rsqrt));
parcelHelpers.export(exports, "scalar", ()=>(0, _scalar.scalar));
parcelHelpers.export(exports, "selu", ()=>(0, _selu.selu));
parcelHelpers.export(exports, "separableConv2d", ()=>(0, _separableConv2D.separableConv2d));
parcelHelpers.export(exports, "setdiff1dAsync", ()=>(0, _setdiff1DAsync.setdiff1dAsync));
parcelHelpers.export(exports, "sigmoid", ()=>(0, _sigmoid.sigmoid));
parcelHelpers.export(exports, "sign", ()=>(0, _sign.sign));
parcelHelpers.export(exports, "sin", ()=>(0, _sin.sin));
parcelHelpers.export(exports, "sinh", ()=>(0, _sinh.sinh));
parcelHelpers.export(exports, "slice", ()=>(0, _slice.slice));
parcelHelpers.export(exports, "slice1d", ()=>(0, _slice1D.slice1d));
parcelHelpers.export(exports, "slice2d", ()=>(0, _slice2D.slice2d));
parcelHelpers.export(exports, "slice3d", ()=>(0, _slice3D.slice3d));
parcelHelpers.export(exports, "slice4d", ()=>(0, _slice4D.slice4d));
parcelHelpers.export(exports, "softmax", ()=>(0, _softmax.softmax));
parcelHelpers.export(exports, "softplus", ()=>(0, _softplus.softplus));
parcelHelpers.export(exports, "spaceToBatchND", ()=>(0, _spaceToBatchNd.spaceToBatchND));
parcelHelpers.export(exports, "fft", ()=>(0, _fft.fft));
parcelHelpers.export(exports, "ifft", ()=>(0, _ifft.ifft));
parcelHelpers.export(exports, "irfft", ()=>(0, _irfft.irfft));
parcelHelpers.export(exports, "rfft", ()=>(0, _rfft.rfft));
parcelHelpers.export(exports, "split", ()=>(0, _split.split));
parcelHelpers.export(exports, "sqrt", ()=>(0, _sqrt.sqrt));
parcelHelpers.export(exports, "square", ()=>(0, _square.square));
parcelHelpers.export(exports, "squaredDifference", ()=>(0, _squaredDifference.squaredDifference));
parcelHelpers.export(exports, "squeeze", ()=>(0, _squeeze.squeeze));
parcelHelpers.export(exports, "stack", ()=>(0, _stack.stack));
parcelHelpers.export(exports, "step", ()=>(0, _step.step));
parcelHelpers.export(exports, "stridedSlice", ()=>(0, _stridedSlice.stridedSlice));
parcelHelpers.export(exports, "sub", ()=>(0, _sub.sub));
parcelHelpers.export(exports, "sum", ()=>(0, _sum.sum));
parcelHelpers.export(exports, "tan", ()=>(0, _tan.tan));
parcelHelpers.export(exports, "tanh", ()=>(0, _tanh.tanh));
parcelHelpers.export(exports, "tensor", ()=>(0, _tensor.tensor));
parcelHelpers.export(exports, "tensor1d", ()=>(0, _tensor1D.tensor1d));
parcelHelpers.export(exports, "tensor2d", ()=>(0, _tensor2D.tensor2d));
parcelHelpers.export(exports, "tensor3d", ()=>(0, _tensor3D.tensor3d));
parcelHelpers.export(exports, "tensor4d", ()=>(0, _tensor4D.tensor4d));
parcelHelpers.export(exports, "tensor5d", ()=>(0, _tensor5D.tensor5d));
parcelHelpers.export(exports, "tensor6d", ()=>(0, _tensor6D.tensor6d));
parcelHelpers.export(exports, "tile", ()=>(0, _tile.tile));
parcelHelpers.export(exports, "topk", ()=>(0, _topk.topk));
parcelHelpers.export(exports, "truncatedNormal", ()=>(0, _truncatedNormal.truncatedNormal));
parcelHelpers.export(exports, "unique", ()=>(0, _unique.unique));
parcelHelpers.export(exports, "unsortedSegmentSum", ()=>(0, _unsortedSegmentSum.unsortedSegmentSum));
parcelHelpers.export(exports, "unstack", ()=>(0, _unstack.unstack));
parcelHelpers.export(exports, "upperBound", ()=>(0, _upperBound.upperBound));
parcelHelpers.export(exports, "variable", ()=>(0, _variable.variable));
parcelHelpers.export(exports, "where", ()=>(0, _where.where));
parcelHelpers.export(exports, "whereAsync", ()=>(0, _whereAsync.whereAsync));
parcelHelpers.export(exports, "zeros", ()=>(0, _zeros.zeros));
parcelHelpers.export(exports, "zerosLike", ()=>(0, _zerosLike.zerosLike));
parcelHelpers.export(exports, "op", ()=>(0, _operation.op));
parcelHelpers.export(exports, "OP_SCOPE_SUFFIX", ()=>(0, _operation.OP_SCOPE_SUFFIX));
// Second level exports.
parcelHelpers.export(exports, "image", ()=>image);
parcelHelpers.export(exports, "linalg", ()=>linalg);
parcelHelpers.export(exports, "losses", ()=>losses);
parcelHelpers.export(exports, "spectral", ()=>spectral);
parcelHelpers.export(exports, "fused", ()=>_fusedOps);
parcelHelpers.export(exports, "signal", ()=>signal);
parcelHelpers.export(exports, "sparse", ()=>sparse);
parcelHelpers.export(exports, "string", ()=>string);
var _rfft = require("./spectral/rfft");
var _fft = require("./spectral/fft");
var _ifft = require("./spectral/ifft");
var _irfft = require("./spectral/irfft");
var _fusedOps = require("./fused_ops");
var _hammingWindow = require("./signal/hamming_window");
var _hannWindow = require("./signal/hann_window");
var _frame = require("./signal/frame");
var _stft = require("./signal/stft");
// Image Ops namespace
var _cropAndResize = require("./image/crop_and_resize");
var _flipLeftRight = require("./image/flip_left_right");
var _grayscaleToRgb = require("./image/grayscale_to_rgb");
var _rotateWithOffset = require("./image/rotate_with_offset");
var _nonMaxSuppression = require("./image/non_max_suppression");
var _nonMaxSuppressionAsync = require("./image/non_max_suppression_async");
var _nonMaxSuppressionWithScore = require("./image/non_max_suppression_with_score");
var _nonMaxSuppressionWithScoreAsync = require("./image/non_max_suppression_with_score_async");
var _nonMaxSuppressionPadded = require("./image/non_max_suppression_padded");
var _nonMaxSuppressionPaddedAsync = require("./image/non_max_suppression_padded_async");
var _resizeBilinear = require("./image/resize_bilinear");
var _resizeNearestNeighbor = require("./image/resize_nearest_neighbor");
var _threshold = require("./image/threshold");
var _transform = require("./image/transform");
// linalg namespace
var _bandPart = require("./linalg/band_part");
var _gramSchmidt = require("./linalg/gram_schmidt");
var _qr = require("./linalg/qr");
// losses namespace;
var _absoluteDifference = require("./losses/absolute_difference");
var _computeWeightedLoss = require("./losses/compute_weighted_loss");
var _cosineDistance = require("./losses/cosine_distance");
var _hingeLoss = require("./losses/hinge_loss");
var _huberLoss = require("./losses/huber_loss");
var _logLoss = require("./losses/log_loss");
var _meanSquaredError = require("./losses/mean_squared_error");
var _sigmoidCrossEntropy = require("./losses/sigmoid_cross_entropy");
var _softmaxCrossEntropy = require("./losses/softmax_cross_entropy");
var _sparseFillEmptyRows = require("./sparse/sparse_fill_empty_rows");
var _sparseReshape = require("./sparse/sparse_reshape");
var _sparseSegmentMean = require("./sparse/sparse_segment_mean");
var _sparseSegmentSum = require("./sparse/sparse_segment_sum");
var _stringNGrams = require("./string/string_n_grams");
var _stringSplit = require("./string/string_split");
var _stringToHashBucketFast = require("./string/string_to_hash_bucket_fast");
var _abs = require("./abs");
var _acos = require("./acos");
var _acosh = require("./acosh");
var _add = require("./add");
var _addN = require("./add_n");
var _all = require("./all");
var _any = require("./any");
var _argMax = require("./arg_max");
var _argMin = require("./arg_min");
var _asin = require("./asin");
var _asinh = require("./asinh");
var _atan = require("./atan");
var _atan2 = require("./atan2");
var _atanh = require("./atanh");
var _avgPool = require("./avg_pool");
var _avgPool3D = require("./avg_pool_3d");
var _basicLstmCell = require("./basic_lstm_cell");
var _batchToSpaceNd = require("./batch_to_space_nd");
var _batchnorm = require("./batchnorm");
var _batchnorm2D = require("./batchnorm2d");
var _batchnorm3D = require("./batchnorm3d");
var _batchnorm4D = require("./batchnorm4d");
var _bincount = require("./bincount");
var _broadcastArgs = require("./broadcast_args");
var _broadcastTo = require("./broadcast_to");
var _buffer = require("./buffer");
var _cast = require("./cast");
var _ceil = require("./ceil");
var _clipByValue = require("./clip_by_value");
var _clone = require("./clone");
var _complex = require("./complex");
var _concat = require("./concat");
var _concat1D = require("./concat_1d");
var _concat2D = require("./concat_2d");
var _concat3D = require("./concat_3d");
var _concat4D = require("./concat_4d");
var _conv1D = require("./conv1d");
var _conv2D = require("./conv2d");
var _conv2DTranspose = require("./conv2d_transpose");
var _conv3D = require("./conv3d");
var _conv3DTranspose = require("./conv3d_transpose");
var _cos = require("./cos");
var _cosh = require("./cosh");
var _cumprod = require("./cumprod");
var _cumsum = require("./cumsum");
var _denseBincount = require("./dense_bincount");
var _depthToSpace = require("./depth_to_space");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _diag = require("./diag");
var _dilation2D = require("./dilation2d");
var _div = require("./div");
var _divNoNan = require("./div_no_nan");
var _dot = require("./dot");
var _einsum = require("./einsum");
var _elu = require("./elu");
var _equal = require("./equal");
var _erf = require("./erf");
var _euclideanNorm = require("./euclidean_norm");
var _exp = require("./exp");
var _expandDims = require("./expand_dims");
var _expm1 = require("./expm1");
var _eye = require("./eye");
var _fill = require("./fill");
var _floor = require("./floor");
var _floorDiv = require("./floorDiv");
var _gather = require("./gather");
var _greater = require("./greater");
var _greaterEqual = require("./greater_equal");
var _imag = require("./imag");
var _isFinite = require("./is_finite");
var _isInf = require("./is_inf");
var _isNan = require("./is_nan");
var _leakyRelu = require("./leaky_relu");
var _less = require("./less");
var _lessEqual = require("./less_equal");
var _linspace = require("./linspace");
var _localResponseNormalization = require("./local_response_normalization");
var _log = require("./log");
var _log1P = require("./log1p");
var _logSigmoid = require("./log_sigmoid");
var _logSoftmax = require("./log_softmax");
var _logSumExp = require("./log_sum_exp");
var _logicalAnd = require("./logical_and");
var _logicalNot = require("./logical_not");
var _logicalOr = require("./logical_or");
var _logicalXor = require("./logical_xor");
var _lowerBound = require("./lower_bound");
var _matMul = require("./mat_mul");
var _max = require("./max");
var _maxPool = require("./max_pool");
var _maxPool3D = require("./max_pool_3d");
var _maxPoolWithArgmax = require("./max_pool_with_argmax");
var _maximum = require("./maximum");
var _mean = require("./mean");
var _meshgrid = require("./meshgrid");
var _min = require("./min");
var _minimum = require("./minimum");
var _mirrorPad = require("./mirror_pad");
var _mod = require("./mod");
var _moments = require("./moments");
var _mul = require("./mul");
var _multiRnnCell = require("./multi_rnn_cell");
var _multinomial = require("./multinomial");
var _neg = require("./neg");
var _notEqual = require("./not_equal");
var _oneHot = require("./one_hot");
var _ones = require("./ones");
var _onesLike = require("./ones_like");
var _outerProduct = require("./outer_product");
var _pad = require("./pad");
var _pad1D = require("./pad1d");
var _pad2D = require("./pad2d");
var _pad3D = require("./pad3d");
var _pad4D = require("./pad4d");
var _pool = require("./pool");
var _pow = require("./pow");
var _prelu = require("./prelu");
var _print = require("./print");
var _prod = require("./prod");
var _raggedTensorToTensor = require("./ragged_tensor_to_tensor");
var _rand = require("./rand");
var _randomGamma = require("./random_gamma");
var _randomNormal = require("./random_normal");
var _randomStandardNormal = require("./random_standard_normal");
var _randomUniform = require("./random_uniform");
var _range = require("./range");
var _real = require("./real");
var _reciprocal = require("./reciprocal");
var _relu = require("./relu");
var _relu6 = require("./relu6");
var _reshape = require("./reshape");
var _reverse = require("./reverse");
var _reverse1D = require("./reverse_1d");
var _reverse2D = require("./reverse_2d");
var _reverse3D = require("./reverse_3d");
var _reverse4D = require("./reverse_4d");
var _round = require("./round");
var _rsqrt = require("./rsqrt");
var _scalar = require("./scalar");
var _selu = require("./selu");
var _separableConv2D = require("./separable_conv2d");
var _setdiff1DAsync = require("./setdiff1d_async");
var _sigmoid = require("./sigmoid");
var _sign = require("./sign");
var _sin = require("./sin");
var _sinh = require("./sinh");
var _slice = require("./slice");
var _slice1D = require("./slice1d");
var _slice2D = require("./slice2d");
var _slice3D = require("./slice3d");
var _slice4D = require("./slice4d");
var _softmax = require("./softmax");
var _softplus = require("./softplus");
var _spaceToBatchNd = require("./space_to_batch_nd");
var _split = require("./split");
var _sqrt = require("./sqrt");
var _square = require("./square");
var _squaredDifference = require("./squared_difference");
var _squeeze = require("./squeeze");
var _stack = require("./stack");
var _step = require("./step");
var _stridedSlice = require("./strided_slice");
var _sub = require("./sub");
var _sum = require("./sum");
var _tan = require("./tan");
var _tanh = require("./tanh");
var _tensor = require("./tensor");
var _tensor1D = require("./tensor1d");
var _tensor2D = require("./tensor2d");
var _tensor3D = require("./tensor3d");
var _tensor4D = require("./tensor4d");
var _tensor5D = require("./tensor5d");
var _tensor6D = require("./tensor6d");
var _tile = require("./tile");
var _topk = require("./topk");
var _truncatedNormal = require("./truncated_normal");
var _unique = require("./unique");
var _unsortedSegmentSum = require("./unsorted_segment_sum");
var _unstack = require("./unstack");
var _upperBound = require("./upper_bound");
var _variable = require("./variable");
var _where = require("./where");
var _whereAsync = require("./where_async");
var _zeros = require("./zeros");
var _zerosLike = require("./zeros_like");
var _booleanMask = require("./boolean_mask");
parcelHelpers.exportAll(_booleanMask, exports);
var _transpose = require("./transpose");
parcelHelpers.exportAll(_transpose, exports);
var _norm = require("./norm");
parcelHelpers.exportAll(_norm, exports);
var _movingAverage = require("./moving_average");
parcelHelpers.exportAll(_movingAverage, exports);
var _scatterNd = require("./scatter_nd");
parcelHelpers.exportAll(_scatterNd, exports);
var _searchSorted = require("./search_sorted");
parcelHelpers.exportAll(_searchSorted, exports);
var _sparseToDense = require("./sparse_to_dense");
parcelHelpers.exportAll(_sparseToDense, exports);
var _gatherNd = require("./gather_nd");
parcelHelpers.exportAll(_gatherNd, exports);
var _dropout = require("./dropout");
parcelHelpers.exportAll(_dropout, exports);
var _signalOpsUtil = require("./signal_ops_util");
parcelHelpers.exportAll(_signalOpsUtil, exports);
var _inTopK = require("./in_top_k");
parcelHelpers.exportAll(_inTopK, exports);
var _operation = require("./operation");
const spectral = {
    fft: (0, _fft.fft),
    ifft: (0, _ifft.ifft),
    rfft: (0, _rfft.rfft),
    irfft: (0, _irfft.irfft)
};
const signal = {
    hammingWindow: (0, _hammingWindow.hammingWindow),
    hannWindow: (0, _hannWindow.hannWindow),
    frame: (0, _frame.frame),
    stft: (0, _stft.stft)
};
const image = {
    flipLeftRight: (0, _flipLeftRight.flipLeftRight),
    grayscaleToRGB: (0, _grayscaleToRgb.grayscaleToRGB),
    resizeNearestNeighbor: (0, _resizeNearestNeighbor.resizeNearestNeighbor),
    resizeBilinear: (0, _resizeBilinear.resizeBilinear),
    rotateWithOffset: (0, _rotateWithOffset.rotateWithOffset),
    cropAndResize: (0, _cropAndResize.cropAndResize),
    nonMaxSuppression: (0, _nonMaxSuppression.nonMaxSuppression),
    nonMaxSuppressionAsync: (0, _nonMaxSuppressionAsync.nonMaxSuppressionAsync),
    nonMaxSuppressionWithScore: (0, _nonMaxSuppressionWithScore.nonMaxSuppressionWithScore),
    nonMaxSuppressionWithScoreAsync: (0, _nonMaxSuppressionWithScoreAsync.nonMaxSuppressionWithScoreAsync),
    nonMaxSuppressionPadded: (0, _nonMaxSuppressionPadded.nonMaxSuppressionPadded),
    nonMaxSuppressionPaddedAsync: (0, _nonMaxSuppressionPaddedAsync.nonMaxSuppressionPaddedAsync),
    threshold: (0, _threshold.threshold),
    transform: (0, _transform.transform)
};
const linalg = {
    bandPart: (0, _bandPart.bandPart),
    gramSchmidt: (0, _gramSchmidt.gramSchmidt),
    qr: (0, _qr.qr)
};
const losses = {
    absoluteDifference: (0, _absoluteDifference.absoluteDifference),
    computeWeightedLoss: (0, _computeWeightedLoss.computeWeightedLoss),
    cosineDistance: (0, _cosineDistance.cosineDistance),
    hingeLoss: (0, _hingeLoss.hingeLoss),
    huberLoss: (0, _huberLoss.huberLoss),
    logLoss: (0, _logLoss.logLoss),
    meanSquaredError: (0, _meanSquaredError.meanSquaredError),
    sigmoidCrossEntropy: (0, _sigmoidCrossEntropy.sigmoidCrossEntropy),
    softmaxCrossEntropy: (0, _softmaxCrossEntropy.softmaxCrossEntropy)
};
const sparse = {
    sparseFillEmptyRows: (0, _sparseFillEmptyRows.sparseFillEmptyRows),
    sparseReshape: (0, _sparseReshape.sparseReshape),
    sparseSegmentMean: (0, _sparseSegmentMean.sparseSegmentMean),
    sparseSegmentSum: (0, _sparseSegmentSum.sparseSegmentSum)
};
// tslint:disable-next-line:variable-name
const string = {
    stringNGrams: (0, _stringNGrams.stringNGrams),
    stringSplit: (0, _stringSplit.stringSplit),
    stringToHashBucketFast: (0, _stringToHashBucketFast.stringToHashBucketFast)
};

},{"./spectral/rfft":"fIfl7","./spectral/fft":"7YCJ9","./spectral/ifft":"7vNKl","./spectral/irfft":"dnH8b","./fused_ops":"jQn57","./signal/hamming_window":"bBKd4","./signal/hann_window":"7yuhX","./signal/frame":"3665X","./signal/stft":"ksWOt","./image/crop_and_resize":"2GYh2","./image/flip_left_right":"6NiZC","./image/grayscale_to_rgb":"8B5fu","./image/rotate_with_offset":"58R8U","./image/non_max_suppression":"5sIup","./image/non_max_suppression_async":"3ImA3","./image/non_max_suppression_with_score":"huOms","./image/non_max_suppression_with_score_async":"589vh","./image/non_max_suppression_padded":"gmow1","./image/non_max_suppression_padded_async":"aHKAP","./image/resize_bilinear":"6BlGD","./image/resize_nearest_neighbor":"j59vH","./image/threshold":"3mVug","./image/transform":"1gZXL","./linalg/band_part":"2da9A","./linalg/gram_schmidt":"a0HvL","./linalg/qr":"88wHu","./losses/absolute_difference":"k9zEd","./losses/compute_weighted_loss":"3qnOZ","./losses/cosine_distance":"7LGWZ","./losses/hinge_loss":"8oLvM","./losses/huber_loss":"zElgM","./losses/log_loss":"1OgmA","./losses/mean_squared_error":"1cDiv","./losses/sigmoid_cross_entropy":"gchIh","./losses/softmax_cross_entropy":"ekpYc","./sparse/sparse_fill_empty_rows":"a251V","./sparse/sparse_reshape":"cn1qm","./sparse/sparse_segment_mean":"hAd2Q","./sparse/sparse_segment_sum":"3bJzC","./string/string_n_grams":"bNhAD","./string/string_split":"g2RFp","./string/string_to_hash_bucket_fast":"aa95R","./abs":"4PgZA","./acos":"a3XeV","./acosh":"4a2CB","./add":"i4ulI","./add_n":"ei3ol","./all":"1HQ6J","./any":"9kpQj","./arg_max":"5OZBI","./arg_min":"gMsLv","./asin":"bbCcQ","./asinh":"iPNhy","./atan":"bnFT9","./atan2":"h10xF","./atanh":"dBj8W","./avg_pool":"ljrt7","./avg_pool_3d":"k1jsf","./basic_lstm_cell":"3HYWm","./batch_to_space_nd":"fvVrh","./batchnorm":"8hFsz","./batchnorm2d":"l93Zr","./batchnorm3d":"aXHC3","./batchnorm4d":"jafZQ","./bincount":"2BACb","./broadcast_args":"cHQqH","./broadcast_to":"33myr","./buffer":"e0wS6","./cast":"a7v0X","./ceil":"iifhN","./clip_by_value":"1jqRn","./clone":"cWcE6","./complex":"h6n1M","./concat":"jfkcZ","./concat_1d":"dSDh7","./concat_2d":"3UOic","./concat_3d":"8MUc0","./concat_4d":"gYbyt","./conv1d":"9JA7s","./conv2d":"94uN6","./conv2d_transpose":"lxl1Y","./conv3d":"fWVS8","./conv3d_transpose":"1ehOM","./cos":"jGVos","./cosh":"lco0N","./cumprod":"iVzoY","./cumsum":"3jWWj","./dense_bincount":"6QNxL","./depth_to_space":"6XiCc","./depthwise_conv2d":"kqwkG","./diag":"cjdna","./dilation2d":"1yV9N","./div":"3bNgZ","./div_no_nan":"8t5q0","./dot":"7yhj3","./einsum":"6vZGq","./elu":"2zzFy","./equal":"dg46U","./erf":"79vMO","./euclidean_norm":"cLzbk","./exp":"75ybM","./expand_dims":"9coIV","./expm1":"g03Mx","./eye":"Rh8TY","./fill":"dRjVH","./floor":"k53Wo","./floorDiv":"cRmmy","./gather":"lFXWL","./greater":"cdsGN","./greater_equal":"3ztC3","./imag":"4ZVj9","./is_finite":"d4RQc","./is_inf":"gw4BW","./is_nan":"3TZxM","./leaky_relu":"7u3Px","./less":"1Jx3h","./less_equal":"6NYBp","./linspace":"kLK3E","./local_response_normalization":"8x0DH","./log":"loW45","./log1p":"4UhQW","./log_sigmoid":"4GnLt","./log_softmax":"7XjWG","./log_sum_exp":"5eruw","./logical_and":"5Pn2X","./logical_not":"2PmTV","./logical_or":"as0et","./logical_xor":"luRmM","./lower_bound":"e32KR","./mat_mul":"SZp9a","./max":"13F1p","./max_pool":"i0Rrj","./max_pool_3d":"1iVmi","./max_pool_with_argmax":"gQuAD","./maximum":"clLCR","./mean":"aFTiZ","./meshgrid":"jBiGM","./min":"1MktL","./minimum":"bXpug","./mirror_pad":"kApVB","./mod":"js6fK","./moments":"eqmi8","./mul":"8s4p1","./multi_rnn_cell":"8PIwB","./multinomial":"cyXIJ","./neg":"0PGOC","./not_equal":"cu4OV","./one_hot":"5171s","./ones":"dl9XL","./ones_like":"iI53r","./outer_product":"4IFP5","./pad":"6hj7a","./pad1d":"khUzn","./pad2d":"2JSzi","./pad3d":"k2QuB","./pad4d":"eQdLI","./pool":"9vxAG","./pow":"9jbjX","./prelu":"hazkZ","./print":"63DiP","./prod":"eD7WT","./ragged_tensor_to_tensor":"01W6J","./rand":"35P6K","./random_gamma":"Ze5mN","./random_normal":"ilcdV","./random_standard_normal":"7paic","./random_uniform":"24OwU","./range":"872pI","./real":"bX5g4","./reciprocal":"UdMo5","./relu":"azijv","./relu6":"zIzY1","./reshape":"45nfd","./reverse":"j7SBT","./reverse_1d":"ftjvT","./reverse_2d":"2dak6","./reverse_3d":"3Zn90","./reverse_4d":"335y6","./round":"dvXm5","./rsqrt":"8BuqG","./scalar":"jMh5J","./selu":"8MGVt","./separable_conv2d":"6NvRc","./setdiff1d_async":"5kqj6","./sigmoid":"gXSuy","./sign":"h3t4j","./sin":"shyaU","./sinh":"50NCL","./slice":"ist4s","./slice1d":"ex5pZ","./slice2d":"50EPC","./slice3d":"u6rI5","./slice4d":"18PEc","./softmax":"lB9jN","./softplus":"knPhy","./space_to_batch_nd":"h2QsM","./split":"kOQiE","./sqrt":"aMJIO","./square":"52Axi","./squared_difference":"8fw9V","./squeeze":"bqHGH","./stack":"c5VLA","./step":"jjkm2","./strided_slice":"5ngVB","./sub":"mafuF","./sum":"91lxl","./tan":"fUiCG","./tanh":"gSeNp","./tensor":"eIzFA","./tensor1d":"cZy9A","./tensor2d":"lvfFL","./tensor3d":"dd1iP","./tensor4d":"7vQLF","./tensor5d":"nQwcC","./tensor6d":"8WRPd","./tile":"kFneb","./topk":"lELoV","./truncated_normal":"ioTIz","./unique":"bGqVD","./unsorted_segment_sum":"9iL2G","./unstack":"doWO0","./upper_bound":"6VUvK","./variable":"2Z5i1","./where":"3ZR1W","./where_async":"lFKuj","./zeros":"6EVbo","./zeros_like":"dwK1F","./boolean_mask":"7kjVm","./transpose":"5Lger","./norm":"3lSqt","./moving_average":"5NSiX","./scatter_nd":"bfFmC","./search_sorted":"fTzhX","./sparse_to_dense":"bPJFe","./gather_nd":"8605G","./dropout":"jRq6V","./signal_ops_util":"kCeNh","./in_top_k":"jQQbM","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fIfl7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rfft", ()=>rfft);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../../util");
var _complex = require("../complex");
var _concat = require("../concat");
var _imag = require("../imag");
var _operation = require("../operation");
var _real = require("../real");
var _reshape = require("../reshape");
var _slice = require("../slice");
var _split = require("../split");
var _zeros = require("../zeros");
var _zerosLike = require("../zeros_like");
var _fft = require("./fft");
/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function rfft_(input, fftLength) {
    (0, _util.assert)(input.dtype === "float32", ()=>`The dtype for rfft() must be real value but got ${input.dtype}`);
    let innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let adjustedInput;
    if (fftLength != null && fftLength < innerDimensionSize) {
        // Need to crop
        const begin = input.shape.map((v)=>0);
        const size = input.shape.map((v)=>v);
        size[input.shape.length - 1] = fftLength;
        adjustedInput = (0, _slice.slice)(input, begin, size);
        innerDimensionSize = fftLength;
    } else if (fftLength != null && fftLength > innerDimensionSize) {
        // Need to pad with zeros
        const zerosShape = input.shape.map((v)=>v);
        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
        adjustedInput = (0, _concat.concat)([
            input,
            (0, _zeros.zeros)(zerosShape)
        ], input.shape.length - 1);
        innerDimensionSize = fftLength;
    } else adjustedInput = input;
    // Complement the input with zero imaginary numbers.
    const zerosInput = (0, _zerosLike.zerosLike)(adjustedInput);
    const complexInput = (0, _reshape.reshape)((0, _complex.complex)(adjustedInput, zerosInput), [
        batch,
        innerDimensionSize
    ]);
    const ret = (0, _fft.fft)(complexInput);
    // Exclude complex conjugations. These conjugations are put symmetrically.
    const half = Math.floor(innerDimensionSize / 2) + 1;
    const realValues = (0, _real.real)(ret);
    const imagValues = (0, _imag.imag)(ret);
    const realComplexConjugate = (0, _split.split)(realValues, [
        half,
        innerDimensionSize - half
    ], realValues.shape.length - 1);
    const imagComplexConjugate = (0, _split.split)(imagValues, [
        half,
        innerDimensionSize - half
    ], imagValues.shape.length - 1);
    const outputShape = adjustedInput.shape.slice();
    outputShape[adjustedInput.shape.length - 1] = half;
    return (0, _reshape.reshape)((0, _complex.complex)(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
}
const rfft = (0, _operation.op)({
    rfft_
});

},{"../../util":"9v6Fb","../complex":"h6n1M","../concat":"jfkcZ","../imag":"4ZVj9","../operation":"l6IGY","../real":"bX5g4","../reshape":"45nfd","../slice":"ist4s","../split":"kOQiE","../zeros":"6EVbo","../zeros_like":"dwK1F","./fft":"7YCJ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfkcZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _clone = require("./clone");
var _operation = require("./operation");
/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function concat_(tensors, axis = 0) {
    (0, _util.assert)(tensors.length >= 1, ()=>"Pass at least one tensor to concat");
    const $tensors = (0, _tensorUtilEnv.convertToTensorArray)(tensors, "tensors", "concat", "string_or_numeric");
    if ($tensors[0].dtype === "complex64") $tensors.forEach((tensor)=>{
        if (tensor.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
    });
    if ($tensors.length === 1) return (0, _clone.clone)($tensors[0]);
    const inputs = $tensors;
    const attr = {
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Concat), inputs, attr);
}
const concat = (0, _operation.op)({
    concat_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./clone":"cWcE6","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ist4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function slice_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice", "string_or_numeric");
    if ($x.rank === 0) throw new Error("Slicing scalar is not possible");
    const inputs = {
        x: $x
    };
    const attrs = {
        begin,
        size
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Slice), inputs, attrs);
}
const slice = (0, _operation.op)({
    slice_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOQiE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "split", ()=>split);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function split_(x, numOrSizeSplits, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "split");
    const inputs = {
        x: $x
    };
    const attr = {
        numOrSizeSplits,
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SplitV), inputs, attr);
}
const split = (0, _operation.op)({
    split_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6EVbo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "zeros", ()=>zeros);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
var _complex = require("./complex");
function zeros(shape, dtype = "float32") {
    if (dtype === "complex64") {
        const real = zeros(shape, "float32");
        const imag = zeros(shape, "float32");
        return (0, _complex.complex)(real, imag);
    }
    const values = (0, _util.makeZerosTypedArray)((0, _util.sizeFromShape)(shape), dtype);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}

},{"../engine":"1aEvR","../util":"9v6Fb","./complex":"h6n1M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwK1F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zerosLike", ()=>zerosLike);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function zerosLike_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "zerosLike");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ZerosLike), inputs);
}
const zerosLike = (0, _operation.op)({
    zerosLike_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7YCJ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fft", ()=>fft);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function fft_(input) {
    (0, _util.assert)(input.dtype === "complex64", ()=>`The dtype for tf.spectral.fft() must be complex64 ` + `but got ${input.dtype}.`);
    const inputs = {
        input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.FFT), inputs);
}
const fft = (0, _operation.op)({
    fft_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vNKl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ifft", ()=>ifft);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function ifft_(input) {
    (0, _util.assert)(input.dtype === "complex64", ()=>`The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);
    const inputs = {
        input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.IFFT), inputs);
}
const ifft = (0, _operation.op)({
    ifft_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnH8b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "irfft", ()=>irfft);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _complex = require("../complex");
var _concat = require("../concat");
var _imag = require("../imag");
var _mul = require("../mul");
var _operation = require("../operation");
var _real = require("../real");
var _reshape = require("../reshape");
var _reverse = require("../reverse");
var _scalar = require("../scalar");
var _slice = require("../slice");
var _ifft = require("./ifft");
/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function irfft_(input) {
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let ret;
    if (innerDimensionSize <= 2) {
        const complexInput = (0, _reshape.reshape)(input, [
            batch,
            innerDimensionSize
        ]);
        ret = (0, _ifft.ifft)(complexInput);
    } else {
        // The length of unique components of the DFT of a real-valued signal
        // is 2 * (input_len - 1)
        const outputShape = [
            batch,
            2 * (innerDimensionSize - 1)
        ];
        const realInput = (0, _reshape.reshape)((0, _real.real)(input), [
            batch,
            innerDimensionSize
        ]);
        const imagInput = (0, _reshape.reshape)((0, _imag.imag)(input), [
            batch,
            innerDimensionSize
        ]);
        const realConjugate = (0, _reverse.reverse)((0, _slice.slice)(realInput, [
            0,
            1
        ], [
            batch,
            innerDimensionSize - 2
        ]), 1);
        const imagConjugate = (0, _mul.mul)((0, _reverse.reverse)((0, _slice.slice)(imagInput, [
            0,
            1
        ], [
            batch,
            innerDimensionSize - 2
        ]), 1), (0, _scalar.scalar)(-1));
        const r = (0, _concat.concat)([
            realInput,
            realConjugate
        ], 1);
        const i = (0, _concat.concat)([
            imagInput,
            imagConjugate
        ], 1);
        const complexInput1 = (0, _reshape.reshape)((0, _complex.complex)(r, i), [
            outputShape[0],
            outputShape[1]
        ]);
        ret = (0, _ifft.ifft)(complexInput1);
    }
    ret = (0, _real.real)(ret);
    // reshape the result if the input is 3D tensor.
    if (input.rank === 3 && input.shape[0] !== 0) {
        const temp = ret;
        const batch1 = input.shape[0];
        ret = (0, _reshape.reshape)(ret, [
            batch1,
            ret.shape[0] / batch1,
            ret.shape[1]
        ]);
        temp.dispose();
    }
    return ret;
}
const irfft = (0, _operation.op)({
    irfft_
});

},{"../complex":"h6n1M","../concat":"jfkcZ","../imag":"4ZVj9","../mul":"8s4p1","../operation":"l6IGY","../real":"bX5g4","../reshape":"45nfd","../reverse":"j7SBT","../scalar":"jMh5J","../slice":"ist4s","./ifft":"7vNKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7SBT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse", ()=>reverse);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function reverse_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    const inputs = {
        x: $x
    };
    const attrs = {
        dims: axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Reverse), inputs, attrs);
}
const reverse = (0, _operation.op)({
    reverse_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMh5J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "scalar", ()=>scalar);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function scalar(value, dtype) {
    if (((0, _util.isTypedArray)(value) && dtype !== "string" || Array.isArray(value)) && dtype !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
    if (dtype === "string" && (0, _util.isTypedArray)(value) && !(value instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
    const shape = [];
    const inferredShape = [];
    return (0, _tensorOpsUtil.makeTensor)(value, shape, inferredShape, dtype);
}

},{"../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQn57":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2d", ()=>(0, _conv2D.conv2d));
parcelHelpers.export(exports, "depthwiseConv2d", ()=>(0, _depthwiseConv2D.depthwiseConv2d));
parcelHelpers.export(exports, "matMul", ()=>(0, _matMul.matMul));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _conv2D = require("./fused/conv2d");
var _depthwiseConv2D = require("./fused/depthwise_conv2d");
var _matMul = require("./fused/mat_mul");

},{"./fused/conv2d":"8Yoo5","./fused/depthwise_conv2d":"crRmt","./fused/mat_mul":"gVEWM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Yoo5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2d", ()=>conv2d);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _gradients = require("../../gradients");
var _kernelNames = require("../../kernel_names");
var _tensorUtil = require("../../tensor_util");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _add = require("../add");
var _broadcastUtil = require("../broadcast_util");
var _conv2D = require("../conv2d");
var _conv2DBackpropFilter = require("../conv2d_backprop_filter");
var _conv2DBackpropInput = require("../conv2d_backprop_input");
var _convUtil = require("../conv_util");
var _fusedUtil = require("../fused_util");
var _operation = require("../operation");
var _reshape = require("../reshape");
/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */ function fusedConv2d_({ x , filter , strides , pad , dataFormat ="NHWC" , dilations =[
    1,
    1
] , dimRoundingMode , bias , activation ="linear" , preluActivationWeights , leakyreluAlpha  }) {
    activation = activation || "linear";
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        // TODO: Transpose bias and preluActivationWeights properly for NCHW
        // format before computation.
        _util.assert(dataFormat === "NHWC", ()=>`Error in fused conv2d: got dataFormat of ${dataFormat} but ` + `only NHWC is currently supported for the case of gradient depth ` + `is 0 and the activation is not linear.`);
        let result = (0, _conv2D.conv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) result = (0, _add.add)(result, bias);
        return (0, _fusedUtil.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2d", "float32");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2d", "float32");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in fused conv2d: input must be rank 4, but got rank ` + `${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in fused conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    _convUtil.checkPadOnDimRoundingMode("fused conv2d", pad, dimRoundingMode);
    const inputChannels = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    _util.assert($filter.shape[2] === inputChannels, ()=>`Error in conv2d: depth of input (${inputChannels}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in conv2D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused conv2d");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $x);
        // According to TensorFlow, the bias is supposed be a 1-D tensor or a
        // scalar.
        //
        // 3-D or 4-D bias is not disabled for NHWC format, because they are
        // currently being used in some cases. For examplem in our code base,
        // https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/fused_conv2d_test.ts#L1972.
        if (dataFormat === "NHWC") _broadcastUtil.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
        else {
            _util.assert($bias.shape.length <= 1, ()=>`Error in fused conv2d: only supports scalar or 1-D Tensor ` + `bias for NCHW format but got the bias of ` + `rank-${$bias.shape.length}.`);
            _util.assert($bias.shape.length === 0 || $bias.shape[0] === convInfo.outChannels || $bias.shape[0] === 1, ()=>`Error in fused conv2d: bias shape (${$bias.shape}) is not ` + `compatible with the number of output channels ` + `(${convInfo.outChannels})`);
        }
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        // PReLU's activation weights could be a scalar, a 1-D tensor or a 3-D
        // tensor.
        const alphaShape = preluActivationWeights.shape;
        _util.assert(alphaShape.length <= 1 || alphaShape.length === 3, ()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or ` + `3-D Tensor PReLU activation weights but got a tensor of ` + `rank-${alphaShape.length}.`);
        if (alphaShape.length === 1) // Whether the data format is NCHW or NHWC, the 1-D PReLU activation
        // weights tensor should be aligned with the output channels of conv2d
        // result.
        _util.assert(alphaShape[0] === 1 || alphaShape[0] === convInfo.outChannels, ()=>`Error in fused conv2d: PReLU activation weights ` + `(${alphaShape}) is not compatible with the number of output ` + `channels (${convInfo.outChannels}).`);
        else if (alphaShape.length === 3) // Whether the data format is NCHW or NHWC, the PReLU activation weights
        // tensor should has the compatible shape with the result of conv2d.
        try {
            _broadcastUtil.assertAndGetBroadcastShape(alphaShape, convInfo.outShape);
        } catch (e) {
            const errMsg = `Error in fused conv2d: PReLU activation weights (${alphaShape}) ` + `is not compatible with the output shape of the conv2d ` + `(${convInfo.outShape}).`;
            throw Error(errMsg);
        }
        $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused conv2d");
    }
    const grad = (dy, saved)=>{
        _util.assert(dataFormat === "NHWC", ()=>`Error in gradient of fused conv2D: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
        const [$filter, x4D, y, $bias] = saved;
        const dyActivation = (0, _fusedUtil.getFusedDyActivation)(dy, y, activation);
        _util.assert(_convUtil.tupleValuesAreOne(dilations), ()=>"Error in gradient of fused conv2D: " + `dilation rates greater than 1 ` + `are not yet supported in gradients. Got dilations '${dilations}'`);
        const xDer = (0, _conv2DBackpropInput.conv2DBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad);
        const filterDer = (0, _conv2DBackpropFilter.conv2DBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad);
        const der = [
            xDer,
            filterDer
        ];
        if ($bias != null) {
            const biasDer = (0, _fusedUtil.getFusedBiasGradient)($bias, dyActivation);
            der.push(biasDer);
        }
        return der;
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode,
        activation,
        leakyreluAlpha
    };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0, _gradients.customGrad)((x4D, filter, save)=>{
            let res = // tslint:disable-next-line: no-unnecessary-type-assertion
            (0, _engine.ENGINE).runKernel((0, _kernelNames.FusedConv2D), inputs, attrs);
            save([
                filter,
                x4D,
                res
            ]);
            if (reshapedTo4D) // tslint:disable-next-line: no-unnecessary-type-assertion
            res = (0, _reshape.reshape)(res, [
                res.shape[1],
                res.shape[2],
                res.shape[3]
            ]);
            return {
                value: res,
                gradFunc: grad
            };
        });
        return customOp(x4D, $filter);
    } else {
        const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save)=>{
            let res = (0, _engine.ENGINE).runKernel((0, _kernelNames.FusedConv2D), inputs, attrs);
            save([
                filter,
                x4D,
                res,
                bias
            ]);
            if (reshapedTo4D) // tslint:disable-next-line: no-unnecessary-type-assertion
            res = (0, _reshape.reshape)(res, [
                res.shape[1],
                res.shape[2],
                res.shape[3]
            ]);
            return {
                value: res,
                gradFunc: grad
            };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const conv2d = (0, _operation.op)({
    fusedConv2d_
});

},{"../../engine":"1aEvR","../../gradients":"4PSmY","../../kernel_names":"2CzXQ","../../tensor_util":"kUGKD","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../add":"i4ulI","../broadcast_util":"kQqEF","../conv2d":"94uN6","../conv2d_backprop_filter":"dg2XP","../conv2d_backprop_input":"2dggy","../conv_util":"oHP2H","../fused_util":"9OXSQ","../operation":"l6IGY","../reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4PSmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "customGrad", ()=>customGrad);
parcelHelpers.export(exports, "variableGrads", ()=>variableGrads);
parcelHelpers.export(exports, "valueAndGrad", ()=>valueAndGrad);
parcelHelpers.export(exports, "valueAndGrads", ()=>valueAndGrads);
parcelHelpers.export(exports, "grad", ()=>grad);
parcelHelpers.export(exports, "grads", ()=>grads);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _tensor = require("./tensor");
var _tensorUtilEnv = require("./tensor_util_env");
var _util = require("./util");
/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function grad(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in grad(f) must be a function");
    return (x, dy)=>{
        // x can be of any dtype, thus null as the last argument.
        const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tf.grad", "string_or_numeric");
        const $dy = dy != null ? (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "tf.grad") : null;
        return (0, _engine.ENGINE).tidy(()=>{
            const { value , grads  } = (0, _engine.ENGINE).gradients(()=>f($x), [
                $x
            ], $dy);
            if ($dy != null) _util.assertShapesMatch(value.shape, $dy.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)");
            checkGrads(grads);
            return grads[0];
        });
    };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function grads(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in grads(f) must be a function");
    return (args, dy)=>{
        _util.assert(Array.isArray(args), ()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
        // args can be of any dtype, thus null as the last argument.
        const $args = (0, _tensorUtilEnv.convertToTensorArray)(args, "args", "tf.grads", "string_or_numeric");
        const $dy = dy != null ? (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "tf.grads") : null;
        return (0, _engine.ENGINE).tidy(()=>{
            const { value , grads  } = (0, _engine.ENGINE).gradients(()=>f(...$args), $args, $dy);
            if ($dy != null) _util.assertShapesMatch(value.shape, $dy.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])");
            checkGrads(grads);
            return grads;
        });
    };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function valueAndGrad(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in valueAndGrad(f) must be a function");
    return (x, dy)=>{
        _util.assert(x instanceof (0, _tensor.Tensor), ()=>"The x passed in valueAndGrad(f)(x) must be a tensor");
        _util.assert(dy == null || dy instanceof (0, _tensor.Tensor), ()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
        const { grads , value  } = (0, _engine.ENGINE).gradients(()=>f(x), [
            x
        ], dy);
        checkGrads(grads);
        return {
            grad: grads[0],
            value
        };
    };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function valueAndGrads(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in valueAndGrads(f) must be a function");
    return (args, dy)=>{
        _util.assert(Array.isArray(args) && args.every((arg)=>arg instanceof (0, _tensor.Tensor)), ()=>"The args passed in valueAndGrads(f)(args) must be array of tensors");
        _util.assert(dy == null || dy instanceof (0, _tensor.Tensor), ()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
        const res = (0, _engine.ENGINE).gradients(()=>f(...args), args, dy);
        if (dy != null) _util.assertShapesMatch(res.value.shape, dy.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])");
        checkGrads(res.grads);
        return res;
    };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function variableGrads(f, varList) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in variableGrads(f) must be a function");
    _util.assert(varList == null || Array.isArray(varList) && varList.every((v)=>v instanceof (0, _tensor.Variable)), ()=>"The varList passed in variableGrads(f, varList) must be an array of variables");
    const specifiedVarList = varList != null;
    if (!specifiedVarList) {
        // Get all of the trainable variables.
        varList = [];
        for(const varName in (0, _engine.ENGINE).registeredVariables)varList.push((0, _engine.ENGINE).registeredVariables[varName]);
    }
    const specifiedNonTrainable = specifiedVarList ? varList.filter((variable)=>!variable.trainable) : null;
    // Prune non-trainable variables.
    const originalVarCount = varList.length;
    varList = varList.filter((variable)=>variable.trainable);
    _util.assert(varList.length > 0, ()=>`variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);
    const allowNoGradients = true;
    const { value , grads  } = (0, _engine.ENGINE).gradients(f, varList, null, allowNoGradients);
    _util.assert(grads.some((g)=>g != null), ()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().");
    _util.assert(value.rank === 0, ()=>`The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);
    const namedGrads = {};
    varList.forEach((v, i)=>{
        if (grads[i] != null) namedGrads[v.name] = grads[i];
    });
    if (specifiedNonTrainable != null) // If varList is explicitly provided and contains non-trainable values,
    // add them to the returned gradients with `null` values.
    specifiedNonTrainable.forEach((v)=>namedGrads[v.name] = null);
    return {
        value,
        grads: namedGrads
    };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */ function customGrad(f) {
    return (0, _engine.ENGINE).customGrad(f);
}
function checkGrads(grads) {
    const numNullGradients = grads.filter((g)=>g == null).length;
    if (numNullGradients > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}

},{"./engine":"1aEvR","./tensor":"DPGBx","./tensor_util_env":"fsyzK","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94uN6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2d", ()=>conv2d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function conv2d_(x, filter, strides, pad, dataFormat = "NHWC", dilations = [
    1,
    1
], dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2d", "float32");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2d", "float32");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    _convUtil.checkPadOnDimRoundingMode("conv2d", pad, dimRoundingMode);
    const inDepth = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    _util.assert(inDepth === $filter.shape[2], ()=>`Error in conv2d: depth of input (${inDepth}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in conv2D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const inputs = {
        x: x4D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Conv2D), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const conv2d = (0, _operation.op)({
    conv2d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dg2XP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropFilter", ()=>conv2DBackpropFilter);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */ function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = "NHWC", dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) x4D = (0, _reshape.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2]
    ]);
    let dy4D = dy;
    if (dy4D.rank === 3) dy4D = (0, _reshape.reshape)(dy, [
        1,
        dy.shape[0],
        dy.shape[1],
        dy.shape[2]
    ]);
    _util.assert(x4D.rank === 4, ()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);
    _util.assert(dy4D.rank === 4, ()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);
    _util.assert(filterShape.length === 4, ()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);
    const inDepth = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    const outDepth = dataFormat === "NHWC" ? dy4D.shape[3] : dy4D.shape[1];
    _util.assert(inDepth === filterShape[2], ()=>`Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);
    _util.assert(outDepth === filterShape[3], ()=>`Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);
    _convUtil.checkPadOnDimRoundingMode("conv2dDerFilter", pad, dimRoundingMode);
    const inputs = {
        x: x4D,
        dy: dy4D
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dimRoundingMode,
        filterShape
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Conv2DBackpropFilter), inputs, attrs);
}
const conv2DBackpropFilter = (0, _operation.op)({
    conv2DBackpropFilter_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2dggy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropInput", ()=>conv2DBackpropInput);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */ function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = "NHWC", dimRoundingMode) {
    _util.assert(xShape.length === dy.rank, ()=>`Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape4D = xShape;
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0, _reshape.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2]
        ]);
        xShape4D = [
            1,
            xShape[0],
            xShape[1],
            xShape[2]
        ];
    }
    _util.assert(xShape4D.length === 4, ()=>`Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);
    _util.assert(dy4D.rank === 4, ()=>`Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);
    _util.assert(filter.rank === 4, ()=>`Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);
    const inDepth = dataFormat === "NHWC" ? xShape4D[3] : xShape4D[1];
    const outDepth = dataFormat === "NHWC" ? dy4D.shape[3] : dy4D.shape[1];
    _util.assert(inDepth === filter.shape[2], ()=>`Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);
    _util.assert(outDepth === filter.shape[3], ()=>`Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);
    _convUtil.checkPadOnDimRoundingMode("conv2dDerInput", pad, dimRoundingMode);
    const inputs = {
        dy: dy4D,
        filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dimRoundingMode,
        inputShape: xShape4D
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Conv2DBackpropInput), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const conv2DBackpropInput = (0, _operation.op)({
    conv2DBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"crRmt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _gradients = require("../../gradients");
var _kernelNames = require("../../kernel_names");
var _tensorUtil = require("../../tensor_util");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _add = require("../add");
var _broadcastUtil = require("../broadcast_util");
var _convUtil = require("../conv_util");
var _depthwiseConv2D = require("../depthwise_conv2d");
var _depthwiseConv2DNativeBackpropFilter = require("../depthwise_conv2d_native_backprop_filter");
var _depthwiseConv2DNativeBackpropInput = require("../depthwise_conv2d_native_backprop_input");
var _fusedUtil = require("../fused_util");
var _operation = require("../operation");
var _reshape = require("../reshape");
/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */ function fusedDepthwiseConv2d_({ x , filter , strides , pad , dataFormat ="NHWC" , dilations =[
    1,
    1
] , dimRoundingMode , bias , activation ="linear" , preluActivationWeights , leakyreluAlpha  }) {
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        let result = (0, _depthwiseConv2D.depthwiseConv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) result = (0, _add.add)(result, bias);
        return (0, _fusedUtil.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthwiseConv2d", "float32");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "depthwiseConv2d", "float32");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in fused depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in fused depthwiseConv2d: filter must be rank 4, ` + `but got rank ${$filter.rank}.`);
    _util.assert(x4D.shape[3] === $filter.shape[2], ()=>`Error in fused depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in fused depthwiseConv2d: Either strides or dilations must " + `be 1. Got strides ${strides} and dilations '${dilations}'`);
    _convUtil.checkPadOnDimRoundingMode("fused depthwiseConv2d", pad, dimRoundingMode);
    const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused conv2d");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $x);
        _broadcastUtil.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused depthwiseConv2d");
    const grad = (dy, saved)=>{
        _util.assert(_convUtil.tupleValuesAreOne(dilations), ()=>"Error in gradient of fused depthwiseConv2d: dilation rates " + `greater than 1 are not yet supported. Got dilations ` + `'${dilations}'`);
        const [$filter, x4D, y, bias] = saved;
        const dyActivation = (0, _fusedUtil.getFusedDyActivation)(dy, y, activation);
        const xDer = (0, _depthwiseConv2DNativeBackpropInput.depthwiseConv2dNativeBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);
        const filterDer = (0, _depthwiseConv2DNativeBackpropFilter.depthwiseConv2dNativeBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);
        if (bias != null) {
            const biasDer = (0, _fusedUtil.getFusedBiasGradient)($bias, dyActivation);
            return [
                xDer,
                filterDer,
                biasDer
            ];
        }
        return [
            xDer,
            filterDer
        ];
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode,
        activation,
        leakyreluAlpha
    };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0, _gradients.customGrad)((x4D, filter, save)=>{
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let res = (0, _engine.ENGINE).runKernel((0, _kernelNames.FusedDepthwiseConv2D), inputs, attrs);
            save([
                filter,
                x4D,
                res
            ]);
            if (reshapedTo4D) // tslint:disable-next-line: no-unnecessary-type-assertion
            res = (0, _reshape.reshape)(res, [
                res.shape[1],
                res.shape[2],
                res.shape[3]
            ]);
            return {
                value: res,
                gradFunc: grad
            };
        });
        return customOp(x4D, $filter);
    } else {
        const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save)=>{
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let res = (0, _engine.ENGINE).runKernel((0, _kernelNames.FusedDepthwiseConv2D), inputs, attrs);
            save([
                filter,
                x4D,
                res,
                bias
            ]);
            if (reshapedTo4D) // tslint:disable-next-line: no-unnecessary-type-assertion
            res = (0, _reshape.reshape)(res, [
                res.shape[1],
                res.shape[2],
                res.shape[3]
            ]);
            return {
                value: res,
                gradFunc: grad
            };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const depthwiseConv2d = (0, _operation.op)({
    fusedDepthwiseConv2d_
});

},{"../../engine":"1aEvR","../../gradients":"4PSmY","../../kernel_names":"2CzXQ","../../tensor_util":"kUGKD","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../add":"i4ulI","../broadcast_util":"kQqEF","../conv_util":"oHP2H","../depthwise_conv2d":"kqwkG","../depthwise_conv2d_native_backprop_filter":"d54uU","../depthwise_conv2d_native_backprop_input":"bpcTn","../fused_util":"9OXSQ","../operation":"l6IGY","../reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqwkG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function depthwiseConv2d_(x, filter, strides, pad, dataFormat = "NHWC", dilations = [
    1,
    1
], dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthwiseConv2d", "float32");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "depthwiseConv2d", "float32");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    const inChannels = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    _util.assert(inChannels === $filter.shape[2], ()=>`Error in depthwiseConv2d: number of input channels ` + `(${inChannels}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);
    _convUtil.checkPadOnDimRoundingMode("depthwiseConv2d", pad, dimRoundingMode);
    const inputs = {
        x: x4D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.DepthwiseConv2dNative), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const depthwiseConv2d = (0, _operation.op)({
    depthwiseConv2d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d54uU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropFilter", ()=>depthwiseConv2dNativeBackpropFilter);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _operation = require("./operation");
var _reshape = require("./reshape");
function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [
    1,
    1
], dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) x4D = (0, _reshape.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2]
    ]);
    let dy4D = dy;
    if (dy4D.rank === 3) dy4D = (0, _reshape.reshape)(dy, [
        1,
        dy.shape[0],
        dy.shape[1],
        dy.shape[2]
    ]);
    const inputs = {
        x: x4D,
        dy: dy4D
    };
    const attrs = {
        strides,
        pad,
        dimRoundingMode,
        dilations,
        filterShape
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.DepthwiseConv2dNativeBackpropFilter), inputs, attrs);
}
const depthwiseConv2dNativeBackpropFilter = (0, _operation.op)({
    depthwiseConv2dNativeBackpropFilter_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpcTn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropInput", ()=>depthwiseConv2dNativeBackpropInput);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _operation = require("./operation");
var _reshape = require("./reshape");
function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [
    1,
    1
], dimRoundingMode) {
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0, _reshape.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2]
        ]);
    }
    const inputs = {
        dy: dy4D,
        filter
    };
    const attrs = {
        strides,
        pad,
        dimRoundingMode,
        dilations,
        inputShape: xShape
    };
    const res = // tslint:disable-next-line: no-unnecessary-type-assertion
    (0, _engine.ENGINE).runKernel((0, _kernelNames.DepthwiseConv2dNativeBackpropInput), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const depthwiseConv2dNativeBackpropInput = (0, _operation.op)({
    depthwiseConv2dNativeBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVEWM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matMul", ()=>matMul);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _gradients = require("../../gradients");
var _kernelNames = require("../../kernel_names");
var _tensorUtil = require("../../tensor_util");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _add = require("../add");
var _broadcastUtil = require("../broadcast_util");
var _fusedUtil = require("../fused_util");
var _matMul = require("../mat_mul");
var _operation = require("../operation");
var _reshape = require("../reshape");
/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 * - `leakyreluAlpha` Alpha of leakyrelu.
 */ function fusedMatMul_({ a , b , transposeA =false , transposeB =false , bias , activation ="linear" , preluActivationWeights , leakyreluAlpha =0.2 ,  }) {
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        let result = (0, _matMul.matMul)(a, b, transposeA, transposeB);
        if (bias != null) result = (0, _add.add)(result, bias);
        return (0, _fusedUtil.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "fused matMul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "fused matMul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
    const outerDimsA = $a.shape.slice(0, -2);
    const outerDimsB = $b.shape.slice(0, -2);
    const batchDimA = _util.sizeFromShape(outerDimsA);
    const batchDimB = _util.sizeFromShape(outerDimsB);
    _util.assert(innerShapeA === innerShapeB, ()=>`Error in fused matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
    const outShapeOuterDims = _broadcastUtil.assertAndGetBroadcastShape($a.shape.slice(0, -2), $b.shape.slice(0, -2));
    const outShape = outShapeOuterDims.concat([
        outerShapeA,
        outerShapeB
    ]);
    const a3D = transposeA ? (0, _reshape.reshape)($a, [
        batchDimA,
        innerShapeA,
        outerShapeA
    ]) : (0, _reshape.reshape)($a, [
        batchDimA,
        outerShapeA,
        innerShapeA
    ]);
    const b3D = transposeB ? (0, _reshape.reshape)($b, [
        batchDimB,
        outerShapeB,
        innerShapeB
    ]) : (0, _reshape.reshape)($b, [
        batchDimB,
        innerShapeB,
        outerShapeB
    ]);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused matMul");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $a);
        _broadcastUtil.assertAndGetBroadcastShape(outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused matMul");
    const grad = (dy, saved)=>{
        const [a3D, b3D, y, $bias] = saved;
        // we reshape dy because the result of the forward is not
        // necessarily going to be a 3d tensor due to a reshape done at the end of
        // the customOp.
        const dyActivation = (0, _fusedUtil.getFusedDyActivation)((0, _reshape.reshape)(dy, y.shape), y, activation);
        let aDer;
        let bDer;
        if (!transposeA && !transposeB) {
            aDer = (0, _matMul.matMul)(dyActivation, b3D, false, true);
            bDer = (0, _matMul.matMul)(a3D, dyActivation, true, false);
        } else if (!transposeA && transposeB) {
            aDer = (0, _matMul.matMul)(dyActivation, b3D, false, false);
            bDer = (0, _matMul.matMul)(dyActivation, a3D, true, false);
        } else if (transposeA && !transposeB) {
            aDer = (0, _matMul.matMul)(b3D, dyActivation, false, true);
            bDer = (0, _matMul.matMul)(a3D, dyActivation, false, false);
        } else {
            aDer = (0, _matMul.matMul)(b3D, dyActivation, true, true);
            bDer = (0, _matMul.matMul)(dyActivation, a3D, true, true);
        }
        if (bias != null) {
            const biasDer = (0, _fusedUtil.getFusedBiasGradient)($bias, dyActivation);
            return [
                aDer,
                bDer,
                biasDer
            ];
        } else return [
            aDer,
            bDer
        ];
    };
    const inputs = {
        a: a3D,
        b: b3D,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = {
        transposeA,
        transposeB,
        activation,
        leakyreluAlpha
    };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0, _gradients.customGrad)((a3D, b3D, save)=>{
            const res = // tslint:disable-next-line: no-unnecessary-type-assertion
            (0, _engine.ENGINE).runKernel((0, _kernelNames._FusedMatMul), inputs, attrs);
            save([
                a3D,
                b3D,
                res
            ]);
            return {
                value: (0, _reshape.reshape)(res, outShape),
                gradFunc: grad
            };
        });
        return customOp(a3D, b3D);
    } else {
        const customOpWithBias = (0, _gradients.customGrad)((a3D, b3D, $bias, save)=>{
            const res = // tslint:disable-next-line: no-unnecessary-type-assertion
            (0, _engine.ENGINE).runKernel((0, _kernelNames._FusedMatMul), inputs, attrs);
            save([
                a3D,
                b3D,
                res,
                $bias
            ]);
            return {
                value: (0, _reshape.reshape)(res, outShape),
                gradFunc: grad
            };
        });
        return customOpWithBias(a3D, b3D, $bias);
    }
}
const matMul = (0, _operation.op)({
    fusedMatMul_
});

},{"../../engine":"1aEvR","../../gradients":"4PSmY","../../kernel_names":"2CzXQ","../../tensor_util":"kUGKD","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../add":"i4ulI","../broadcast_util":"kQqEF","../fused_util":"9OXSQ","../mat_mul":"SZp9a","../operation":"l6IGY","../reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBKd4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hammingWindow", ()=>hammingWindow);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _operation = require("../operation");
var _signalOpsUtil = require("../signal_ops_util");
/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function hammingWindow_(windowLength) {
    return (0, _signalOpsUtil.cosineWindow)(windowLength, 0.54, 0.46);
}
const hammingWindow = (0, _operation.op)({
    hammingWindow_
});

},{"../operation":"l6IGY","../signal_ops_util":"kCeNh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCeNh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "enclosingPowerOfTwo", ()=>enclosingPowerOfTwo);
parcelHelpers.export(exports, "cosineWindow", ()=>cosineWindow);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor1D = require("./tensor1d");
function enclosingPowerOfTwo(value) {
    // Return 2**N for integer N such that 2**N >= value.
    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}
function cosineWindow(windowLength, a, b) {
    const even = 1 - windowLength % 2;
    const newValues = new Float32Array(windowLength);
    for(let i = 0; i < windowLength; ++i){
        const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);
        newValues[i] = a - b * Math.cos(cosArg);
    }
    return (0, _tensor1D.tensor1d)(newValues, "float32");
}

},{"./tensor1d":"cZy9A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZy9A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor1d", ()=>tensor1d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor1d(values, dtype) {
    (0, _util.assertNonNull)(values);
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray");
    const shape = null;
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yuhX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hannWindow", ()=>hannWindow);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _operation = require("../operation");
var _signalOpsUtil = require("../signal_ops_util");
/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function hannWindow_(windowLength) {
    return (0, _signalOpsUtil.cosineWindow)(windowLength, 0.5, 0.5);
}
const hannWindow = (0, _operation.op)({
    hannWindow_
});

},{"../operation":"l6IGY","../signal_ops_util":"kCeNh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3665X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "frame", ()=>frame);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _concat = require("../concat");
var _fill = require("../fill");
var _operation = require("../operation");
var _reshape = require("../reshape");
var _slice = require("../slice");
var _tensor2D = require("../tensor2d");
/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
    let start = 0;
    const output = [];
    while(start + frameLength <= signal.size){
        output.push((0, _slice.slice)(signal, start, frameLength));
        start += frameStep;
    }
    if (padEnd) while(start < signal.size){
        const padLen = start + frameLength - signal.size;
        const pad = (0, _concat.concat)([
            (0, _slice.slice)(signal, start, frameLength - padLen),
            (0, _fill.fill)([
                padLen
            ], padValue)
        ]);
        output.push(pad);
        start += frameStep;
    }
    if (output.length === 0) return (0, _tensor2D.tensor2d)([], [
        0,
        frameLength
    ]);
    return (0, _reshape.reshape)((0, _concat.concat)(output), [
        output.length,
        frameLength
    ]);
}
const frame = (0, _operation.op)({
    frame_
});

},{"../concat":"jfkcZ","../fill":"dRjVH","../operation":"l6IGY","../reshape":"45nfd","../slice":"ist4s","../tensor2d":"lvfFL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dRjVH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fill", ()=>fill);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function fill(shape, value, dtype) {
    const attrs = {
        shape,
        value,
        dtype
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Fill), {}, attrs);
}

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lvfFL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor2d", ()=>tensor2d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor2d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 2) throw new Error("tensor2d() requires shape to have two numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 2 && inferredShape.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ksWOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stft", ()=>stft);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _mul = require("../mul");
var _operation = require("../operation");
var _signalOpsUtil = require("../signal_ops_util");
var _rfft = require("../spectral/rfft");
var _frame = require("./frame");
var _hannWindow = require("./hann_window");
/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function stft_(signal, frameLength, frameStep, fftLength, windowFn = (0, _hannWindow.hannWindow)) {
    if (fftLength == null) fftLength = (0, _signalOpsUtil.enclosingPowerOfTwo)(frameLength);
    const framedSignal = (0, _frame.frame)(signal, frameLength, frameStep);
    const windowedSignal = (0, _mul.mul)(framedSignal, windowFn(frameLength));
    return (0, _rfft.rfft)(windowedSignal, fftLength);
}
const stft = (0, _operation.op)({
    stft_
});

},{"../mul":"8s4p1","../operation":"l6IGY","../signal_ops_util":"kCeNh","../spectral/rfft":"fIfl7","./frame":"3665X","./hann_window":"7yuhX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GYh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cropAndResize", ()=>cropAndResize);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by cropSize.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function cropAndResize_(image, boxes, boxInd, cropSize, method = "bilinear", extrapolationValue = 0) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "cropAndResize");
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "cropAndResize", "float32");
    const $boxInd = (0, _tensorUtilEnv.convertToTensor)(boxInd, "boxInd", "cropAndResize", "int32");
    const numBoxes = $boxes.shape[0];
    _util.assert($image.rank === 4, ()=>"Error in cropAndResize: image must be rank 4," + `but got rank ${$image.rank}.`);
    _util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, ()=>`Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);
    _util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, ()=>`Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);
    _util.assert(cropSize.length === 2, ()=>`Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);
    _util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, ()=>`cropSize must be atleast [1,1], but was ${cropSize}`);
    _util.assert(method === "bilinear" || method === "nearest", ()=>`method must be bilinear or nearest, but was ${method}`);
    const inputs = {
        image: $image,
        boxes: $boxes,
        boxInd: $boxInd
    };
    const attrs = {
        method,
        extrapolationValue,
        cropSize
    };
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.CropAndResize), inputs, attrs);
    return res;
}
const cropAndResize = (0, _operation.op)({
    cropAndResize_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NiZC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flipLeftRight", ()=>flipLeftRight);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ function flipLeftRight_(image) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "flipLeftRight", "float32");
    _util.assert($image.rank === 4, ()=>"Error in flipLeftRight: image must be rank 4," + `but got rank ${$image.rank}.`);
    const inputs = {
        image: $image
    };
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.FlipLeftRight), inputs, {});
    return res;
}
const flipLeftRight = (0, _operation.op)({
    flipLeftRight_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8B5fu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "grayscaleToRGB", ()=>grayscaleToRGB);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
var _tile = require("../tile");
/**
 * Converts images from grayscale to RGB format.
 *
 * @param image A grayscale tensor to convert. The `image`'s last dimension must
 *     be size 1 with at least a two-dimensional shape.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function grayscaleToRGB_(image) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "grayscaleToRGB");
    const lastDimsIdx = $image.rank - 1;
    const lastDims = $image.shape[lastDimsIdx];
    _util.assert($image.rank >= 2, ()=>"Error in grayscaleToRGB: images must be at least rank 2, " + `but got rank ${$image.rank}.`);
    _util.assert(lastDims === 1, ()=>"Error in grayscaleToRGB: last dimension of a grayscale image " + `should be size 1, but got size ${lastDims}.`);
    const reps = new Array($image.rank);
    reps.fill(1, 0, lastDimsIdx);
    reps[lastDimsIdx] = 3;
    return (0, _tile.tile)($image, reps);
}
const grayscaleToRGB = (0, _operation.op)({
    grayscaleToRGB_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","../tile":"kFneb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kFneb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tile", ()=>tile);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function tile_(x, reps) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tile", "string_or_numeric");
    _util.assert($x.rank === reps.length, ()=>`Error in transpose: rank of input ${$x.rank} ` + `must match length of reps ${reps}.`);
    const inputs = {
        x: $x
    };
    const attrs = {
        reps
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Tile), inputs, attrs);
}
const tile = (0, _operation.op)({
    tile_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58R8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateWithOffset", ()=>rotateWithOffset);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "rotateWithOffset", "float32");
    _util.assert($image.rank === 4, ()=>"Error in rotateWithOffset: image must be rank 4," + `but got rank ${$image.rank}.`);
    const inputs = {
        image: $image
    };
    const attrs = {
        radians,
        fillValue,
        center
    };
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.RotateWithOffset), inputs, attrs);
    return res;
}
const rotateWithOffset = (0, _operation.op)({
    rotateWithOffset_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5sIup":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppression", ()=>nonMaxSuppression);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _operation = require("../operation");
/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppression", "float32");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppression", "float32");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const attrs = {
        maxOutputSize,
        iouThreshold,
        scoreThreshold
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.NonMaxSuppressionV3), {
        boxes: $boxes,
        scores: $scores
    }, attrs);
}
const nonMaxSuppression = (0, _operation.op)({
    nonMaxSuppression_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNbKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppSanityCheck", ()=>nonMaxSuppSanityCheck);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    if (iouThreshold == null) iouThreshold = 0.5;
    if (scoreThreshold == null) scoreThreshold = Number.NEGATIVE_INFINITY;
    if (softNmsSigma == null) softNmsSigma = 0.0;
    const numBoxes = boxes.shape[0];
    maxOutputSize = Math.min(maxOutputSize, numBoxes);
    _util.assert(0 <= iouThreshold && iouThreshold <= 1, ()=>`iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
    _util.assert(boxes.rank === 2, ()=>`boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
    _util.assert(boxes.shape[1] === 4, ()=>`boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
    _util.assert(scores.rank === 1, ()=>"scores must be a 1D tensor");
    _util.assert(scores.shape[0] === numBoxes, ()=>`scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);
    _util.assert(0 <= softNmsSigma && softNmsSigma <= 1, ()=>`softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
    return {
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ImA3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionAsync", ()=>nonMaxSuppressionAsync);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _nonMaxSuppressionImpl = require("../../backends/non_max_suppression_impl");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _tensor1D = require("../tensor1d");
/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppressionAsync");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppressionAsync");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const boxesAndScores = await Promise.all([
        $boxes.data(),
        $scores.data()
    ]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices  } = (0, _nonMaxSuppressionImpl.nonMaxSuppressionV3Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    if ($boxes !== boxes) $boxes.dispose();
    if ($scores !== scores) $scores.dispose();
    return (0, _tensor1D.tensor1d)(selectedIndices, "int32");
}
const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;

},{"../../backends/non_max_suppression_impl":"hzXRp","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../tensor1d":"cZy9A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huOms":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionWithScore", ()=>nonMaxSuppressionWithScore);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _operation = require("../operation");
/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppression");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppression");
    const params = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const inputs = {
        boxes: $boxes,
        scores: $scores
    };
    const attrs = {
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.NonMaxSuppressionV5), inputs, attrs);
    return {
        selectedIndices: result[0],
        selectedScores: result[1]
    };
}
const nonMaxSuppressionWithScore = (0, _operation.op)({
    nonMaxSuppressionWithScore_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"589vh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionWithScoreAsync", ()=>nonMaxSuppressionWithScoreAsync);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _nonMaxSuppressionImpl = require("../../backends/non_max_suppression_impl");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _tensor1D = require("../tensor1d");
/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppressionAsync");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppressionAsync");
    const params = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const boxesAndScores = await Promise.all([
        $boxes.data(),
        $scores.data()
    ]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices , selectedScores  } = (0, _nonMaxSuppressionImpl.nonMaxSuppressionV5Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    if ($boxes !== boxes) $boxes.dispose();
    if ($scores !== scores) $scores.dispose();
    return {
        selectedIndices: (0, _tensor1D.tensor1d)(selectedIndices, "int32"),
        selectedScores: (0, _tensor1D.tensor1d)(selectedScores)
    };
}
const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;

},{"../../backends/non_max_suppression_impl":"hzXRp","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../tensor1d":"cZy9A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmow1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionPadded", ()=>nonMaxSuppressionPadded);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _operation = require("../operation");
/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppression");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppression");
    const params = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const inputs = {
        boxes: $boxes,
        scores: $scores
    };
    const attrs = {
        maxOutputSize: $maxOutputSize,
        iouThreshold: $iouThreshold,
        scoreThreshold: $scoreThreshold,
        padToMaxOutputSize
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.NonMaxSuppressionV4), inputs, attrs);
    return {
        selectedIndices: result[0],
        validOutputs: result[1]
    };
}
const nonMaxSuppressionPadded = (0, _operation.op)({
    nonMaxSuppressionPadded_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHKAP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionPaddedAsync", ()=>nonMaxSuppressionPaddedAsync);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _nonMaxSuppressionImpl = require("../../backends/non_max_suppression_impl");
var _tensorUtilEnv = require("../../tensor_util_env");
var _nonmaxUtil = require("../nonmax_util");
var _scalar = require("../scalar");
var _tensor1D = require("../tensor1d");
/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppressionAsync");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppressionAsync");
    const params = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const [boxesVals, scoresVals] = await Promise.all([
        $boxes.data(),
        $scores.data()
    ]);
    // We call a cpu based impl directly with the typedarray data here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices , validOutputs  } = (0, _nonMaxSuppressionImpl.nonMaxSuppressionV4Impl)(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);
    if ($boxes !== boxes) $boxes.dispose();
    if ($scores !== scores) $scores.dispose();
    return {
        selectedIndices: (0, _tensor1D.tensor1d)(selectedIndices, "int32"),
        validOutputs: (0, _scalar.scalar)(validOutputs, "int32")
    };
}
const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;

},{"../../backends/non_max_suppression_impl":"hzXRp","../../tensor_util_env":"fsyzK","../nonmax_util":"dNbKV","../scalar":"jMh5J","../tensor1d":"cZy9A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BlGD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeBilinear", ()=>resizeBilinear);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
var _reshape = require("../reshape");
/**
 * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to `false`. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers
 *     are at 0.5, which would make the floating point coordinates of the top
 *     left pixel 0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {
    const $images = (0, _tensorUtilEnv.convertToTensor)(images, "images", "resizeBilinear");
    _util.assert($images.rank === 3 || $images.rank === 4, ()=>`Error in resizeBilinear: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
    _util.assert(size.length === 2, ()=>`Error in resizeBilinear: new shape must 2D, but got shape ` + `${size}.`);
    _util.assert(halfPixelCenters === false || alignCorners === false, ()=>`Error in resizeBilinear: If halfPixelCenters is true, ` + `alignCorners must be false.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = (0, _reshape.reshape)($images, [
            1,
            $images.shape[0],
            $images.shape[1],
            $images.shape[2]
        ]);
    }
    const [] = size;
    const inputs = {
        images: batchImages
    };
    const attrs = {
        alignCorners,
        halfPixelCenters,
        size
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.ResizeBilinear), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const resizeBilinear = (0, _operation.op)({
    resizeBilinear_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","../reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j59vH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeNearestNeighbor", ()=>resizeNearestNeighbor);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
var _reshape = require("../reshape");
/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of
 *      half the actual dimensions, and yields more accurate resizes. This flag
 *      would also make the floating point coordinates of the top left pixel
 *      0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {
    const $images = (0, _tensorUtilEnv.convertToTensor)(images, "images", "resizeNearestNeighbor");
    _util.assert($images.rank === 3 || $images.rank === 4, ()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
    _util.assert(size.length === 2, ()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);
    _util.assert($images.dtype === "float32" || $images.dtype === "int32", ()=>"`images` must have `int32` or `float32` as dtype");
    _util.assert(halfPixelCenters === false || alignCorners === false, ()=>`Error in resizeNearestNeighbor: If halfPixelCenters is true, ` + `alignCorners must be false.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = (0, _reshape.reshape)($images, [
            1,
            $images.shape[0],
            $images.shape[1],
            $images.shape[2]
        ]);
    }
    const [] = size;
    const inputs = {
        images: batchImages
    };
    const attrs = {
        alignCorners,
        halfPixelCenters,
        size
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.ResizeNearestNeighbor), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const resizeNearestNeighbor = (0, _operation.op)({
    resizeNearestNeighbor_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","../reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mVug":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "threshold", ()=>threshold);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor1D = require("../tensor1d");
var _operation = require("../operation");
var _cast = require("../cast");
var _split = require("../split");
var _bincount = require("../bincount");
var _lessEqual = require("../less_equal");
var _greater = require("../greater");
var _sum = require("../sum");
var _add = require("../add");
var _mul = require("../mul");
var _div = require("../div");
var _sub = require("../sub");
var _round = require("../round");
var _where = require("../where");
var _fill = require("../fill");
var _slice = require("../slice");
var _range = require("../range");
var _tensor = require("../tensor");
var _util = require("../../util");
var _tensorUtilEnv = require("../../tensor_util_env");
/**
 * Performs image binarization with corresponding threshold
 * (depends on the method)value, which creates a binary image from a grayscale.
 * @param image 3d tensor of shape [imageHeight,imageWidth, depth],
 * where imageHeight and imageWidth must be positive.The image color
 * range should be [0, 255].
 * @param method Optional string from `'binary' | 'otsu'`
 * which specifies the method for thresholding. Defaults to 'binary'.
 * @param inverted Optional boolean whichspecifies
 * if colours should be inverted. Defaults to false.
 * @param threshValue Optional number which defines threshold value from 0 to 1.
 * Defaults to 0.5.
 * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which
 * contains binarized image.
 */ function threshold_(image, method = "binary", inverted = false, threshValue = 0.5) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "threshold");
    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.
    Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */ const RED_INTENCITY_COEF = 0.2989;
    const GREEN_INTENCITY_COEF = 0.5870;
    const BLUE_INTENCITY_COEF = 0.1140;
    const totalPixelsInImage = $image.shape[0] * $image.shape[1];
    let $threshold = (0, _mul.mul)((0, _tensor1D.tensor1d)([
        threshValue
    ]), 255);
    let r, g, b, grayscale;
    _util.assert($image.rank === 3, ()=>"Error in threshold: image must be rank 3," + `but got rank ${$image.rank}.`);
    _util.assert($image.shape[2] === 3 || $image.shape[2] === 1, ()=>"Error in threshold: image color channel must be equal to 3 or 1" + `but got ${$image.shape[2]}.`);
    _util.assert($image.dtype === "int32" || $image.dtype === "float32", ()=>"Error in dtype: image dtype must be int32 or float32," + `but got dtype ${$image.dtype}.`);
    _util.assert(method === "otsu" || method === "binary", ()=>`Method must be binary or otsu, but was ${method}`);
    if ($image.shape[2] === 3) {
        [r, g, b] = (0, _split.split)($image, [
            1,
            1,
            1
        ], -1);
        const $r = (0, _mul.mul)(r, RED_INTENCITY_COEF);
        const $g = (0, _mul.mul)(g, GREEN_INTENCITY_COEF);
        const $b = (0, _mul.mul)(b, BLUE_INTENCITY_COEF);
        grayscale = (0, _add.add)((0, _add.add)($r, $g), $b);
    } else grayscale = image;
    if (method === "otsu") {
        const $histogram = (0, _bincount.bincount)((0, _cast.cast)((0, _round.round)(grayscale), "int32"), (0, _tensor.tensor)([]), 256);
        $threshold = otsu($histogram, totalPixelsInImage);
    }
    const invCondition = inverted ? (0, _lessEqual.lessEqual)(grayscale, $threshold) : (0, _greater.greater)(grayscale, $threshold);
    const result = (0, _cast.cast)((0, _mul.mul)(invCondition, 255), "int32");
    return result;
}
function otsu(histogram, total) {
    let bestThresh = (0, _tensor1D.tensor1d)([
        -1
    ]);
    let bestInBetVar = (0, _tensor1D.tensor1d)([
        0
    ]);
    let cInBetVar = (0, _tensor1D.tensor1d)([
        0
    ]);
    let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;
    for(let index = 0; index < histogram.size - 1; index++){
        classFirst = (0, _slice.slice)(histogram, 0, index + 1);
        classSecond = (0, _slice.slice)(histogram, index + 1);
        weightForeground = (0, _div.div)((0, _sum.sum)(classFirst), total);
        weightBack = (0, _div.div)((0, _sum.sum)(classSecond), total);
        const meanFirstDivA = (0, _sum.sum)((0, _mul.mul)(classFirst, (0, _range.range)(0, classFirst.size)));
        meanFirst = (0, _div.div)(meanFirstDivA, (0, _sum.sum)(classFirst));
        const meanSecFill = (0, _fill.fill)(classSecond.shape, classFirst.size);
        const meanSecAdd = (0, _add.add)((0, _range.range)(0, classSecond.size), meanSecFill);
        const meanSecMul = (0, _mul.mul)(classSecond, meanSecAdd);
        meanSec = (0, _div.div)((0, _sum.sum)(meanSecMul), (0, _sum.sum)(classSecond));
        const cInBetVarSubA = (0, _sub.sub)(meanFirst, meanSec);
        const cInBetVarSubB = (0, _sub.sub)(meanFirst, meanSec);
        const cInBetVarMul = (0, _mul.mul)(weightForeground, weightBack);
        cInBetVar = (0, _mul.mul)((0, _mul.mul)(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);
        const condition = (0, _greater.greater)(cInBetVar, bestInBetVar);
        bestInBetVar = (0, _where.where)(condition, cInBetVar, bestInBetVar);
        bestThresh = (0, _where.where)(condition, (0, _tensor1D.tensor1d)([
            index
        ]), bestThresh);
    }
    return bestThresh;
}
const threshold = (0, _operation.op)({
    threshold_
});

},{"../tensor1d":"cZy9A","../operation":"l6IGY","../cast":"a7v0X","../split":"kOQiE","../bincount":"2BACb","../less_equal":"6NYBp","../greater":"cdsGN","../sum":"91lxl","../add":"i4ulI","../mul":"8s4p1","../div":"3bNgZ","../sub":"mafuF","../round":"dvXm5","../where":"3ZR1W","../fill":"dRjVH","../slice":"ist4s","../range":"872pI","../tensor":"eIzFA","../../util":"9v6Fb","../../tensor_util_env":"fsyzK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BACb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bincount", ()=>bincount);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function bincount_(x, weights, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "bincount");
    const $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "bincount");
    _util.assert($x.dtype === "int32", ()=>`Error in bincount: input ` + `dtype must be int32, but got ${$x.dtype}`);
    _util.assert(size >= 0, ()=>`size must be non-negative, but got ${size}.`);
    _util.assert($weights.size === $x.size || $weights.size === 0, ()=>`Error in bincount: weights must have the same size as input or` + `0-length, but got input shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);
    const inputs = {
        x: $x,
        weights: $weights
    };
    const attrs = {
        size
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Bincount), inputs, attrs);
}
const bincount = (0, _operation.op)({
    bincount_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NYBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessEqual", ()=>lessEqual);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function lessEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "lessEqual", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "lessEqual", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LessEqual), inputs);
}
const lessEqual = (0, _operation.op)({
    lessEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdsGN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greater", ()=>greater);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function greater_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greater", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greater", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Greater), inputs);
}
const greater = (0, _operation.op)({
    greater_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"mafuF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sub", ()=>sub);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function sub_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "sub");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "sub");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sub), inputs);
}
const sub = (0, _operation.op)({
    sub_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dvXm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "round", ()=>round);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function round_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "round");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Round), inputs);
}
const round = (0, _operation.op)({
    round_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ZR1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "where", ()=>where);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastTo = require("./broadcast_to");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function where_(condition, a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "where");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "where");
    const $condition = (0, _tensorUtilEnv.convertToTensor)(condition, "condition", "where", "bool");
    // TODO: move this logic to forward function when the broadcastTo op is
    // implemented in WASM.
    // Find the broadcastable shape for $condition, $a, and $b.
    const broadcastShape = (0, _broadcastUtil.assertAndGetBroadcastShape)((0, _broadcastUtil.assertAndGetBroadcastShape)($condition.shape, $a.shape), $b.shape);
    const $broadcastedCondition = (0, _broadcastTo.broadcastTo)($condition, broadcastShape);
    const $broadcastedA = (0, _broadcastTo.broadcastTo)($a, broadcastShape);
    const $broadcastedB = (0, _broadcastTo.broadcastTo)($b, broadcastShape);
    const inputs = {
        condition: $broadcastedCondition,
        t: $broadcastedA,
        e: $broadcastedB
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Select), inputs);
}
const where = (0, _operation.op)({
    where_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./broadcast_to":"33myr","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33myr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastTo", ()=>broadcastTo);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _clone = require("./clone");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function broadcastTo_(x, shape) {
    let input = (0, _tensorUtilEnv.convertToTensor)(x, "broadcastTo", "x");
    const xShape = input.shape;
    if (shape.some((d)=>!(d > 0) || d % 1 !== 0)) throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
    if (shape.length < input.rank) throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
    if (shape.length > input.rank) {
        const newShape = input.shape.slice();
        while(newShape.length < shape.length)newShape.unshift(1);
        input = (0, _reshape.reshape)(input, newShape);
    }
    const inputShape = input.shape;
    const reps = Array.from(shape);
    for(let i = shape.length - 1; i >= 0; i--){
        if (inputShape[i] === shape[i]) reps[i] = 1;
        else if (input.shape[i] !== 1) throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
    }
    const axes = reps.map((n, i)=>n > 1 ? i : -1).filter((i)=>i >= 0);
    if (axes.length === 0) return (0, _clone.clone)(input);
    // TODO call broadcastTo kernel directly once backends implement broadcstTo
    const inputs = {
        x: input
    };
    const attrs = {
        reps
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Tile), inputs, attrs);
}
const broadcastTo = (0, _operation.op)({
    broadcastTo_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./clone":"cWcE6","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"872pI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.sv
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "range", ()=>range);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
function range(start, stop, step = 1, dtype = "float32") {
    if (step === 0) throw new Error("Cannot have a step of zero");
    const attrs = {
        start,
        stop,
        step,
        dtype
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Range), {} /* inputs */ , attrs);
}

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gZXL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transform", ()=>transform);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _operation = require("../operation");
/**
 * Applies the given transform(s) to the image(s).
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param transforms Projective transform matrix/matrices. A tensor1d of length
 *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0
 *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed
 *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),
 *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the
 *     transform mapping input points to output points.
 * @param interpolation Interpolation mode.
 *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.
 * @param fillMode Points outside the boundaries of the input are filled
 *     according to the given mode, one of 'constant', 'reflect', 'wrap',
 *     'nearest'. Default to 'constant'.
 *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by
 *     reflecting about the edge of the last pixel.
 *     'constant': (k k k k | a b c d | k k k k) The input is extended by
 *     filling all values beyond the edge with the same constant value k.
 *     'wrap': (a b c d | a b c d | a b c d) The input is extended by
 *     wrapping around to the opposite edge.
 *     'nearest': (a a a a | a b c d | d d d d) The input is extended by
 *     the nearest pixel.
 * @param fillValue A float represents the value to be filled outside the
 *     boundaries when fillMode is 'constant'.
 * @param Output dimension after the transform, [height, width]. If undefined,
 *     output is the same size as input image.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */ function transform_(image, transforms, interpolation = "nearest", fillMode = "constant", fillValue = 0, outputShape) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "transform", "float32");
    const $transforms = (0, _tensorUtilEnv.convertToTensor)(transforms, "transforms", "transform", "float32");
    _util.assert($image.rank === 4, ()=>"Error in transform: image must be rank 4," + `but got rank ${$image.rank}.`);
    _util.assert($transforms.rank === 2 && ($transforms.shape[0] === $image.shape[0] || $transforms.shape[0] === 1) && $transforms.shape[1] === 8, ()=>`Error in transform: Input transform should be batch x 8 or 1 x 8`);
    _util.assert(outputShape == null || outputShape.length === 2, ()=>"Error in transform: outputShape must be [height, width] or null, " + `but got ${outputShape}.`);
    const inputs = {
        image: $image,
        transforms: $transforms
    };
    const attrs = {
        interpolation,
        fillMode,
        fillValue,
        outputShape
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Transform), inputs, attrs);
}
const transform = (0, _operation.op)({
    transform_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2da9A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bandPart", ()=>bandPart);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _greaterEqual = require("../greater_equal");
var _lessEqual = require("../less_equal");
var _logicalAnd = require("../logical_and");
var _operation = require("../operation");
var _range = require("../range");
var _reshape = require("../reshape");
var _scalar = require("../scalar");
var _stack = require("../stack");
var _sub = require("../sub");
var _unstack = require("../unstack");
var _where = require("../where");
var _zeros = require("../zeros");
/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */ function bandPart_(a, numLower, numUpper) {
    (0, _util.assert)(numLower % 1 === 0, ()=>`bandPart(): numLower must be an integer, got ${numLower}.`);
    (0, _util.assert)(numUpper % 1 === 0, ()=>`bandPart(): numUpper must be an integer, got ${numUpper}.`);
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "bandPart");
    (0, _util.assert)($a.rank >= 2, ()=>`bandPart(): Rank must be at least 2, got ${$a.rank}.`);
    const shape = $a.shape;
    const [M, N] = $a.shape.slice(-2);
    if (!(numLower <= M)) throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);
    if (!(numUpper <= N)) throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);
    if (numLower < 0) numLower = M;
    if (numUpper < 0) numUpper = N;
    const i = (0, _reshape.reshape)((0, _range.range)(0, M, 1, "int32"), [
        -1,
        1
    ]);
    const j = (0, _range.range)(0, N, 1, "int32");
    const ij = (0, _sub.sub)(i, j);
    const inBand = (0, _logicalAnd.logicalAnd)((0, _lessEqual.lessEqual)(ij, (0, _scalar.scalar)(+numLower, "int32")), (0, _greaterEqual.greaterEqual)(ij, (0, _scalar.scalar)(-numUpper, "int32")));
    const zero = (0, _zeros.zeros)([
        M,
        N
    ], $a.dtype);
    return (0, _reshape.reshape)((0, _stack.stack)((0, _unstack.unstack)((0, _reshape.reshape)($a, [
        -1,
        M,
        N
    ])).map((mat)=>(0, _where.where)(inBand, mat, zero))), shape);
}
const bandPart = (0, _operation.op)({
    bandPart_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../greater_equal":"3ztC3","../less_equal":"6NYBp","../logical_and":"5Pn2X","../operation":"l6IGY","../range":"872pI","../reshape":"45nfd","../scalar":"jMh5J","../stack":"c5VLA","../sub":"mafuF","../unstack":"doWO0","../where":"3ZR1W","../zeros":"6EVbo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ztC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterEqual", ()=>greaterEqual);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function greaterEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greaterEqual", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greaterEqual", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.GreaterEqual), inputs);
}
const greaterEqual = (0, _operation.op)({
    greaterEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Pn2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalAnd", ()=>logicalAnd);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function logicalAnd_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalAnd", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalAnd", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LogicalAnd), inputs);
}
const logicalAnd = (0, _operation.op)({
    logicalAnd_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5VLA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stack", ()=>stack);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function stack_(tensors, axis = 0) {
    const $tensors = (0, _tensorUtilEnv.convertToTensorArray)(tensors, "tensors", "stack", "string_or_numeric");
    _util.assert($tensors.length >= 1, ()=>"Pass at least one tensor to tf.stack");
    if ($tensors.length > 0) _util.assert(axis <= $tensors[0].rank, ()=>"Axis must be <= rank of the tensor");
    const inputs = $tensors;
    const attrs = {
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Pack), inputs, attrs);
}
const stack = (0, _operation.op)({
    stack_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"doWO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unstack", ()=>unstack);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function unstack_(x, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "unstack", "string_or_numeric");
    _util.assert(axis >= -$x.shape.length && axis < $x.shape.length, ()=>`Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
    const inputs = {
        value: $x
    };
    const attrs = {
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Unpack), inputs, attrs);
}
const unstack = (0, _operation.op)({
    unstack_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0HvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gramSchmidt", ()=>gramSchmidt);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _util = require("../../util");
var _div = require("../div");
var _mul = require("../mul");
var _norm = require("../norm");
var _operation = require("../operation");
var _split = require("../split");
var _squeeze = require("../squeeze");
var _stack = require("../stack");
var _sub = require("../sub");
var _sum = require("../sum");
/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */ function gramSchmidt_(xs) {
    let inputIsTensor2D;
    if (Array.isArray(xs)) {
        inputIsTensor2D = false;
        (0, _util.assert)(xs != null && xs.length > 0, ()=>"Gram-Schmidt process: input must not be null, undefined, or empty");
        const dim = xs[0].shape[0];
        for(let i = 1; i < xs.length; ++i)(0, _util.assert)(xs[i].shape[0] === dim, ()=>"Gram-Schmidt: Non-unique lengths found in the input vectors: " + `(${xs[i].shape[0]} vs. ${dim})`);
    } else {
        inputIsTensor2D = true;
        xs = (0, _split.split)(xs, xs.shape[0], 0).map((x)=>(0, _squeeze.squeeze)(x, [
                0
            ]));
    }
    (0, _util.assert)(xs.length <= xs[0].shape[0], ()=>`Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);
    const ys = [];
    const xs1d = xs;
    for(let i1 = 0; i1 < xs.length; ++i1)ys.push((0, _engine.ENGINE).tidy(()=>{
        let x = xs1d[i1];
        if (i1 > 0) for(let j = 0; j < i1; ++j){
            const proj = (0, _mul.mul)((0, _sum.sum)((0, _mul.mul)(ys[j], x)), ys[j]);
            x = (0, _sub.sub)(x, proj);
        }
        return (0, _div.div)(x, (0, _norm.norm)(x, "euclidean"));
    }));
    if (inputIsTensor2D) return (0, _stack.stack)(ys, 0);
    else return ys;
}
const gramSchmidt = (0, _operation.op)({
    gramSchmidt_
});

},{"../../engine":"1aEvR","../../util":"9v6Fb","../div":"3bNgZ","../mul":"8s4p1","../norm":"3lSqt","../operation":"l6IGY","../split":"kOQiE","../squeeze":"bqHGH","../stack":"c5VLA","../sub":"mafuF","../sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lSqt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "norm", ()=>norm);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _abs = require("./abs");
var _axisUtil = require("./axis_util");
var _max = require("./max");
var _min = require("./min");
var _operation = require("./operation");
var _pow = require("./pow");
var _reshape = require("./reshape");
var _scalar = require("./scalar");
var _sqrt = require("./sqrt");
var _square = require("./square");
var _sum = require("./sum");
/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function norm_(x, ord = "euclidean", axis = null, keepDims = false) {
    x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "norm");
    const norm = normImpl(x, ord, axis);
    let keepDimsShape = norm.shape;
    if (keepDims) {
        const axes = (0, _util.parseAxisParam)(axis, x.shape);
        keepDimsShape = _axisUtil.expandShapeToKeepDim(norm.shape, axes);
    }
    return (0, _reshape.reshape)(norm, keepDimsShape);
}
function normImpl(x, p, axis = null) {
    if (x.rank === 0) return (0, _abs.abs)(x);
    // consider vector when no axis is specified
    if (x.rank !== 1 && axis === null) return normImpl((0, _reshape.reshape)(x, [
        -1
    ]), p, axis);
    // vector
    if (x.rank === 1 || typeof axis === "number" || Array.isArray(axis) && axis.length === 1) {
        if (p === 1) return (0, _sum.sum)((0, _abs.abs)(x), axis);
        if (p === Infinity) return (0, _max.max)((0, _abs.abs)(x), axis);
        if (p === -Infinity) return (0, _min.min)((0, _abs.abs)(x), axis);
        if (p === "euclidean" || p === 2) // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
        return (0, _sqrt.sqrt)((0, _sum.sum)((0, _pow.pow)((0, _abs.abs)(x), (0, _scalar.scalar)(2, "int32")), axis));
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    // matrix (assumption axis[0] < axis[1])
    if (Array.isArray(axis) && axis.length === 2) {
        if (p === 1) return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[0]), axis[1] - 1);
        if (p === Infinity) return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
        if (p === -Infinity) return (0, _min.min)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
        if (p === "fro" || p === "euclidean") // norm(x) = sqrt(sum(pow(x, 2)))
        return (0, _sqrt.sqrt)((0, _sum.sum)((0, _square.square)(x), axis));
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    throw new Error(`Error in norm: invalid axis: ${axis}`);
}
const norm = (0, _operation.op)({
    norm_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./abs":"4PgZA","./axis_util":"1A9rc","./max":"13F1p","./min":"1MktL","./operation":"l6IGY","./pow":"9jbjX","./reshape":"45nfd","./scalar":"jMh5J","./sqrt":"aMJIO","./square":"52Axi","./sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4PgZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function abs_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "abs");
    if ($x.dtype === "complex64") {
        const inputs = {
            x: $x
        };
        return (0, _engine.ENGINE).runKernel((0, _kernelNames.ComplexAbs), inputs);
    } else {
        const inputs1 = {
            x: $x
        };
        return (0, _engine.ENGINE).runKernel((0, _kernelNames.Abs), inputs1);
    }
}
const abs = (0, _operation.op)({
    abs_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"13F1p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function max_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "max");
    const inputs = {
        x: $x
    };
    const attrs = {
        reductionIndices: axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Max), inputs, attrs);
}
const max = (0, _operation.op)({
    max_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1MktL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "min", ()=>min);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function min_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "min");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Min), inputs, attrs);
}
const min = (0, _operation.op)({
    min_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jbjX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pow", ()=>pow);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function pow_(base, exp) {
    let $base = (0, _tensorUtilEnv.convertToTensor)(base, "base", "pow");
    let $exp = (0, _tensorUtilEnv.convertToTensor)(exp, "exp", "pow");
    [$base, $exp] = (0, _tensorUtil.makeTypesMatch)($base, $exp);
    const inputs = {
        a: $base,
        b: $exp
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Pow), inputs);
}
const pow = (0, _operation.op)({
    pow_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMJIO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function sqrt_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sqrt", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sqrt), inputs);
}
const sqrt = (0, _operation.op)({
    sqrt_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"52Axi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "square", ()=>square);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function square_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "square");
    const attrs = {};
    return (0, _engine.ENGINE).runKernel("Square", {
        x: $x
    }, attrs);
}
const square = (0, _operation.op)({
    square_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqHGH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squeeze", ()=>squeeze);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function squeeze_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "squeeze", "string_or_numeric");
    return (0, _reshape.reshape)($x, (0, _util.squeezeShape)($x.shape, axis).newShape);
}
const squeeze = (0, _operation.op)({
    squeeze_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"88wHu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "qr", ()=>qr);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _globals = require("../../globals");
var _util = require("../../util");
var _clone = require("../clone");
var _concat = require("../concat");
var _div = require("../div");
var _eye = require("../eye");
var _greater = require("../greater");
var _matMul = require("../mat_mul");
var _mul = require("../mul");
var _neg = require("../neg");
var _norm = require("../norm");
var _operation = require("../operation");
var _reshape = require("../reshape");
var _slice = require("../slice");
var _stack = require("../stack");
var _sub = require("../sub");
var _tensor2D = require("../tensor2d");
var _transpose = require("../transpose");
var _unstack = require("../unstack");
var _where = require("../where");
/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */ function qr_(x, fullMatrices = false) {
    (0, _util.assert)(x.rank >= 2, ()=>`qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);
    if (x.rank === 2) return qr2d(x, fullMatrices);
    else {
        // Rank > 2.
        // TODO(cais): Below we split the input into individual 2D tensors,
        //   perform QR decomposition on them and then stack the results back
        //   together. We should explore whether this can be parallelized.
        const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev)=>value * prev);
        const x2ds = (0, _unstack.unstack)((0, _reshape.reshape)(x, [
            outerDimsProd,
            x.shape[x.shape.length - 2],
            x.shape[x.shape.length - 1]
        ]), 0);
        const q2ds = [];
        const r2ds = [];
        x2ds.forEach((x2d)=>{
            const [q2d, r2d] = qr2d(x2d, fullMatrices);
            q2ds.push(q2d);
            r2ds.push(r2d);
        });
        const q = (0, _reshape.reshape)((0, _stack.stack)(q2ds, 0), x.shape);
        const r = (0, _reshape.reshape)((0, _stack.stack)(r2ds, 0), x.shape);
        return [
            q,
            r
        ];
    }
}
function qr2d(x, fullMatrices = false) {
    return (0, _engine.ENGINE).tidy(()=>{
        (0, _util.assert)(x.shape.length === 2, ()=>`qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
        const m = x.shape[0];
        const n = x.shape[1];
        let q = (0, _eye.eye)(m); // Orthogonal transform so far.
        let r = (0, _clone.clone)(x); // Transformed matrix so far.
        const one2D = (0, _tensor2D.tensor2d)([
            [
                1
            ]
        ], [
            1,
            1
        ]);
        let w = (0, _clone.clone)(one2D);
        const iters = m >= n ? n : m;
        for(let j = 0; j < iters; ++j){
            // This tidy within the for-loop ensures we clean up temporary
            // tensors as soon as they are no longer needed.
            const rTemp = r;
            const wTemp = w;
            const qTemp = q;
            [w, r, q] = (0, _engine.ENGINE).tidy(()=>{
                // Find H = I - tau * w * w', to put zeros below R(j, j).
                const rjEnd1 = (0, _slice.slice)(r, [
                    j,
                    j
                ], [
                    m - j,
                    1
                ]);
                const normX = (0, _norm.norm)(rjEnd1);
                const rjj = (0, _slice.slice)(r, [
                    j,
                    j
                ], [
                    1,
                    1
                ]);
                // The sign() function returns 0 on 0, which causes division by zero.
                const s = (0, _where.where)((0, _greater.greater)(rjj, 0), (0, _tensor2D.tensor2d)([
                    [
                        -1
                    ]
                ]), (0, _tensor2D.tensor2d)([
                    [
                        1
                    ]
                ]));
                const u1 = (0, _sub.sub)(rjj, (0, _mul.mul)(s, normX));
                const wPre = (0, _div.div)(rjEnd1, u1);
                if (wPre.shape[0] === 1) w = (0, _clone.clone)(one2D);
                else w = (0, _concat.concat)([
                    one2D,
                    (0, _slice.slice)(wPre, [
                        1,
                        0
                    ], [
                        wPre.shape[0] - 1,
                        wPre.shape[1]
                    ])
                ], 0);
                const tau = (0, _neg.neg)((0, _div.div)((0, _matMul.matMul)(s, u1), normX));
                // -- R := HR, Q := QH.
                const rjEndAll = (0, _slice.slice)(r, [
                    j,
                    0
                ], [
                    m - j,
                    n
                ]);
                const tauTimesW = (0, _mul.mul)(tau, w);
                const wT = (0, _transpose.transpose)(w);
                if (j === 0) r = (0, _sub.sub)(rjEndAll, (0, _matMul.matMul)(tauTimesW, (0, _matMul.matMul)(wT, rjEndAll)));
                else {
                    const rTimesTau = (0, _sub.sub)(rjEndAll, (0, _matMul.matMul)(tauTimesW, (0, _matMul.matMul)(wT, rjEndAll)));
                    r = (0, _concat.concat)([
                        (0, _slice.slice)(r, [
                            0,
                            0
                        ], [
                            j,
                            n
                        ]),
                        rTimesTau
                    ], 0);
                }
                const tawTimesWT = (0, _transpose.transpose)(tauTimesW);
                const qAllJEnd = (0, _slice.slice)(q, [
                    0,
                    j
                ], [
                    m,
                    q.shape[1] - j
                ]);
                if (j === 0) q = (0, _sub.sub)(qAllJEnd, (0, _matMul.matMul)((0, _matMul.matMul)(qAllJEnd, w), tawTimesWT));
                else {
                    const qTimesTau = (0, _sub.sub)(qAllJEnd, (0, _matMul.matMul)((0, _matMul.matMul)(qAllJEnd, w), tawTimesWT));
                    q = (0, _concat.concat)([
                        (0, _slice.slice)(q, [
                            0,
                            0
                        ], [
                            m,
                            j
                        ]),
                        qTimesTau
                    ], 1);
                }
                return [
                    w,
                    r,
                    q
                ];
            });
            (0, _globals.dispose)([
                rTemp,
                wTemp,
                qTemp
            ]);
        }
        if (!fullMatrices && m > n) {
            q = (0, _slice.slice)(q, [
                0,
                0
            ], [
                m,
                n
            ]);
            r = (0, _slice.slice)(r, [
                0,
                0
            ], [
                n,
                n
            ]);
        }
        return [
            q,
            r
        ];
    });
}
const qr = (0, _operation.op)({
    qr_
});

},{"../../engine":"1aEvR","../../globals":"gfrr7","../../util":"9v6Fb","../clone":"cWcE6","../concat":"jfkcZ","../div":"3bNgZ","../eye":"Rh8TY","../greater":"cdsGN","../mat_mul":"SZp9a","../mul":"8s4p1","../neg":"0PGOC","../norm":"3lSqt","../operation":"l6IGY","../reshape":"45nfd","../slice":"ist4s","../stack":"c5VLA","../sub":"mafuF","../tensor2d":"lvfFL","../transpose":"5Lger","../unstack":"doWO0","../where":"3ZR1W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Rh8TY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eye", ()=>eye);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _buffer = require("./buffer");
var _expandDims = require("./expand_dims");
var _operation = require("./operation");
var _reshape = require("./reshape");
var _tile = require("./tile");
/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function eye_(numRows, numColumns, batchShape, dtype = "float32") {
    if (numColumns == null) numColumns = numRows;
    const buff = (0, _buffer.buffer)([
        numRows,
        numColumns
    ], dtype);
    const n = numRows <= numColumns ? numRows : numColumns;
    for(let i = 0; i < n; ++i)buff.set(1, i, i);
    const out = (0, _reshape.reshape)(buff.toTensor(), [
        numRows,
        numColumns
    ]);
    if (batchShape == null) return out;
    else {
        if (batchShape.length === 1) return (0, _tile.tile)((0, _expandDims.expandDims)(out, 0), [
            batchShape[0],
            1,
            1
        ]);
        else if (batchShape.length === 2) // tslint:disable-next-line:no-unnecessary-type-assertion
        return (0, _tile.tile)((0, _expandDims.expandDims)((0, _expandDims.expandDims)(out, 0), 0), [
            batchShape[0],
            batchShape[1],
            1,
            1
        ]);
        else if (batchShape.length === 3) // tslint:disable-next-line:no-unnecessary-type-assertion
        return (0, _tile.tile)((0, _expandDims.expandDims)((0, _expandDims.expandDims)((0, _expandDims.expandDims)(out, 0), 0), 0), [
            batchShape[0],
            batchShape[1],
            batchShape[2],
            1,
            1
        ]);
        else throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any
        `batchShapes, but received ${batchShape.length}D.`);
    }
}
const eye = (0, _operation.op)({
    eye_
});

},{"./buffer":"e0wS6","./expand_dims":"9coIV","./operation":"l6IGY","./reshape":"45nfd","./tile":"kFneb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9coIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expandDims", ()=>expandDims);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function expandDims_(x, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "expandDims", "string_or_numeric");
    _util.assert(axis <= $x.rank, ()=>"Axis must be <= rank of the tensor");
    const inputs = {
        input: $x
    };
    const attrs = {
        dim: axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ExpandDims), inputs, attrs);
}
const expandDims = (0, _operation.op)({
    expandDims_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9zEd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "absoluteDifference", ()=>absoluteDifference);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _abs = require("../abs");
var _lossOpsUtils = require("../loss_ops_utils");
var _operation = require("../operation");
var _sub = require("../sub");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function absoluteDifference_(labels, predictions, weights, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "absoluteDifference");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "absoluteDifference");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "absoluteDifference");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in absoluteDifference: ");
    const losses = (0, _abs.abs)((0, _sub.sub)($labels, $predictions));
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const absoluteDifference = (0, _operation.op)({
    absoluteDifference_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../abs":"4PgZA","../loss_ops_utils":"j8gBR","../operation":"l6IGY","../sub":"mafuF","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8gBR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Reduction", ()=>Reduction);
var Reduction;
(function(Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (Reduction = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qnOZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "computeWeightedLoss", ()=>computeWeightedLoss);
var _tensorUtilEnv = require("../../tensor_util_env");
var _cast = require("../cast");
var _div = require("../div");
var _lossOpsUtils = require("../loss_ops_utils");
var _mean = require("../mean");
var _mul = require("../mul");
var _notEqual = require("../not_equal");
var _ones = require("../ones");
var _operation = require("../operation");
var _scalar = require("../scalar");
var _sum = require("../sum");
/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function computeWeightedLoss_(losses, weights, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $losses = (0, _tensorUtilEnv.convertToTensor)(losses, "losses", "computeWeightedLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "computeWeightedLoss");
    const weightedLoss = $weights == null ? $losses : (0, _mul.mul)($losses, $weights);
    if (reduction === (0, _lossOpsUtils.Reduction).NONE) return weightedLoss;
    if (reduction === (0, _lossOpsUtils.Reduction).SUM) return (0, _sum.sum)(weightedLoss);
    if (reduction === (0, _lossOpsUtils.Reduction).MEAN) {
        if ($weights == null) return (0, _mean.mean)(weightedLoss);
        else {
            const broadcastFactor = $losses.size / $weights.size;
            const result = (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _sum.sum)($weights));
            return broadcastFactor > 1 ? (0, _div.div)(result, (0, _scalar.scalar)(broadcastFactor)) : result;
        }
    }
    if (reduction === (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
        if ($weights == null) return (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _scalar.scalar)($losses.size));
        else {
            const broadcastedWeights = (0, _mul.mul)($weights, (0, _ones.ones)($losses.shape));
            const numNonZeros = (0, _cast.cast)((0, _sum.sum)((0, _notEqual.notEqual)(broadcastedWeights, (0, _scalar.scalar)(0))), "float32");
            return (0, _div.div)((0, _sum.sum)(weightedLoss), numNonZeros);
        }
    }
    throw Error(`Unknown reduction: ${reduction}`);
}
const computeWeightedLoss = (0, _operation.op)({
    computeWeightedLoss_
});

},{"../../tensor_util_env":"fsyzK","../cast":"a7v0X","../div":"3bNgZ","../loss_ops_utils":"j8gBR","../mean":"aFTiZ","../mul":"8s4p1","../not_equal":"cu4OV","../ones":"dl9XL","../operation":"l6IGY","../scalar":"jMh5J","../sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFTiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mean", ()=>mean);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function mean_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "mean");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Mean), inputs, attrs);
}
const mean = (0, _operation.op)({
    mean_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cu4OV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notEqual", ()=>notEqual);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function notEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "notEqual", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "notEqual", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.NotEqual), inputs);
}
const notEqual = (0, _operation.op)({
    notEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dl9XL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "ones", ()=>ones);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
var _complex = require("./complex");
var _zeros = require("./zeros");
function ones(shape, dtype = "float32") {
    if (dtype === "complex64") {
        const real = ones(shape, "float32");
        const imag = (0, _zeros.zeros)(shape, "float32");
        return (0, _complex.complex)(real, imag);
    }
    const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), dtype);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}

},{"../engine":"1aEvR","../util":"9v6Fb","./complex":"h6n1M","./zeros":"6EVbo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LGWZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosineDistance", ()=>cosineDistance);
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _lossOpsUtils = require("../loss_ops_utils");
var _mul = require("../mul");
var _operation = require("../operation");
var _scalar = require("../scalar");
var _sub = require("../sub");
var _sum = require("../sum");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function cosineDistance_(labels, predictions, axis, weights, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "cosineDistance");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "cosineDistance");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "cosineDistance");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in cosineDistance: ");
    const one = (0, _scalar.scalar)(1);
    const losses = (0, _sub.sub)(one, (0, _sum.sum)((0, _mul.mul)($labels, $predictions), axis, true));
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const cosineDistance = (0, _operation.op)({
    cosineDistance_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../loss_ops_utils":"j8gBR","../mul":"8s4p1","../operation":"l6IGY","../scalar":"jMh5J","../sub":"mafuF","../sum":"91lxl","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8oLvM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hingeLoss", ()=>hingeLoss);
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _lossOpsUtils = require("../loss_ops_utils");
var _mul = require("../mul");
var _operation = require("../operation");
var _relu = require("../relu");
var _scalar = require("../scalar");
var _sub = require("../sub");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function hingeLoss_(labels, predictions, weights, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    let $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "hingeLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "hingeLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "hingeLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in hingeLoss: ");
    const one = (0, _scalar.scalar)(1);
    // Convert binary labels to (-1, 1)
    $labels = (0, _sub.sub)((0, _mul.mul)((0, _scalar.scalar)(2), $labels), one);
    const losses = (0, _relu.relu)((0, _sub.sub)(one, (0, _mul.mul)($labels, $predictions)));
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const hingeLoss = (0, _operation.op)({
    hingeLoss_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../loss_ops_utils":"j8gBR","../mul":"8s4p1","../operation":"l6IGY","../relu":"azijv","../scalar":"jMh5J","../sub":"mafuF","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zElgM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "huberLoss", ()=>huberLoss);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _abs = require("../abs");
var _add = require("../add");
var _lossOpsUtils = require("../loss_ops_utils");
var _minimum = require("../minimum");
var _mul = require("../mul");
var _operation = require("../operation");
var _scalar = require("../scalar");
var _square = require("../square");
var _sub = require("../sub");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "huberLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "huberLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "huberLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in huberLoss: ");
    const deltaScalar = (0, _scalar.scalar)(delta);
    const error = (0, _abs.abs)((0, _sub.sub)($predictions, $labels));
    const quadratic = (0, _minimum.minimum)(error, deltaScalar);
    const linear = (0, _sub.sub)(error, quadratic);
    const losses = (0, _add.add)((0, _mul.mul)((0, _scalar.scalar)(0.5), (0, _square.square)(quadratic)), (0, _mul.mul)(deltaScalar, linear));
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const huberLoss = (0, _operation.op)({
    huberLoss_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../abs":"4PgZA","../add":"i4ulI","../loss_ops_utils":"j8gBR","../minimum":"bXpug","../mul":"8s4p1","../operation":"l6IGY","../scalar":"jMh5J","../square":"52Axi","../sub":"mafuF","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXpug":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minimum", ()=>minimum);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _cast = require("./cast");
var _operation = require("./operation");
/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function minimum_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "minimum");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "minimum");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "bool") {
        $a = (0, _cast.cast)($a, "int32");
        $b = (0, _cast.cast)($b, "int32");
    }
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Minimum), inputs);
}
const minimum = (0, _operation.op)({
    minimum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./cast":"a7v0X","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1OgmA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logLoss", ()=>logLoss);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _add = require("../add");
var _log = require("../log");
var _lossOpsUtils = require("../loss_ops_utils");
var _mul = require("../mul");
var _neg = require("../neg");
var _operation = require("../operation");
var _scalar = require("../scalar");
var _sub = require("../sub");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "logLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "logLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "logLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in logLoss: ");
    const one = (0, _scalar.scalar)(1);
    const epsilonScalar = (0, _scalar.scalar)(epsilon);
    const l1 = (0, _neg.neg)((0, _mul.mul)($labels, (0, _log.log)((0, _add.add)($predictions, epsilonScalar))));
    const l2 = (0, _mul.mul)((0, _sub.sub)(one, $labels), (0, _log.log)((0, _add.add)((0, _sub.sub)(one, $predictions), epsilonScalar)));
    const losses = (0, _sub.sub)(l1, l2);
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const logLoss = (0, _operation.op)({
    logLoss_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../add":"i4ulI","../log":"loW45","../loss_ops_utils":"j8gBR","../mul":"8s4p1","../neg":"0PGOC","../operation":"l6IGY","../scalar":"jMh5J","../sub":"mafuF","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"loW45":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>log);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function log_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "log", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Log), inputs);
}
const log = (0, _operation.op)({
    log_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cDiv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "meanSquaredError", ()=>meanSquaredError);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _lossOpsUtils = require("../loss_ops_utils");
var _operation = require("../operation");
var _squaredDifference = require("../squared_difference");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */ function meanSquaredError_(labels, predictions, weights, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "meanSquaredError");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "meanSquaredError");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "meanSquaredError");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in meanSquaredError: ");
    const losses = (0, _squaredDifference.squaredDifference)($labels, $predictions);
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const meanSquaredError = (0, _operation.op)({
    meanSquaredError_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../loss_ops_utils":"j8gBR","../operation":"l6IGY","../squared_difference":"8fw9V","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8fw9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifference", ()=>squaredDifference);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function squaredDifference_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "squaredDifference");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "squaredDifference");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    const attrs = {};
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SquaredDifference), inputs, attrs);
}
const squaredDifference = (0, _operation.op)({
    squaredDifference_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gchIh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sigmoidCrossEntropy", ()=>sigmoidCrossEntropy);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _abs = require("../abs");
var _add = require("../add");
var _exp = require("../exp");
var _log1P = require("../log1p");
var _lossOpsUtils = require("../loss_ops_utils");
var _mul = require("../mul");
var _neg = require("../neg");
var _operation = require("../operation");
var _relu = require("../relu");
var _scalar = require("../scalar");
var _sub = require("../sub");
var _computeWeightedLoss = require("./compute_weighted_loss");
function sigmoidCrossEntropyWithLogits_(labels, logits) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "sigmoidCrossEntropyWithLogits");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "sigmoidCrossEntropyWithLogits");
    (0, _util.assertShapesMatch)($labels.shape, $logits.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    /**
     * Implementation Details:
     *
     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
     *   = (1 - z) * x + log(1 + exp(-x))
     *   = x - x * z + log(1 + exp(-x))
     *
     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
     *     x - x * z + log(1 + exp(-x))
     *   = log(exp(x)) - x * z + log(1 + exp(-x))
     *   = - x * z + log(1 + exp(x))
     *
     * Hence, to ensure stability and avoid overflow, the implementation uses
     * this equivalent formulation:
     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
     */ const maxOutput = (0, _relu.relu)($logits);
    const outputXTarget = (0, _mul.mul)($logits, $labels);
    const sigmoidOutput = (0, _log1P.log1p)((0, _exp.exp)((0, _neg.neg)((0, _abs.abs)($logits))));
    return (0, _add.add)((0, _sub.sub)(maxOutput, outputXTarget), sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */ function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    let $multiClassLabels = (0, _tensorUtilEnv.convertToTensor)(multiClassLabels, "multiClassLabels", "sigmoidCrossEntropy");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "sigmoidCrossEntropy");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "sigmoidCrossEntropy");
    (0, _util.assertShapesMatch)($multiClassLabels.shape, $logits.shape, "Error in sigmoidCrossEntropy: ");
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
        const one = (0, _scalar.scalar)(1);
        const half = (0, _scalar.scalar)(0.5);
        $multiClassLabels = (0, _add.add)((0, _mul.mul)($multiClassLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _mul.mul)(half, labelSmoothingScalar));
    }
    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const sigmoidCrossEntropy = (0, _operation.op)({
    sigmoidCrossEntropy_
});

},{"../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../abs":"4PgZA","../add":"i4ulI","../exp":"75ybM","../log1p":"4UhQW","../loss_ops_utils":"j8gBR","../mul":"8s4p1","../neg":"0PGOC","../operation":"l6IGY","../relu":"azijv","../scalar":"jMh5J","../sub":"mafuF","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75ybM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exp", ()=>exp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function exp_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "exp");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Exp), inputs);
}
const exp = (0, _operation.op)({
    exp_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UhQW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log1p", ()=>log1p);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function log1p_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "log1p");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Log1p), inputs);
}
const log1p = (0, _operation.op)({
    log1p_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekpYc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softmaxCrossEntropy", ()=>softmaxCrossEntropy);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _gradients = require("../../gradients");
var _tensorUtilEnv = require("../../tensor_util_env");
var _util = require("../../util");
var _add = require("../add");
var _axisUtil = require("../axis_util");
var _cast = require("../cast");
var _div = require("../div");
var _exp = require("../exp");
var _logSumExp = require("../log_sum_exp");
var _lossOpsUtils = require("../loss_ops_utils");
var _mul = require("../mul");
var _neg = require("../neg");
var _operation = require("../operation");
var _reshape = require("../reshape");
var _scalar = require("../scalar");
var _sub = require("../sub");
var _sum = require("../sum");
var _computeWeightedLoss = require("./compute_weighted_loss");
/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */ function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
    if (dim === -1) dim = logits.rank - 1;
    if (dim !== logits.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);
    // Use a custom gradient for numerical stability.
    const customOp = (0, _gradients.customGrad)((labels, logits, save)=>{
        // Reference:
        //   1. http://cs231n.github.io/linear-classify/#softmax
        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
        const keepDims = true;
        const lse = (0, _logSumExp.logSumExp)(logits, [
            dim
        ], keepDims);
        const logResult = (0, _sub.sub)((0, _cast.cast)(logits, "float32"), lse);
        save([
            labels,
            logResult
        ]);
        const costVector = (0, _neg.neg)((0, _mul.mul)(logResult, labels));
        const value = (0, _sum.sum)(costVector, [
            dim
        ]);
        const gradFunc = (dy, saved)=>{
            const [labels, logResult] = saved;
            const dyShape = (0, _axisUtil.expandShapeToKeepDim)(dy.shape, [
                dim
            ]);
            return [
                (0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _cast.cast)(labels, "float32"), (0, _exp.exp)(logResult))),
                (0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _exp.exp)(logResult), (0, _cast.cast)(labels, "float32"))), 
            ];
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */ function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = (0, _lossOpsUtils.Reduction).SUM_BY_NONZERO_WEIGHTS) {
    let $onehotLabels = (0, _tensorUtilEnv.convertToTensor)(onehotLabels, "onehotLabels", "softmaxCrossEntropy");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "softmaxCrossEntropy");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "softmaxCrossEntropy");
    (0, _util.assertShapesMatch)($onehotLabels.shape, $logits.shape, "Error in softmaxCrossEntropy: ");
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
        const one = (0, _scalar.scalar)(1);
        const numClasses = (0, _scalar.scalar)($onehotLabels.shape[1]);
        $onehotLabels = (0, _add.add)((0, _mul.mul)($onehotLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _div.div)(labelSmoothingScalar, numClasses));
    }
    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
    return (0, _computeWeightedLoss.computeWeightedLoss)(losses, $weights, reduction);
}
const softmaxCrossEntropy = (0, _operation.op)({
    softmaxCrossEntropy_
});

},{"../../gradients":"4PSmY","../../tensor_util_env":"fsyzK","../../util":"9v6Fb","../add":"i4ulI","../axis_util":"1A9rc","../cast":"a7v0X","../div":"3bNgZ","../exp":"75ybM","../log_sum_exp":"5eruw","../loss_ops_utils":"j8gBR","../mul":"8s4p1","../neg":"0PGOC","../operation":"l6IGY","../reshape":"45nfd","../scalar":"jMh5J","../sub":"mafuF","../sum":"91lxl","./compute_weighted_loss":"3qnOZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5eruw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logSumExp", ()=>logSumExp);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _add = require("./add");
var _axisUtil = require("./axis_util");
var _exp = require("./exp");
var _log = require("./log");
var _max = require("./max");
var _operation = require("./operation");
var _reshape = require("./reshape");
var _sub = require("./sub");
var _sum = require("./sum");
/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function logSumExp_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logSumExp");
    const axes = (0, _util.parseAxisParam)(axis, $x.shape);
    const xMax = (0, _max.max)($x, axes, true);
    const a = (0, _sub.sub)($x, xMax);
    const b = (0, _exp.exp)(a);
    const c = (0, _sum.sum)(b, axes);
    const d = (0, _log.log)(c);
    const res = (0, _add.add)((0, _reshape.reshape)(xMax, d.shape), d);
    if (keepDims) {
        const newShape = (0, _axisUtil.expandShapeToKeepDim)(res.shape, axes);
        return (0, _reshape.reshape)(res, newShape);
    }
    return res;
}
const logSumExp = (0, _operation.op)({
    logSumExp_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./add":"i4ulI","./axis_util":"1A9rc","./exp":"75ybM","./log":"loW45","./max":"13F1p","./operation":"l6IGY","./reshape":"45nfd","./sub":"mafuF","./sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a251V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseFillEmptyRows", ()=>sparseFillEmptyRows);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * The input SparseTensor is represented via the map of inputs {`indices`,
 * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`
 * but with indices `outputIndices` and values `outputValues`. This op inserts a
 * single entry for every row that doesn't have any values. The index is created
 * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.
 *
 * For example, suppose `spInput` has shape [5, 6] and non-empty values:
 * [0, 1]: a
 * [0, 3]: b
 * [2, 0]: c
 * [3, 1]: d
 *
 * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:
 * [0, 1]: a
 * [0, 3]: b
 * [1, 0]: `defaultValue`
 * [2, 0]: c
 * [3, 1]: d
 * [4, 0]: `defaultValue`
 *
 * The output SparseTensor will be in row-major order and will have the same
 * shape as the input.
 *
 * This op also returns an indicator vector shaped [dense_shape[0]] such that
 * emptyRowIndicator[i] = True iff row i was an empty row.
 *
 * And a reverse index map vector shaped [indices.shape[0]] that is used during
 * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==
 * outputIndices[outi, j] for all j
 *
 * ```js
 * const result = tf.sparse.sparseFillEmptyRows(
 *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],
 *   [0, 10, 13, 14, 32, 33], [5, 6], -1);
 * console.log(result);
 * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],
 *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]
 * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]
 * result['emptyRowIndicator'].print(); // [false, false, true, false, true]
 * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]
 * ```
 * @param indices: 2-D. the indices of the sparse tensor.
 * @param values: 1-D. the values of the sparse tensor.
 * @param denseShape: 1-D. the shape of the sparse tensor.
 * @param defaultValue: 0-D. default value to insert into location [row, 0, ...,
 *     0] for rows missing from the input sparse tensor.
 * @return A map with the following properties:
 *     - outputIndices
 *     - outputValues: 1-D. the values of the filled sparse tensor.
 *     - emptyRowIndicator: 1-D. whether the dense row was missing in the input
 * sparse tensor.
 *     - reverseIndexMap: 1-D. a map from the input indices to the output
 * indices.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */ function sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "sparseFillEmptyRows", "int32");
    const $values = (0, _tensorUtilEnv.convertToTensor)(values, "values", "sparseFillEmptyRows");
    const $denseShape = (0, _tensorUtilEnv.convertToTensor)(denseShape, "denseShape", "sparseFillEmptyRows", "int32");
    const $defaultValue = (0, _tensorUtilEnv.convertToTensor)(defaultValue, "defaultValue", "sparseFillEmptyRows", $values.dtype);
    if ($indices.rank !== 2) throw new Error(`Indices should be Tensor2D but received shape
        ${$indices.shape}`);
    if ($values.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);
    if ($denseShape.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);
    if ($defaultValue.rank !== 0) throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);
    const inputs = {
        indices: $indices,
        values: $values,
        denseShape: $denseShape,
        defaultValue: $defaultValue
    };
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.SparseFillEmptyRows), inputs);
    return {
        outputIndices: result[0],
        outputValues: result[1],
        emptyRowIndicator: result[2],
        reverseIndexMap: result[3]
    };
}
const sparseFillEmptyRows = (0, _operation.op)({
    sparseFillEmptyRows_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cn1qm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseReshape", ()=>sparseReshape);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * This operation has the same semantics as reshape on the represented dense
 * tensor. The `inputIndices` are recomputed based on the requested `newShape`.
 * If one component of `newShape` is the special value -1, the size of that
 * dimension is computed so that the total dense size remains constant. At most
 * one component of `newShape` can be -1. The number of dense elements implied
 * by `newShape` must be the same as the number of dense elements originally
 * implied by `inputShape`. Reshaping does not affect the order of values in the
 * SparseTensor. If the input tensor has rank R_in and N non-empty values, and
 * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],
 * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and
 * `outputShape` has length R_out.
 *
 * ```js
 * const result = tf.sparse.sparseReshape(
 *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],
 *   [2, 3, 6], [9, -1]);
 * console.log(result);
 * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]
 * result['outputShape'].print(); // [9, 4]
 * ```
 * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty
 * values in a SparseTensor.
 * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense
 * shape.
 * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.
 * @return A map with the following properties:
 *     - outputIndices: 2-D. N x R_out matrix with the updated indices of
 *       non-empty values in the output SparseTensor.
 *     - outputShape: 1-D. R_out vector with the full dense shape of the output
 *       SparseTensor. This is the same as newShape but with any -1 dimensions
 *        filled in.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */ function sparseReshape_(inputIndices, inputShape, newShape) {
    const $inputIndices = (0, _tensorUtilEnv.convertToTensor)(inputIndices, "inputIndices", "sparseReshape", "int32");
    const $inputShape = (0, _tensorUtilEnv.convertToTensor)(inputShape, "inputShape", "sparseReshape", "int32");
    const $newShape = (0, _tensorUtilEnv.convertToTensor)(newShape, "newShape", "sparseReshape", "int32");
    if ($inputIndices.rank !== 2) throw new Error(`Input indices should be Tensor2D but received shape
        ${$inputIndices.shape}`);
    if ($inputShape.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);
    if ($newShape.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);
    const inputs = {
        inputIndices: $inputIndices,
        inputShape: $inputShape,
        newShape: $newShape
    };
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.SparseReshape), inputs);
    return {
        outputIndices: result[0],
        outputShape: result[1]
    };
}
const sparseReshape = (0, _operation.op)({
    sparseReshape_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAd2Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentMean", ()=>sparseSegmentMean);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * Computes the mean along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentMean(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segments.
 * const result2 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1], 'int32'),
 *                                             tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1, 2], 'int32'),
 *                                             tf.tensor1d([0, 1, 1], 'int32'));
 * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */ function sparseSegmentMean_(data, indices, segmentIds) {
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "sparseSegmentMean");
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "sparseSegmentMean", "int32");
    const $segmentIds = (0, _tensorUtilEnv.convertToTensor)(segmentIds, "segmentIds", "sparseSegmentMean", "int32");
    if ($data.rank < 1) throw new Error(`Data should be at least 1 dimensional but received scalar`);
    if ($indices.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
          ${$indices.shape}`);
    if ($segmentIds.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
          ${$segmentIds.shape}`);
    const inputs = {
        data: $data,
        indices: $indices,
        segmentIds: $segmentIds
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SparseSegmentMean), inputs);
}
const sparseSegmentMean = (0, _operation.op)({
    sparseSegmentMean_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bJzC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentSum", ()=>sparseSegmentSum);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * Computes the sum along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segment.
 * const result2 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1, 2], 'int32'),
 *                                           tf.tensor1d([0, 0, 1], 'int32'));
 * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */ function sparseSegmentSum_(data, indices, segmentIds) {
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "sparseSegmentSum");
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "sparseSegmentSum", "int32");
    const $segmentIds = (0, _tensorUtilEnv.convertToTensor)(segmentIds, "segmentIds", "sparseSegmentSum", "int32");
    if ($data.rank < 1) throw new Error(`Data should be at least 1 dimensional but received scalar`);
    if ($indices.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
         ${$indices.shape}`);
    if ($segmentIds.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
         ${$segmentIds.shape}`);
    const inputs = {
        data: $data,
        indices: $indices,
        segmentIds: $segmentIds
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SparseSegmentSum), inputs);
}
const sparseSegmentSum = (0, _operation.op)({
    sparseSegmentSum_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bNhAD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringNGrams", ()=>stringNGrams);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * Creates ngrams from ragged string data.
 *
 * This op accepts a ragged tensor with 1 ragged dimension containing only
 * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams
 * of that string, joined along the innermost axis.
 *
 * ```js
 * const result = tf.string.stringNGrams(
 *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),
 *   '|', [1, 2], 'LP', 'RP', -1, false);
 * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',
 *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']
 * result['nGramsSplits'].print(); // [0, 5, 10]
 * ```
 * @param data: The values tensor of the ragged string tensor to make ngrams out
 *     of. Must be a 1D string tensor.
 * @param dataSplits: The splits tensor of the ragged string tensor to make
 *     ngrams out of.
 * @param separator: The string to append between elements of the token. Use ""
 *     for no separator.
 * @param nGramWidths: The sizes of the ngrams to create.
 * @param leftPad: The string to use to pad the left side of the ngram sequence.
 *     Only used if pad_width !== 0.
 * @param rightPad: The string to use to pad the right side of the ngram
 *     sequence. Only used if pad_width !== 0.
 * @param padWidth: The number of padding elements to add to each side of each
 *     sequence. Note that padding will never be greater than `nGramWidths`-1
 *     regardless of this value. If `padWidth`=-1 , then add max(`nGramWidths)-1
 *     elements.
 * @param preserveShortSequences: If true, then ensure that at least one ngram
 *     is generated for each input sequence. In particular, if an input sequence
 *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single
 *     ngram containing the entire sequence. If false, then no ngrams are
 *     generated for these short input sequences.
 * @return A map with the following properties:
 *     - nGrams: The values tensor of the output ngrams ragged tensor.
 *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */ function stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "stringNGrams", "string");
    if ($data.dtype !== "string") throw new Error("Data must be of datatype string");
    if ($data.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${$data.shape}`);
    const $dataSplits = (0, _tensorUtilEnv.convertToTensor)(dataSplits, "dataSplits", "stringNGrams");
    if ($dataSplits.dtype !== "int32") throw new Error("Data splits must be of datatype int32");
    const attrs = {
        separator,
        nGramWidths,
        leftPad,
        rightPad,
        padWidth,
        preserveShortSequences
    };
    const inputs = {
        data: $data,
        dataSplits: $dataSplits
    };
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.StringNGrams), inputs, attrs);
    return {
        nGrams: result[0],
        nGramsSplits: result[1]
    };
}
const stringNGrams = (0, _operation.op)({
    stringNGrams_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2RFp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringSplit", ()=>stringSplit);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * Split elements of `input` based on `delimiter` into a SparseTensor .
 *
 * Let N be the size of source (typically N will be the batch size). Split each
 * element of `input` based on `delimiter` and return a SparseTensor containing
 * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.
 *
 * `delimiter` can be empty, or a string of split characters. If `delimiter` is
 * an empty string, each element of `input` is split into individual
 * character strings. Otherwise every character of `delimiter` is a potential
 * split point.
 *
 * ```js
 * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');
 * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]
 * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']
 * result['shape'].print(); // [2, 3]
 * ```
 * @param input: 1-D. Strings to split.
 * @param delimiter: 0-D. Delimiter characters, or empty string.
 * @param skipEmpty: Optional. If true, skip the empty strings from the result.
 *     Defaults to true.
 * @return A map with the following properties:
 *     - indices: A dense matrix of int32 representing the indices of the sparse
 *       tensor.
 *     - values: A vector of strings corresponding to the splited values.
 *     - shape: a length-2 vector of int32 representing the shape of the sparse
 * tensor, where the first value is N and the second value is the maximum number
 * of tokens in a single input entry.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */ function stringSplit_(input, delimiter, skipEmpty = true) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "stringSplit", "string");
    const $delimiter = (0, _tensorUtilEnv.convertToTensor)(delimiter, "delimiter", "stringSplit", "string");
    if ($input.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);
    if ($delimiter.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);
    const attrs = {
        skipEmpty
    };
    const inputs = {
        input: $input,
        delimiter: $delimiter
    };
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.StringSplit), inputs, attrs);
    return {
        indices: result[0],
        values: result[1],
        shape: result[2]
    };
}
const stringSplit = (0, _operation.op)({
    stringSplit_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aa95R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringToHashBucketFast", ()=>stringToHashBucketFast);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../../engine");
var _kernelNames = require("../../kernel_names");
var _tensorUtilEnv = require("../../tensor_util_env");
var _operation = require("../operation");
/**
 * Converts each string in the input Tensor to its hash mod by a number of
 * buckets.
 *
 * The hash function is deterministic on the content of the string within the
 * process and will never change. However, it is not suitable for cryptography.
 * This function may be used when CPU time is scarce and inputs are trusted or
 * unimportant. There is a risk of adversaries constructing inputs that all hash
 * to the same bucket.
 *
 * ```js
 * const result = tf.string.stringToHashBucketFast(
 *   ['Hello', 'TensorFlow', '2.x'], 3);
 * result.print(); // [0, 2, 2]
 * ```
 * @param input: The strings to assign a hash bucket.
 * @param numBuckets: The number of buckets.
 * @return A Tensor of the same shape as the input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */ function stringToHashBucketFast_(input, numBuckets) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "stringToHashBucketFast", "string");
    const attrs = {
        numBuckets
    };
    if (numBuckets <= 0) throw new Error(`Number of buckets must be at least 1`);
    const inputs = {
        input: $input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.StringToHashBucketFast), inputs, attrs);
}
const stringToHashBucketFast = (0, _operation.op)({
    stringToHashBucketFast_
});

},{"../../engine":"1aEvR","../../kernel_names":"2CzXQ","../../tensor_util_env":"fsyzK","../operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3XeV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acos", ()=>acos);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function acos_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "acos");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Acos), inputs);
}
const acos = (0, _operation.op)({
    acos_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4a2CB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosh", ()=>acosh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function acosh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "acosh");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Acosh), inputs);
}
const acosh = (0, _operation.op)({
    acosh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ei3ol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addN", ()=>addN);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function addN_(tensors) {
    _util.assert(Array.isArray(tensors), ()=>"The argument passed to tf.addN() must be a list of tensors");
    _util.assert(tensors.length >= 1, ()=>`Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);
    const $tensors = tensors.map((t, i)=>(0, _tensorUtilEnv.convertToTensor)(t, `tensors${i}`, "addN"));
    const firstTensor = $tensors[0];
    $tensors.forEach((t)=>{
        if (t.dtype !== firstTensor.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
    });
    $tensors.forEach((t)=>{
        if (!_util.arraysEqual(t.shape, firstTensor.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
    });
    const inputs = $tensors;
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.AddN), inputs);
}
const addN = (0, _operation.op)({
    addN_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1HQ6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "all", ()=>all);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function all_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "all", "bool");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.All), inputs, attrs);
}
const all = (0, _operation.op)({
    all_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kpQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "any", ()=>any);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function any_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "any", "bool");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Any), inputs, attrs);
}
const any = (0, _operation.op)({
    any_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5OZBI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMax", ()=>argMax);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function argMax_(x, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "argMax");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ArgMax), inputs, attrs);
}
const argMax = (0, _operation.op)({
    argMax_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMsLv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMin", ()=>argMin);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function argMin_(x, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "argMin");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ArgMin), inputs, attrs);
}
const argMin = (0, _operation.op)({
    argMin_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bbCcQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asin", ()=>asin);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function asin_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "asin");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Asin), inputs);
}
const asin = (0, _operation.op)({
    asin_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPNhy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinh", ()=>asinh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function asinh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "asinh");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Asinh), inputs);
}
const asinh = (0, _operation.op)({
    asinh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnFT9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan", ()=>atan);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function atan_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "atan");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Atan), inputs);
}
const atan = (0, _operation.op)({
    atan_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h10xF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan2", ()=>atan2);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function atan2_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "atan2");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "atan2");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Atan2), inputs);
}
const atan2 = (0, _operation.op)({
    atan2_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBj8W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanh", ()=>atanh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function atanh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "atanh");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Atanh), inputs);
}
const atanh = (0, _operation.op)({
    atanh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljrt7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool", ()=>avgPool);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _cast = require("./cast");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */ function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "avgPool", "float32");
    const dilations = 1;
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);
    _convUtil.checkPadOnDimRoundingMode("avgPool", pad, dimRoundingMode);
    const inputs = {
        x: x4D
    };
    const attrs = {
        filterSize,
        strides,
        pad,
        dimRoundingMode
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    let res = (0, _engine.ENGINE).runKernel((0, _kernelNames.AvgPool), inputs, attrs);
    res = (0, _cast.cast)(res, $x.dtype);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const avgPool = (0, _operation.op)({
    avgPool_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./cast":"a7v0X","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k1jsf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool3d", ()=>avgPool3d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _cast = require("./cast");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = "NDHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "avgPool3d", "float32");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2],
            $x.shape[3]
        ]);
    }
    _util.assert(x5D.rank === 5, ()=>`Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
    (0, _convUtil.checkPadOnDimRoundingMode)("avgPool3d", pad, dimRoundingMode);
    const inputs = {
        x: x5D
    };
    const attrs = {
        filterSize,
        strides,
        pad,
        dimRoundingMode,
        dataFormat
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    let res = (0, _engine.ENGINE).runKernel((0, _kernelNames.AvgPool3D), inputs, attrs);
    res = (0, _cast.cast)(res, x5D.dtype);
    if (reshapedTo5D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3],
        res.shape[4]
    ]);
    return res;
}
const avgPool3d = (0, _operation.op)({
    avgPool3d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./cast":"a7v0X","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3HYWm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basicLSTMCell", ()=>basicLSTMCell);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _add = require("./add");
var _concat = require("./concat");
var _matMul = require("./mat_mul");
var _mul = require("./mul");
var _operation = require("./operation");
var _sigmoid = require("./sigmoid");
var _slice = require("./slice");
var _tanh = require("./tanh");
/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */ function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
    const $forgetBias = (0, _tensorUtilEnv.convertToTensor)(forgetBias, "forgetBias", "basicLSTMCell");
    const $lstmKernel = (0, _tensorUtilEnv.convertToTensor)(lstmKernel, "lstmKernel", "basicLSTMCell");
    const $lstmBias = (0, _tensorUtilEnv.convertToTensor)(lstmBias, "lstmBias", "basicLSTMCell");
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "basicLSTMCell");
    const $c = (0, _tensorUtilEnv.convertToTensor)(c, "c", "basicLSTMCell");
    const $h = (0, _tensorUtilEnv.convertToTensor)(h, "h", "basicLSTMCell");
    const combined = (0, _concat.concat)([
        $data,
        $h
    ], 1);
    const weighted = (0, _matMul.matMul)(combined, $lstmKernel);
    const res = (0, _add.add)(weighted, $lstmBias);
    // i = input_gate, j = new_input, f = forget_gate, o = output_gate
    const batchSize = res.shape[0];
    const sliceCols = res.shape[1] / 4;
    const sliceSize = [
        batchSize,
        sliceCols
    ];
    const i = (0, _slice.slice)(res, [
        0,
        0
    ], sliceSize);
    const j = (0, _slice.slice)(res, [
        0,
        sliceCols
    ], sliceSize);
    const f = (0, _slice.slice)(res, [
        0,
        sliceCols * 2
    ], sliceSize);
    const o = (0, _slice.slice)(res, [
        0,
        sliceCols * 3
    ], sliceSize);
    const newC = (0, _add.add)((0, _mul.mul)((0, _sigmoid.sigmoid)(i), (0, _tanh.tanh)(j)), (0, _mul.mul)($c, (0, _sigmoid.sigmoid)((0, _add.add)($forgetBias, f))));
    const newH = (0, _mul.mul)((0, _tanh.tanh)(newC), (0, _sigmoid.sigmoid)(o));
    return [
        newC,
        newH
    ];
}
const basicLSTMCell = (0, _operation.op)({
    basicLSTMCell_
});

},{"../tensor_util_env":"fsyzK","./add":"i4ulI","./concat":"jfkcZ","./mat_mul":"SZp9a","./mul":"8s4p1","./operation":"l6IGY","./sigmoid":"gXSuy","./slice":"ist4s","./tanh":"gSeNp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSeNp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanh", ()=>tanh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function tanh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tanh", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Tanh), inputs);
}
const tanh = (0, _operation.op)({
    tanh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvVrh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchToSpaceND", ()=>batchToSpaceND);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function batchToSpaceND_(x, blockShape, crops) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchToSpaceND");
    const prod = blockShape.reduce((a, b)=>a * b);
    _util.assert($x.rank >= 1 + blockShape.length, ()=>`input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
    _util.assert(crops.length === blockShape.length, ()=>`crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
    _util.assert($x.shape[0] % prod === 0, ()=>`input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` + `the elements of blockShape ${blockShape.join(" * ")} === ${prod}`);
    const inputs = {
        x: $x
    };
    const attrs = {
        blockShape,
        crops
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.BatchToSpaceND), inputs, attrs);
}
const batchToSpaceND = (0, _operation.op)({
    batchToSpaceND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8hFsz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm", ()=>batchNorm);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnormUtil = require("./batchnorm_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
    if (varianceEpsilon == null) varianceEpsilon = 0.001;
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($mean.rank === $variance.rank, ()=>"Batch normalization gradient requires mean and variance to have equal ranks.");
    _util.assert($offset == null || $mean.rank === $offset.rank, ()=>"Batch normalization gradient requires mean and offset to have equal ranks.");
    _util.assert($scale == null || $mean.rank === $scale.rank, ()=>"Batch normalization gradient requires mean and scale to have equal ranks.");
    const x4D = (0, _batchnormUtil.xAs4D)($x);
    const inputs = {
        x: x4D,
        scale: $scale,
        offset: $offset,
        mean: $mean,
        variance: $variance
    };
    const attrs = {
        varianceEpsilon
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.FusedBatchNorm), inputs, attrs);
    return (0, _reshape.reshape)(res, $x.shape);
}
const batchNorm = (0, _operation.op)({
    batchNorm_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm_util":"cixmY","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cixmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xAs4D", ()=>xAs4D);
var _reshape = require("./reshape");
function xAs4D(x) {
    let x4D;
    if (x.rank === 0 || x.rank === 1) x4D = (0, _reshape.reshape)(x, [
        1,
        1,
        1,
        x.size
    ]);
    else if (x.rank === 2) x4D = (0, _reshape.reshape)(x, [
        1,
        1,
        x.shape[0],
        x.shape[1]
    ]);
    else if (x.rank === 3) x4D = (0, _reshape.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2]
    ]);
    else x4D = x;
    return x4D;
}

},{"./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l93Zr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm2d", ()=>batchNorm2d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 2, ()=>`Error in batchNorm2D: x must be rank 2 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 2 || $mean.rank === 1, ()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 2 || $variance.rank === 1, ()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 2 || $scale.rank === 1, ()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 2 || $offset.rank === 1, ()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm2d = (0, _operation.op)({
    batchNorm2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXHC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm3d", ()=>batchNorm3d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 3, ()=>`Error in batchNorm3D: x must be rank 3 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 3 || $mean.rank === 1, ()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 3 || $variance.rank === 1, ()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 3 || $scale.rank === 1, ()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 3 || $offset.rank === 1, ()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm3d = (0, _operation.op)({
    batchNorm3d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jafZQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm4d", ()=>batchNorm4d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 4, ()=>`Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 4 || $mean.rank === 1, ()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 4 || $variance.rank === 1, ()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 4 || $scale.rank === 1, ()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 4 || $offset.rank === 1, ()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm4d = (0, _operation.op)({
    batchNorm4d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHQqH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastArgs", ()=>broadcastArgs);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Return the shape of s0 op s1 with broadcast.
 *
 * compute r0, the broadcasted shape as a tensor.
 * s0, s1 and r0 are all integer vectors.
 *
 * This function returns the shape of the result of an operation between
 * two tensors of size s0 and s1 performed with broadcast.
 *
 * @param s0 A tensor representing a shape
 * @param s1 A tensor representing a shape
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function broadcastArgs_(s0, s1) {
    const shape1Input = (0, _tensorUtilEnv.convertToTensor)(s0, "s0", "broadcastArgs", "int32");
    const shape2Input = (0, _tensorUtilEnv.convertToTensor)(s1, "s1", "broadcastArgs", "int32");
    if (shape1Input.rank !== 1) throw new Error("broadcastArgs(): first input must be a vector (rank=1). " + `Has rank ${shape1Input.rank}`);
    if (shape2Input.rank !== 1) throw new Error("broadcastArgs(): second input must be a vector (rank=1). " + `Has rank ${shape2Input.rank}`);
    const inputs = {
        s0: shape1Input,
        s1: shape2Input
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.BroadcastArgs), inputs);
}
const broadcastArgs = (0, _operation.op)({
    broadcastArgs_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iifhN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function ceil_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "ceil", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Ceil), inputs);
}
const ceil = (0, _operation.op)({
    ceil_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jqRn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clipByValue", ()=>clipByValue);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function clipByValue_(x, clipValueMin, clipValueMax) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "clipByValue");
    _util.assert(clipValueMin <= clipValueMax, ()=>`Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);
    const inputs = {
        x: $x
    };
    const attrs = {
        clipValueMin,
        clipValueMax
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ClipByValue), inputs, attrs);
}
const clipByValue = (0, _operation.op)({
    clipByValue_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSDh7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat1d", ()=>concat1d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */ function concat1d_(tensors) {
    return (0, _concat.concat)(tensors, 0 /* axis */ );
}
const concat1d = (0, _operation.op)({
    concat1d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3UOic":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat2d", ()=>concat2d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */ function concat2d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat2d = (0, _operation.op)({
    concat2d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MUc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat3d", ()=>concat3d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */ function concat3d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat3d = (0, _operation.op)({
    concat3d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYbyt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat4d", ()=>concat4d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */ function concat4d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat4d = (0, _operation.op)({
    concat4d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JA7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv1d", ()=>conv1d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _conv2D = require("./conv2d");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function conv1d_(x, filter, stride, pad, dataFormat = "NWC", dilation = 1, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv1d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv1d");
    let x3D = $x;
    let reshapedTo3D = false;
    if ($x.rank === 2) {
        reshapedTo3D = true;
        x3D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1]
        ]);
    }
    _util.assert(x3D.rank === 3, ()=>`Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
    _util.assert($filter.rank === 3, ()=>`Error in conv1d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);
    _convUtil.checkPadOnDimRoundingMode("conv1d", pad, dimRoundingMode);
    _util.assert(x3D.shape[2] === $filter.shape[1], ()=>`Error in conv1d: depth of input (${x3D.shape[2]}) must match ` + `input depth for filter ${$filter.shape[1]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(stride, dilation), ()=>"Error in conv1D: Either stride or dilation must be 1. " + `Got stride ${stride} and dilation '${dilation}'`);
    _util.assert(dataFormat === "NWC", ()=>`Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
    const filter4D = (0, _reshape.reshape)($filter, [
        1,
        $filter.shape[0],
        $filter.shape[1],
        $filter.shape[2]
    ]);
    const input4D = (0, _reshape.reshape)(x3D, [
        x3D.shape[0],
        1,
        x3D.shape[1],
        x3D.shape[2]
    ]);
    const strides = [
        1,
        stride
    ];
    const dilations = [
        1,
        dilation
    ];
    const conv2dDataFormat = "NHWC";
    const res = (0, _conv2D.conv2d)(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
    if (reshapedTo3D) return (0, _reshape.reshape)(res, [
        res.shape[2],
        res.shape[3]
    ]);
    return (0, _reshape.reshape)(res, [
        res.shape[0],
        res.shape[2],
        res.shape[3]
    ]);
}
const conv1d = (0, _operation.op)({
    conv1d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv2d":"94uN6","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lxl1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2dTranspose", ()=>conv2dTranspose);
var _tensorUtilEnv = require("../tensor_util_env");
var _conv2DBackpropInput = require("./conv2d_backprop_input");
var _operation = require("./operation");
/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2dTranspose");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2dTranspose");
    return (0, _conv2DBackpropInput.conv2DBackpropInput)(outputShape, $x, $filter, strides, pad, "NHWC", dimRoundingMode);
}
const conv2dTranspose = (0, _operation.op)({
    conv2dTranspose_
});

},{"../tensor_util_env":"fsyzK","./conv2d_backprop_input":"2dggy","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWVS8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3d", ()=>conv3d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function conv3d_(x, filter, strides, pad, dataFormat = "NDHWC", dilations = [
    1,
    1,
    1
]) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv3d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv3d");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2],
            $x.shape[3]
        ]);
    }
    _util.assert(x5D.rank === 5, ()=>`Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
    _util.assert($filter.rank === 5, ()=>`Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);
    _util.assert(x5D.shape[4] === $filter.shape[3], ()=>`Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);
    _util.assert((0, _convUtil.eitherStridesOrDilationsAreOne)(strides, dilations), ()=>"Error in conv3D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
    const inputs = {
        x: x5D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Conv3D), inputs, attrs);
    if (reshapedTo5D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3],
        res.shape[4]
    ]);
    return res;
}
const conv3d = (0, _operation.op)({
    conv3d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ehOM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3dTranspose", ()=>conv3dTranspose);
var _tensorUtilEnv = require("../tensor_util_env");
var _conv3DBackpropInput = require("./conv3d_backprop_input");
var _operation = require("./operation");
/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function conv3dTranspose_(x, filter, outputShape, strides, pad) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv3dTranspose");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv3dTranspose");
    return (0, _conv3DBackpropInput.conv3DBackpropInput)(outputShape, $x, $filter, strides, pad);
}
const conv3dTranspose = (0, _operation.op)({
    conv3dTranspose_
});

},{"../tensor_util_env":"fsyzK","./conv3d_backprop_input":"dmSvt","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmSvt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropInput", ()=>conv3DBackpropInput);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */ function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
    _util.assert(xShape.length === dy.rank, ()=>`Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape5D = xShape;
    let dy5D = dy;
    let reshapedTo5D = false;
    if (dy.rank === 4) {
        reshapedTo5D = true;
        dy5D = (0, _reshape.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2],
            dy.shape[3]
        ]);
        xShape5D = [
            1,
            xShape[0],
            xShape[1],
            xShape[2],
            xShape[3]
        ];
    }
    const inDepth = xShape5D[4];
    const outDepth = dy5D.shape[4];
    _util.assert(xShape5D.length === 5, ()=>`Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);
    _util.assert(dy5D.rank === 5, ()=>`Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);
    _util.assert(filter.rank === 5, ()=>`Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);
    _util.assert(inDepth === filter.shape[3], ()=>`Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);
    _util.assert(outDepth === filter.shape[4], ()=>`Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);
    const inputs = {
        dy: dy5D,
        filter
    };
    const attrs = {
        pad,
        strides,
        inputShape: xShape5D
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Conv3DBackpropInputV2), inputs, attrs);
    if (reshapedTo5D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3],
        res.shape[4]
    ]);
    return res;
}
const conv3DBackpropInput = (0, _operation.op)({
    conv3DBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jGVos":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cos", ()=>cos);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor. Must be float32 type.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function cos_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cos", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Cos), inputs);
}
const cos = (0, _operation.op)({
    cos_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lco0N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosh", ()=>cosh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor. Must be float32 type.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function cosh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cosh", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Cosh), inputs);
}
const cosh = (0, _operation.op)({
    cosh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVzoY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumprod", ()=>cumprod);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the cumulative product of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumprod().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumprod().print();
 * ```
 *
 * @param x The input tensor to cumulatively multiply.
 * @param axis The axis along which to multiply. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative product. Optional.
 *     Defaults to false. If set to true then the product of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to multiply in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */ function cumprod_(x, axis = 0, exclusive = false, reverse = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cumprod");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        exclusive,
        reverse
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Cumprod), inputs, attrs);
}
const cumprod = (0, _operation.op)({
    cumprod_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jWWj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumsum", ()=>cumsum);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */ function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cumsum");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        exclusive,
        reverse
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Cumsum), inputs, attrs);
}
const cumsum = (0, _operation.op)({
    cumsum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6QNxL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "denseBincount", ()=>denseBincount);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1 or rank 2.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 * @param binaryOutput Optional. Whether the kernel should count the appearance
 *     or number of occurrences. Defaults to False.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function denseBincount_(x, weights, size, binaryOutput = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "denseBincount");
    const $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "denseBincount");
    _util.assert($x.dtype === "int32", ()=>`Error in denseBincount: input ` + `dtype must be int32, but got ${$x.dtype}`);
    _util.assert($x.rank <= 2, ()=>`Error in denseBincount: input must be at most rank 2, but got ` + `rank ${$x.rank}.`);
    _util.assert(size >= 0, ()=>`size must be non-negative, but got ${size}.`);
    _util.assert($weights.size === $x.size || $weights.size === 0, ()=>`Error in denseBincount: weights must have the same shape as x or ` + `0-length, but got x shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);
    const inputs = {
        x: $x,
        weights: $weights
    };
    const attrs = {
        size,
        binaryOutput
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.DenseBincount), inputs, attrs);
}
const denseBincount = (0, _operation.op)({
    denseBincount_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6XiCc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthToSpace", ()=>depthToSpace);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function depthToSpace_(x, blockSize, dataFormat = "NHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthToSpace", "float32");
    const inputHeight = dataFormat === "NHWC" ? $x.shape[1] : $x.shape[2];
    const inputWidth = dataFormat === "NHWC" ? $x.shape[2] : $x.shape[3];
    const inputDepth = dataFormat === "NHWC" ? $x.shape[3] : $x.shape[1];
    _util.assert(blockSize > 1, ()=>`blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);
    _util.assert(inputHeight * blockSize >= 0, ()=>`Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
    _util.assert(inputWidth * blockSize >= 0, ()=>`Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
    _util.assert(inputDepth % (blockSize * blockSize) === 0, ()=>`Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
    const inputs = {
        x: $x
    };
    const attrs = {
        blockSize,
        dataFormat
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.DepthToSpace), inputs, attrs);
}
const depthToSpace = (0, _operation.op)({
    depthToSpace_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjdna":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diag", ()=>diag);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function diag_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "diag");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Diag), inputs);
}
const diag = (0, _operation.op)({
    diag_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yV9N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2d", ()=>dilation2d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function dilation2d_(x, filter, strides, pad, dilations = [
    1,
    1
], dataFormat = "NHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "dilation2d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "dilation2d");
    _util.assert($x.rank === 3 || $x.rank === 4, ()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ` + `${$x.rank}.`);
    _util.assert($filter.rank === 3, ()=>`Error in dilation2d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);
    _util.assert(dataFormat === "NHWC", ()=>`Error in dilation2d: Only NHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
        reshapedTo4D = true;
    }
    const inputs = {
        x: x4D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dilations
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Dilation2D), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const dilation2d = (0, _operation.op)({
    dilation2d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8t5q0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divNoNan", ()=>divNoNan);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _div = require("./div");
var _equal = require("./equal");
var _operation = require("./operation");
var _where = require("./where");
var _zerosLike = require("./zeros_like");
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function divNoNan_(a, b) {
    // TODO: Make this into its own kernel.
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "div");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "div");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const divResult = (0, _div.div)($a, $b);
    const zeros = (0, _zerosLike.zerosLike)(divResult);
    const bEqualsZero = (0, _equal.equal)($b, zeros);
    return (0, _where.where)(bEqualsZero, zeros, divResult);
}
const divNoNan = (0, _operation.op)({
    divNoNan_
});

},{"../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./div":"3bNgZ","./equal":"dg46U","./operation":"l6IGY","./where":"3ZR1W","./zeros_like":"dwK1F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dg46U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equal", ()=>equal);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function equal_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "equal", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "equal", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Equal), inputs);
}
const equal = (0, _operation.op)({
    equal_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yhj3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _matMul = require("./mat_mul");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function dot_(t1, t2) {
    const $t1 = (0, _tensorUtilEnv.convertToTensor)(t1, "t1", "dot");
    const $t2 = (0, _tensorUtilEnv.convertToTensor)(t2, "t2", "dot");
    _util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), ()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);
    const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];
    const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];
    _util.assert(t1Inner === t2Inner, ()=>`Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);
    if ($t1.rank === 1 && $t2.rank === 1) {
        const t12D = (0, _reshape.reshape)($t1, [
            1,
            -1
        ]);
        const t22D = (0, _reshape.reshape)($t2, [
            -1,
            1
        ]);
        const t1t2 = (0, _matMul.matMul)(t12D, t22D);
        return (0, _reshape.reshape)(t1t2, []);
    } else if ($t1.rank === 1 && $t2.rank === 2) {
        const t12D1 = (0, _reshape.reshape)($t1, [
            1,
            -1
        ]);
        const t22D1 = (0, _reshape.reshape)($t2, [
            $t2.shape[0],
            $t2.shape[1]
        ]);
        const t1t21 = (0, _matMul.matMul)(t12D1, t22D1);
        return (0, _reshape.reshape)(t1t21, [
            t1t21.size
        ]);
    } else if ($t1.rank === 2 && $t2.rank === 1) {
        const t22D2 = (0, _reshape.reshape)($t2, [
            -1,
            1
        ]);
        const t1t22 = (0, _matMul.matMul)($t1, t22D2);
        return (0, _reshape.reshape)(t1t22, [
            t1t22.size
        ]);
    } else {
        const t22D3 = (0, _reshape.reshape)($t2, [
            $t2.shape[0],
            $t2.shape[1]
        ]);
        const t1t23 = (0, _matMul.matMul)($t1, t22D3);
        return t1t23;
    }
}
const dot = (0, _operation.op)({
    dot_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./mat_mul":"SZp9a","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6vZGq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Tensor contraction over specified indices and outer product.
 *
 * `einsum` allows defining Tensors by defining their element-wise computation.
 * This computation is based on
 * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).
 *
 * Some special cases include:
 *
 * Matrix multiplication:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('ij,jk->ik', x, y).print();
 * ```
 *
 * Dot product:
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 * const y = tf.tensor1d([0, 1, 2]);
 * x.print();
 * y.print();
 * tf.einsum('i,i->', x, y).print();
 * ```
 *
 * Batch dot product:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('bi,bi->b', x, y).print();
 * ```
 *
 * Outer prouduct:
 * ```js
 * const x = tf.tensor1d([1, 3, 5]);
 * const y = tf.tensor1d([2, 4, 6]);
 * x.print();
 * y.print();
 * tf.einsum('i,j->ij', x, y).print();
 * ```
 *
 * Matrix transpose:
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * x.print();
 * tf.einsum('ij->ji', x).print();
 * ```
 *
 * Batch matrix transpose:
 * ```js
 * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);
 * x.print();
 * tf.einsum('bij->bji', x).print();
 * ```
 *
 * Limitations:
 *
 * This implementation of einsum has the following limitations:
 *
 * - Does not support >2 input tensors.
 * - Does not support duplicate axes for any given input tensor. E.g., equation
 *   'ii->' is not suppoted.
 * - The `...` notation is not supported.
 *
 * @param equation a string describing the contraction, in the same format as
 * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).
 * @param tensors the input(s) to contract (each one a Tensor), whose shapes
 *     should be consistent with equation.
 * @returns The output tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Matrices'}
 */ parcelHelpers.export(exports, "einsum_", ()=>einsum_);
parcelHelpers.export(exports, "einsum", ()=>einsum);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
function einsum_(equation, ...tensors) {
    const $tensors = tensors.map((t, i)=>(0, _tensorUtilEnv.convertToTensor)(t, `tensors${i}`, "einsum"));
    const attrs = {
        equation
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Einsum), $tensors, attrs);
}
const einsum = (0, _operation.op)({
    einsum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79vMO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erf", ()=>erf);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _cast = require("./cast");
var _operation = require("./operation");
/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function erf_(x) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "erf");
    _util.assert($x.dtype === "int32" || $x.dtype === "float32", ()=>"Input dtype must be `int32` or `float32`.");
    if ($x.dtype === "int32") $x = (0, _cast.cast)($x, "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Erf), inputs);
}
const erf = (0, _operation.op)({
    erf_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./cast":"a7v0X","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLzbk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "euclideanNorm", ()=>euclideanNorm);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _norm = require("./norm");
var _operation = require("./operation");
/**
 * Computes the euclidean norm of scalar, vectors, and matrices.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.euclideanNorm().print();  // or tf.euclideanNorm(x)
 * ```
 *
 * @param x The input array.
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. euclideanNorm(x) is equivalent
 * to euclideanNorm(x.reshape([-1])). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function euclideanNorm_(x, axis = null, keepDims = false) {
    return (0, _norm.norm)(x, "euclidean", axis, keepDims);
}
const euclideanNorm = (0, _operation.op)({
    euclideanNorm_
});

},{"./norm":"3lSqt","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g03Mx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expm1", ()=>expm1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function expm1_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "expm1");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Expm1), inputs);
}
const expm1 = (0, _operation.op)({
    expm1_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k53Wo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function floor_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "floor", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Floor), inputs);
}
const floor = (0, _operation.op)({
    floor_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFXWL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gather", ()=>gather);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 * @param batchDims Optional. The number of batch dimensions. It must be less
 *     than or equal to rank(indices). Defaults to 0.
 *     The output tensor will have shape of
 *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ function gather_(x, indices, axis = 0, batchDims = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "gather");
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "gather", "int32");
    const inputs = {
        x: $x,
        indices: $indices
    };
    const attrs = {
        axis,
        batchDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.GatherV2), inputs, attrs);
}
const gather = (0, _operation.op)({
    gather_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d4RQc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFinite", ()=>isFinite);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function isFinite_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isFinite");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.IsFinite), inputs);
}
const isFinite = (0, _operation.op)({
    isFinite_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gw4BW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInf", ()=>isInf);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function isInf_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isInf");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.IsInf), inputs);
}
const isInf = (0, _operation.op)({
    isInf_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TZxM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNaN", ()=>isNaN);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function isNaN_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isNaN");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.IsNan), inputs);
}
const isNaN = (0, _operation.op)({
    isNaN_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Jx3h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "less", ()=>less);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function less_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "less", "string_or_numeric");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "less", "string_or_numeric");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Less), inputs);
}
const less = (0, _operation.op)({
    less_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kLK3E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "linspace", ()=>linspace);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
function linspace(start, stop, num) {
    if (num <= 0) throw new Error("The number of values should be positive.");
    const attrs = {
        start,
        stop,
        num
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LinSpace), {}, attrs);
}

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8x0DH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localResponseNormalization", ()=>localResponseNormalization);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "localResponseNormalization");
    _util.assert($x.rank === 4 || $x.rank === 3, ()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
    _util.assert(_util.isInt(depthRadius), ()=>`Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    const inputs = {
        x: x4D
    };
    const attrs = {
        depthRadius,
        bias,
        alpha,
        beta
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.LRN), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    else return res;
}
const localResponseNormalization = (0, _operation.op)({
    localResponseNormalization_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4GnLt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logSigmoid", ()=>logSigmoid);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _gradients = require("../gradients");
var _tensorUtilEnv = require("../tensor_util_env");
var _mul = require("./mul");
var _neg = require("./neg");
var _operation = require("./operation");
var _sigmoid = require("./sigmoid");
var _softplus = require("./softplus");
/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function logSigmoid_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logSigmoid");
    // Use a custom gradient to maintain previous implementation.
    // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
    // directly
    const customOp = (0, _gradients.customGrad)((x)=>{
        // TODO(yassogba) we can remove the chained softplus call here only
        // after backends have modualrized softplus at which point we can call
        // engine runKernel(..., Sotfplus, ...) directly.
        const value = (0, _neg.neg)((0, _softplus.softplus)((0, _neg.neg)(x)));
        const gradFunc = (dy)=>{
            const derX = (0, _mul.mul)(dy, (0, _sigmoid.sigmoid)((0, _neg.neg)(x)));
            return derX;
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp($x);
}
const logSigmoid = (0, _operation.op)({
    logSigmoid_
});

},{"../gradients":"4PSmY","../tensor_util_env":"fsyzK","./mul":"8s4p1","./neg":"0PGOC","./operation":"l6IGY","./sigmoid":"gXSuy","./softplus":"knPhy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"knPhy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softplus", ()=>softplus);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function softplus_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "softplus");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Softplus), inputs);
}
const softplus = (0, _operation.op)({
    softplus_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XjWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logSoftmax", ()=>logSoftmax);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _gradients = require("../gradients");
var _tensorUtilEnv = require("../tensor_util_env");
var _cast = require("./cast");
var _exp = require("./exp");
var _log = require("./log");
var _max = require("./max");
var _mul = require("./mul");
var _operation = require("./operation");
var _sub = require("./sub");
var _sum = require("./sum");
/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function logSoftmax_(logits, axis = -1) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "logSoftmax");
    if (axis === -1) axis = $logits.rank - 1;
    if (axis !== $logits.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. " + `Logits was rank ${$logits.rank} and axis was ${axis}`);
    // const forward: ForwardFunc<Tensor> = (backend, save) => {
    //   const keepDims = true;
    //   const xMax = max(logits, axis, true);
    //   const shifted = sub(logits, xMax);
    //   const value =
    //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,
    //       keepDims)));
    //   save([value]);
    //   return value;
    // };
    // Use a custom gradient for numerical stability.
    const customOp = (0, _gradients.customGrad)((logits, save)=>{
        const keepDims = true;
        const xMax = (0, _max.max)(logits, axis, true);
        const shifted = (0, _sub.sub)(logits, xMax);
        const value = (0, _sub.sub)((0, _cast.cast)(shifted, "float32"), (0, _log.log)((0, _sum.sum)((0, _exp.exp)(shifted), axis, keepDims)));
        save([
            value
        ]);
        const gradFunc = (dy, saved)=>{
            const [value] = saved;
            const keepDims = true;
            const softmax = (0, _exp.exp)(value);
            return (0, _sub.sub)(dy, (0, _mul.mul)((0, _sum.sum)(dy, axis, keepDims), softmax));
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp($logits);
// TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.
// const inputs: LogSoftmaxInputs = {logits: $logits};
// const attrs: LogSoftmaxAttrs = {axis};
// return ENGINE.runKernel(
//            LogSoftmax, inputs as {} as NamedTensorMap,
//            attrs as {} as NamedAttrMap);
}
const logSoftmax = (0, _operation.op)({
    logSoftmax_
});

},{"../gradients":"4PSmY","../tensor_util_env":"fsyzK","./cast":"a7v0X","./exp":"75ybM","./log":"loW45","./max":"13F1p","./mul":"8s4p1","./operation":"l6IGY","./sub":"mafuF","./sum":"91lxl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2PmTV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalNot", ()=>logicalNot);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function logicalNot_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logicalNot", "bool");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LogicalNot), inputs);
}
const logicalNot = (0, _operation.op)({
    logicalNot_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"as0et":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalOr", ()=>logicalOr);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function logicalOr_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalOr", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalOr", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.LogicalOr), inputs);
}
const logicalOr = (0, _operation.op)({
    logicalOr_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luRmM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalXor", ()=>logicalXor);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _logicalAnd = require("./logical_and");
var _logicalNot = require("./logical_not");
var _logicalOr = require("./logical_or");
var _operation = require("./operation");
/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ function logicalXor_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalXor", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalXor", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    // x ^ y = (x | y) & ~(x & y)
    return (0, _logicalAnd.logicalAnd)((0, _logicalOr.logicalOr)(a, b), (0, _logicalNot.logicalNot)((0, _logicalAnd.logicalAnd)(a, b)));
}
const logicalXor = (0, _operation.op)({
    logicalXor_
});

},{"../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./logical_and":"5Pn2X","./logical_not":"2PmTV","./logical_or":"as0et","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e32KR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The index returned corresponds to the first edge greater than or equal to the
 * value.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'lowerBound' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);
 * let values = tf.tensor1d([0.0, 4.1, 12.0]);
 * const result1 = tf.lowerBound(edges, values);
 * result1.print(); // [1, 2, 4]
 *
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * values = tf.tensor1d([0, 4, 10]);
 * const result2 = tf.lowerBound(seq, values);
 * result2.print(); // [0, 2, 3]
 *
 * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],
 *                                     [1., 2., 3., 4., 5.]]);
 * values = tf.tensor2d([[9.8, 2.1, 4.3],
 *                       [0.1, 6.6, 4.5, ]]);
 * const result3 = tf.lowerBound(sortedSequence, values);
 * result3.print(); // [[4, 1, 2], [0, 5, 4]]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying lower bound to each value. The result is not a global index to
 *     the entire Tensor, but the index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ parcelHelpers.export(exports, "lowerBound", ()=>lowerBound);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _searchSorted = require("./search_sorted");
function lowerBound(sortedSequence, values) {
    return (0, _searchSorted.searchSorted)(sortedSequence, values, "left");
}

},{"./search_sorted":"fTzhX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTzhX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "searchSorted", ()=>searchSorted);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _utilBase = require("../util_base");
var _operation = require("./operation");
var _reshape = require("./reshape");
const INT32_MAX = 2147483648;
/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The side argument controls which index is returned if a value lands exactly
 * on an edge.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'sortedSequence' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);
 * let values = tf.tensor1d([0.0, 4.1, 12.0]);
 * const result1 = tf.searchSorted(edges, values, 'left');
 * result1.print(); // [1, 2, 4]
 *
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * values = tf.tensor1d([0, 4, 10]);
 * const result2 = tf.searchSorted(seq, values, 'left');
 * result2.print(); // [0, 2, 3]
 * const result3 = tf.searchSorted(seq, values, 'right');
 * result3.print(); // [1, 2, 5]
 *
 * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],
 *                                     [1., 2., 3., 4., 5.]]);
 * values = tf.tensor2d([[9.8, 2.1, 4.3],
 *                       [0.1, 6.6, 4.5, ]]);
 * const result4 = tf.searchSorted(sortedSequence, values, 'left');
 * result4.print(); // [[4, 1, 2], [0, 5, 4]]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower
 *     bound and 'right' to upper bound.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying either lower bound or upper bound (depending on side) to each
 *     value. The result is not a global index to the entire Tensor, but the
 *     index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ function searchSorted_(sortedSequence, values, side = "left") {
    const $sortedSequence = (0, _tensorUtilEnv.convertToTensor)(sortedSequence, "sortedSequence", "searchSorted");
    const $values = (0, _tensorUtilEnv.convertToTensor)(values, "values", "searchSorted");
    const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];
    const valuesSize = $values.shape[$values.shape.length - 1];
    const $sortedSequence2D = (0, _reshape.reshape)($sortedSequence, [
        -1,
        sequenceSize
    ]);
    const $values2D = (0, _reshape.reshape)($values, [
        -1,
        valuesSize
    ]);
    if ($sortedSequence2D.rank < 2) throw new Error(`Sorted input argument must be at least 2-dimensional`);
    if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) throw new Error(`Leading dimension of 'sortedSequence' and 'values' must match.`);
    if ((0, _utilBase.sizeFromShape)($values2D.shape) >= INT32_MAX) throw new Error(`values tensor size must less than ${INT32_MAX}`);
    if ($sortedSequence2D.shape[1] >= INT32_MAX) throw new Error(`trailing dim_size must less than ${INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);
    const inputs = {
        sortedSequence: $sortedSequence2D,
        values: $values2D
    };
    const attrs = {
        side
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SearchSorted), inputs, attrs);
}
const searchSorted = (0, _operation.op)({
    searchSorted_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util_base":"a2mCK","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i0Rrj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool", ()=>maxPool);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */ function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPool");
    const dilations = 1;
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    _convUtil.checkPadOnDimRoundingMode("maxPool", pad, dimRoundingMode);
    const inputs = {
        x: x4D
    };
    const attrs = {
        filterSize,
        strides,
        pad,
        dimRoundingMode
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.MaxPool), inputs, attrs);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const maxPool = (0, _operation.op)({
    maxPool_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1iVmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool3d", ()=>maxPool3d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function maxPool3d_(x, filterSize = [
    1,
    1,
    1
], strides, pad, dimRoundingMode, dataFormat = "NDHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPool3d");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2],
            $x.shape[3]
        ]);
    }
    _util.assert(x5D.rank === 5, ()=>`Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in maxPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
    (0, _convUtil.checkPadOnDimRoundingMode)("maxPool3d", pad, dimRoundingMode);
    const inputs = {
        x: x5D
    };
    const attrs = {
        filterSize,
        strides,
        pad,
        dimRoundingMode,
        dataFormat
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.MaxPool3D), inputs, attrs);
    if (reshapedTo5D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3],
        res.shape[4]
    ]);
    return res;
}
const maxPool3d = (0, _operation.op)({
    maxPool3d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv_util":"oHP2H","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQuAD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmax", ()=>maxPoolWithArgmax);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPoolWithArgmax");
    const inputs = {
        x: $x
    };
    const attrs = {
        filterSize,
        strides,
        pad,
        includeBatchInIndex
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = (0, _engine.ENGINE).runKernel((0, _kernelNames.MaxPoolWithArgmax), inputs, attrs);
    return {
        result: result[0],
        indexes: result[1]
    };
}
const maxPoolWithArgmax = (0, _operation.op)({
    maxPoolWithArgmax_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clLCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maximum", ()=>maximum);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _cast = require("./cast");
var _operation = require("./operation");
/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function maximum_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "maximum");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "maximum");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "bool") {
        $a = (0, _cast.cast)($a, "int32");
        $b = (0, _cast.cast)($b, "int32");
    }
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Maximum), inputs);
}
const maximum = (0, _operation.op)({
    maximum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./cast":"a7v0X","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBiGM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Broadcasts parameters for evaluation on an N-D grid.
 *
 * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`
 * of N-D coordinate arrays for evaluating expressions on an N-D grid.
 *
 * Notes:
 * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.
 * When the `indexing` argument is set to 'xy' (the default), the broadcasting
 * instructions for the first two dimensions are swapped.
 * Examples:
 * Calling `const [X, Y] = meshgrid(x, y)` with the tensors
 *
 * ```javascript
 * const x = [1, 2, 3];
 * const y = [4, 5, 6];
 * const [X, Y] = tf.meshgrid(x, y);
 * // X = [[1, 2, 3],
 * //      [1, 2, 3],
 * //      [1, 2, 3]]
 * // Y = [[4, 4, 4],
 * //      [5, 5, 5],
 * //      [6, 6, 6]]
 * ```
 *
 * @param x Tensor with rank geq 1.
 * @param y Tensor with rank geq 1.
 * @param indexing
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */ parcelHelpers.export(exports, "meshgrid", ()=>meshgrid);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _matMul = require("./mat_mul");
var _ones = require("./ones");
var _reshape = require("./reshape");
var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _utilBase = require("../util_base");
function meshgrid(x, y, { indexing ="xy"  } = {}) {
    if (indexing !== "xy" && indexing !== "ij") throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);
    if (x === undefined) return [];
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "meshgrid", x instanceof (0, _tensor.Tensor) ? x.dtype : "float32");
    if (y === undefined) return [
        $x
    ];
    let $y = (0, _tensorUtilEnv.convertToTensor)(y, "y", "meshgrid", y instanceof (0, _tensor.Tensor) ? y.dtype : "float32");
    const w = (0, _utilBase.sizeFromShape)($x.shape);
    const h = (0, _utilBase.sizeFromShape)($y.shape);
    if (indexing === "xy") {
        $x = (0, _reshape.reshape)($x, [
            1,
            -1
        ]);
        $y = (0, _reshape.reshape)($y, [
            -1,
            1
        ]);
        return [
            (0, _matMul.matMul)((0, _ones.ones)([
                h,
                1
            ], $x.dtype), $x),
            (0, _matMul.matMul)($y, (0, _ones.ones)([
                1,
                w
            ], $y.dtype)), 
        ];
    }
    $x = (0, _reshape.reshape)($x, [
        -1,
        1
    ]);
    $y = (0, _reshape.reshape)($y, [
        1,
        -1
    ]);
    return [
        (0, _matMul.matMul)($x, (0, _ones.ones)([
            1,
            h
        ], $x.dtype)),
        (0, _matMul.matMul)((0, _ones.ones)([
            w,
            1
        ], $y.dtype), $y), 
    ];
}

},{"./mat_mul":"SZp9a","./ones":"dl9XL","./reshape":"45nfd","../tensor":"DPGBx","../tensor_util_env":"fsyzK","../util_base":"a2mCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kApVB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mirrorPad", ()=>mirrorPad);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Pads a `tf.Tensor` using mirror padding.
 *
 * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
 *
 * ```js
 * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
 * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * In "reflect" mode, the padded regions do not include the borders,
 * while in "symmetric" mode the padded regions do include the borders.
 * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
 * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
 * `[1, 2, 3, 3, 2]` in "symmetric" mode.
 * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
 * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
 * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
 * `x.shape[D]`
 * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function mirrorPad_(x, paddings, mode) {
    _util.assert(mode === "reflect" || mode === "symmetric", ()=>`Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "mirrorPad");
    if ($x.rank === 0) throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
    _util.assert(paddings.length === $x.rank, ()=>`Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);
    const shapeOffset = mode === "reflect" ? 1 : 0;
    for(let i = 0; i < $x.rank; i++){
        _util.assert(paddings[i].length === 2, ()=>`Invalid number of paddings. Must be length of 2 each.`);
        _util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, ()=>`Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);
    }
    const attrs = {
        paddings,
        mode
    };
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.MirrorPad), inputs, attrs);
}
const mirrorPad = (0, _operation.op)({
    mirrorPad_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"js6fK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mod", ()=>mod);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */ function mod_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "mod");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "mod");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Mod), inputs);
}
const mod = (0, _operation.op)({
    mod_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eqmi8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moments", ()=>moments);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _axisUtil = require("./axis_util");
var _cast = require("./cast");
var _mean = require("./mean");
var _operation = require("./operation");
var _reshape = require("./reshape");
var _square = require("./square");
var _sub = require("./sub");
/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function moments_(x, axis = null, keepDims = false) {
    x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "moments");
    const axes = (0, _util.parseAxisParam)(axis, x.shape);
    const xMean = (0, _mean.mean)(x, axes, keepDims);
    let keepDimsShape = xMean.shape;
    if (!keepDims) keepDimsShape = (0, _axisUtil.expandShapeToKeepDim)(xMean.shape, axes);
    const devSquared = (0, _square.square)((0, _sub.sub)((0, _cast.cast)(x, "float32"), (0, _reshape.reshape)(xMean, keepDimsShape)));
    const variance = (0, _mean.mean)(devSquared, axes, keepDims);
    return {
        mean: xMean,
        variance
    };
}
const moments = (0, _operation.op)({
    moments_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./axis_util":"1A9rc","./cast":"a7v0X","./mean":"aFTiZ","./operation":"l6IGY","./reshape":"45nfd","./square":"52Axi","./sub":"mafuF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8PIwB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiRNNCell", ()=>multiRNNCell);
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */ function multiRNNCell_(lstmCells, data, c, h) {
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "multiRNNCell");
    const $c = (0, _tensorUtilEnv.convertToTensorArray)(c, "c", "multiRNNCell");
    const $h = (0, _tensorUtilEnv.convertToTensorArray)(h, "h", "multiRNNCell");
    let input = $data;
    const newStates = [];
    for(let i = 0; i < lstmCells.length; i++){
        const output = lstmCells[i](input, $c[i], $h[i]);
        newStates.push(output[0]);
        newStates.push(output[1]);
        input = output[1];
    }
    const newC = [];
    const newH = [];
    for(let i1 = 0; i1 < newStates.length; i1 += 2){
        newC.push(newStates[i1]);
        newH.push(newStates[i1 + 1]);
    }
    return [
        newC,
        newH
    ];
}
const multiRNNCell = (0, _operation.op)({
    multiRNNCell_
});

},{"../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyXIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomial", ()=>multinomial);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function multinomial_(logits, numSamples, seed, normalized = false) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "multinomial");
    const numOutcomes = $logits.size;
    const origRank = $logits.rank;
    if (numOutcomes < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);
    if (origRank > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
    // TODO(lina128): Investigate correct seed behavior. The code seems not allow
    // setting see to 0.
    seed = seed || Math.random();
    // The kernel only accepts (and returns) rank 2 tensors.
    const logits2D = origRank === 1 ? (0, _reshape.reshape)($logits, [
        1,
        -1
    ]) : $logits;
    const inputs = {
        logits: logits2D
    };
    const attrs = {
        numSamples,
        seed,
        normalized
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = (0, _engine.ENGINE).runKernel((0, _kernelNames.Multinomial), inputs, attrs);
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return origRank === 1 ? (0, _reshape.reshape)(res, [
        res.size
    ]) : res;
}
const multinomial = (0, _operation.op)({
    multinomial_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iI53r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onesLike", ()=>onesLike);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function onesLike_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "onesLike");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.OnesLike), inputs);
}
const onesLike = (0, _operation.op)({
    onesLike_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4IFP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "outerProduct", ()=>outerProduct);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _matMul = require("./mat_mul");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */ function outerProduct_(v1, v2) {
    const $v1 = (0, _tensorUtilEnv.convertToTensor)(v1, "v1", "outerProduct");
    const $v2 = (0, _tensorUtilEnv.convertToTensor)(v2, "v2", "outerProduct");
    _util.assert($v1.rank === 1 && $v2.rank === 1, ()=>`Error in outerProduct: inputs must be rank 1, but got ranks ` + `${$v1.rank} and ${$v2.rank}.`);
    const v12D = (0, _reshape.reshape)($v1, [
        -1,
        1
    ]);
    const v22D = (0, _reshape.reshape)($v2, [
        1,
        -1
    ]);
    return (0, _matMul.matMul)(v12D, v22D);
}
const outerProduct = (0, _operation.op)({
    outerProduct_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./mat_mul":"SZp9a","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hj7a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad", ()=>pad);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
 * refer to `tf.mirrorPad`
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function pad_(x, paddings, constantValue = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "pad");
    if ($x.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    const attrs = {
        paddings,
        constantValue
    };
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.PadV2), inputs, attrs);
}
const pad = (0, _operation.op)({
    pad_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khUzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad1d", ()=>pad1d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */ function pad1d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 2, ()=>"Invalid number of paddings. Must be length of 2.");
    return (0, _pad.pad)(x, [
        paddings
    ], constantValue);
}
const pad1d = (0, _operation.op)({
    pad1d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2JSzi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad2d", ()=>pad2d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */ function pad2d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad2d = (0, _operation.op)({
    pad2d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2QuB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad3d", ()=>pad3d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */ function pad3d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad3d = (0, _operation.op)({
    pad3d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQdLI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad4d", ()=>pad4d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */ function pad4d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad4d = (0, _operation.op)({
    pad4d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vxAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pool", ()=>pool);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _avgPool = require("./avg_pool");
var _batchToSpaceNd = require("./batch_to_space_nd");
var _convUtil = require("./conv_util");
var _maxPool = require("./max_pool");
var _operation = require("./operation");
var _reshape = require("./reshape");
var _spaceToBatchNd = require("./space_to_batch_nd");
/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function pool_(input, windowShape, poolingType, pad, dilations, strides, dimRoundingMode) {
    if (dilations == null) dilations = [
        1,
        1
    ];
    if (strides == null) strides = 1;
    if (pad === 0) pad = "valid";
    const $x = (0, _tensorUtilEnv.convertToTensor)(input, "x", "maxPool");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in pool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _convUtil.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
    const dilation = [
        convInfo.dilationHeight,
        convInfo.dilationWidth
    ];
    // The following implementation does batchToSpace(pool(spaceToBatch(x)))
    // whenever dilation > 1 since the TF kernels do not support dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
    let basePadding;
    if (pad === "same") basePadding = withSpaceToBatchBasePaddings([
        convInfo.filterHeight,
        convInfo.filterWidth
    ], dilation);
    else basePadding = [
        [
            0,
            0
        ],
        [
            0,
            0
        ]
    ];
    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([
        convInfo.inHeight,
        convInfo.inWidth
    ], dilation, basePadding);
    const convertedPad = isDilationOne ? pad : "valid";
    const convertedX = isDilationOne ? x4D : (0, _spaceToBatchNd.spaceToBatchND)(x4D, dilation, adjustedPadding);
    const forwardOp = poolingType === "avg" ? ()=>(0, _avgPool.avgPool)(convertedX, windowShape, strides, convertedPad, dimRoundingMode) : ()=>(0, _maxPool.maxPool)(convertedX, windowShape, strides, convertedPad, dimRoundingMode);
    const y = forwardOp();
    const res = isDilationOne ? y : (0, _batchToSpaceNd.batchToSpaceND)(y, dilation, adjustedCrops);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
// Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
    const padStart = basePadding.map((b)=>b[0]);
    const origPadEnd = basePadding.map((b)=>b[1]);
    const fullInputShape = inputShape.concat(padStart, origPadEnd);
    const padEndExtra = blockShape.map((b, i)=>(b - fullInputShape[i] % b) % b);
    const padEnd = origPadEnd.map((s, i)=>s + padEndExtra[i]);
    const paddings = blockShape.map((_, i)=>[
            padStart[i],
            padEnd[i]
        ]);
    const crops = blockShape.map((_, i)=>[
            0,
            padEndExtra[i]
        ]);
    return [
        paddings,
        crops
    ];
}
// Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
function withSpaceToBatchBasePaddings(filterShape, dilation) {
    // Spatial dimensions of the filters and the upsampled filters in which we
    // introduce (rate - 1) zeros between consecutive filter values.
    const dilatedFilterShape = filterShape.map((s, i)=>{
        return s + (s - 1) * (dilation[i] - 1);
    });
    const padExtraShape = dilatedFilterShape.map((s)=>s - 1);
    // When padding is odd, we pad more at end, following the same
    // convention as conv2d.
    const padExtraStart = padExtraShape.map((s)=>Math.floor(s / 2));
    const padExtraEnd = padExtraShape.map((s, i)=>s - padExtraStart[i]);
    return padExtraShape.map((_, i)=>{
        return [
            padExtraStart[i],
            padExtraEnd[i]
        ];
    });
}
const pool = (0, _operation.op)({
    pool_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./avg_pool":"ljrt7","./batch_to_space_nd":"fvVrh","./conv_util":"oHP2H","./max_pool":"i0Rrj","./operation":"l6IGY","./reshape":"45nfd","./space_to_batch_nd":"h2QsM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2QsM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spaceToBatchND", ()=>spaceToBatchND);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ function spaceToBatchND_(x, blockShape, paddings) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "spaceToBatchND");
    _util.assert($x.rank >= 1 + blockShape.length, ()=>`input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
    _util.assert(paddings.length === blockShape.length, ()=>`paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
    _util.assert($x.shape.reduce((a, b, i)=>{
        if (i > 0 && i <= blockShape.length) return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;
        return a;
    }, true), ()=>`input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
    const inputs = {
        x: $x
    };
    const attrs = {
        blockShape,
        paddings
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SpaceToBatchND), inputs, attrs);
}
const spaceToBatchND = (0, _operation.op)({
    spaceToBatchND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eD7WT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prod", ()=>prod);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _cast = require("./cast");
var _operation = require("./operation");
/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */ function prod_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "prod");
    if ($x.dtype === "bool") // bool is not an allowed type for the underlying kernel.
    $x = (0, _cast.cast)($x, "int32");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis,
        keepDims
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Prod), inputs, attrs);
}
const prod = (0, _operation.op)({
    prod_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./cast":"a7v0X","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01W6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "raggedTensorToTensor", ()=>raggedTensorToTensor);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Create a dense tensor from a ragged tensor, possibly altering its shape.
 *
 * The raggedTensorToTensor op creates a dense tensor from am array of row
 * partition tensors, a value vector, and default values. If the shape is
 * unspecified, the minimal shape required to contain all the elements in the
 * ragged tensor (the natural shape) will be used. If some dimensions are left
 * unspecified, then the size of the natural shape is used in that dimension.
 *
 * The defaultValue will be broadcast to the output shape. After that, the
 * values from the ragged tensor overwrite the default values. Note that the
 * defaultValue must have less dimensions than the value.
 *
 * The row partition tensors are in the order of the dimensions. At present, the
 * types can be: "ROW_SPLITS": the row_splits tensor from the ragged tensor.
 *   "VALUE_ROWIDS": the value_rowids tensor from the ragged tensor.
 *   "FIRST_DIM_SIZE": if value_rowids is used for the first dimension, then it
 * is preceded by "FIRST_DIM_SIZE".
 * ```
 * @param shape: A Tensor. Must be one of the following types: 'int32'. The
 *     desired shape of the output tensor. If left unspecified (empty), the
 *     minimal shape required to contain all the elements in the ragged tensor
 *     (the natural shape) will be used. If some dimensions are left
 *     unspecified, then the size of the natural shape is used in that
 *     dimension.
 *
 *     Note that dense dimensions cannot be modified by the shape argument.
 *     Trying to change the size of a dense dimension will cause the op to fail.
 *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]
 *
 *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]
 *
 *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]
 * @param values: A Tensor. A 1D tensor representing the values of the ragged
 *     tensor.
 * @param defaultValue: A Tensor. Must have the same type as values. The
 *     defaultValue when the shape is larger than the ragged tensor. The
 *     defaultValue is broadcast until it is the shape of the output tensor,
 *     and then overwritten by values in the ragged tensor. The default value
 *     must be compatible with this broadcast operation, and must have fewer
 *     dimensions than the value tensor.
 * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same
 *     type in: 'int32'.
 * @param rowPartitionTypes: A list of strings. The types of the row partition
 *     tensors. At present, these can be:
 *     "ROW_SPLITS": the row_splits tensor from the ragged tensor.
 *     "VALUE_ROWIDS": the value_rowids tensor from the ragged tensor.
 *     "FIRST_DIM_SIZE": if value_rowids is used for the first dimension, then
 *         it is preceeded by "FIRST_DIM_SIZE". The tensors are in the order of
 *         the dimensions.
 * @return A Tensor. Has the same type as values.
 * @doc {heading: 'Operations', subheading: 'Ragged'}
 */ function raggedTensorToTensor_(shape, values, defaultValue, rowPartitionTensors, rowPartitionTypes) {
    const $shape = (0, _tensorUtilEnv.convertToTensor)(shape, "shape", "raggedTensorToTensor", "int32");
    const $values = (0, _tensorUtilEnv.convertToTensor)(values, "values", "raggedTensorToTensor");
    const $defaultValue = (0, _tensorUtilEnv.convertToTensor)(defaultValue, "defaultValue", "raggedTensorToTensor", $values.dtype);
    const $rowPartitionTensors = rowPartitionTensors.map((t, i)=>(0, _tensorUtilEnv.convertToTensor)(t, `tensors${i}`, "raggedTensorToTensor", "int32"));
    const inputs = {
        shape: $shape,
        values: $values,
        defaultValue: $defaultValue,
        rowPartitionTensors: $rowPartitionTensors
    };
    const attrs = {
        rowPartitionTypes
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.RaggedTensorToTensor), inputs, attrs);
}
const raggedTensorToTensor = (0, _operation.op)({
    raggedTensorToTensor_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"35P6K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rand", ()=>rand);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function rand_(shape, randFunction, dtype) {
    const size = (0, _util.sizeFromShape)(shape);
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    for(let i = 0; i < size; i++)values[i] = randFunction();
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}
const rand = (0, _operation.op)({
    rand_
});

},{"../engine":"1aEvR","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Ze5mN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomGamma", ()=>randomGamma);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _buffer = require("./buffer");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function randomGamma_(shape, alpha, beta = 1, dtype = "float32", seed) {
    if (beta == null) beta = 1;
    if (dtype == null) dtype = "float32";
    if (dtype !== "float32" && dtype !== "int32") throw new Error(`Unsupported data type ${dtype}`);
    const rgamma = new (0, _randUtil.RandGamma)(alpha, beta, dtype, seed);
    const res = (0, _buffer.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = rgamma.nextValue();
    return res.toTensor();
}
const randomGamma = (0, _operation.op)({
    randomGamma_
});

},{"./buffer":"e0wS6","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k5jhT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Marsaglia_polar_method
parcelHelpers.export(exports, "MPRandGauss", ()=>MPRandGauss);
// Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."
parcelHelpers.export(exports, "RandGamma", ()=>RandGamma);
parcelHelpers.export(exports, "UniformRandom", ()=>UniformRandom);
parcelHelpers.export(exports, "jarqueBeraNormalityTest", ()=>jarqueBeraNormalityTest);
parcelHelpers.export(exports, "expectArrayInMeanStdRange", ()=>expectArrayInMeanStdRange);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _seedrandom = require("seedrandom");
var _testUtil = require("../test_util");
class MPRandGauss {
    constructor(mean, stdDeviation, dtype, truncated, seed){
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        const seedValue = seed ? seed : Math.random();
        this.random = _seedrandom.alea(seedValue.toString());
    }
    /** Returns next sample from a Gaussian distribution. */ nextValue() {
        if (!isNaN(this.nextVal)) {
            const value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        let resultX, resultY;
        let isValid = false;
        while(!isValid){
            let v1, v2, s;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            }while (s >= 1 || s === 0);
            const mul = Math.sqrt(-2 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) isValid = true;
        }
        if (!this.truncated || this.isValidTruncated(resultY)) this.nextVal = this.convertValue(resultY);
        return this.convertValue(resultX);
    }
    /** Handles proper rounding for non-floating-point numbers. */ convertValue(value) {
        if (this.dtype == null || this.dtype === "float32") return value;
        return Math.round(value);
    }
    /** Returns true if less than 2-standard-deviations from the mean. */ isValidTruncated(value) {
        return value <= this.upper && value >= this.lower;
    }
}
class RandGamma {
    constructor(alpha, beta, dtype, seed){
        this.alpha = alpha;
        this.beta = 1 / beta; // convert rate to scale parameter
        this.dtype = dtype;
        const seedValue = seed ? seed : Math.random();
        this.randu = _seedrandom.alea(seedValue.toString());
        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
        if (alpha < 1) this.d = alpha + 2 / 3;
        else this.d = alpha - 1 / 3;
        this.c = 1 / Math.sqrt(9 * this.d);
    }
    /** Returns next sample from a gamma distribution. */ nextValue() {
        let x2, v0, v1, x, u, v;
        while(true){
            do {
                x = this.randn.nextValue();
                v = 1 + this.c * x;
            }while (v <= 0);
            v *= v * v;
            x2 = x * x;
            v0 = 1 - 0.331 * x2 * x2;
            v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));
            u = this.randu();
            if (u < v0 || Math.log(u) < v1) break;
        }
        v = 1 / this.beta * this.d * v;
        if (this.alpha < 1) v *= Math.pow(this.randu(), 1 / this.alpha);
        return this.convertValue(v);
    }
    /** Handles proper rounding for non-floating-point numbers. */ convertValue(value) {
        if (this.dtype === "float32") return value;
        return Math.round(value);
    }
}
class UniformRandom {
    constructor(min = 0, max = 1, dtype, seed){
        /** Handles proper rounding for non floating point numbers. */ this.canReturnFloat = ()=>this.dtype == null || this.dtype === "float32";
        this.min = min;
        this.range = max - min;
        this.dtype = dtype;
        if (seed == null) seed = Math.random();
        if (typeof seed === "number") seed = seed.toString();
        if (!this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
        this.random = _seedrandom.alea(seed);
    }
    convertValue(value) {
        if (this.canReturnFloat()) return value;
        return Math.round(value);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
function jarqueBeraNormalityTest(values) {
    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
    const n = values.length;
    const s = skewness(values);
    const k = kurtosis(values);
    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));
    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm
    const CHI_SQUARE_2DEG = 5.991;
    if (jb > CHI_SQUARE_2DEG) throw new Error(`Invalid p-value for JB: ${jb}`);
}
function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
    if (epsilon == null) epsilon = (0, _testUtil.testEpsilon)();
    const actualMean = mean(actual);
    (0, _testUtil.expectNumbersClose)(actualMean, expectedMean, epsilon);
    (0, _testUtil.expectNumbersClose)(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}
function mean(values) {
    let sum = 0;
    for(let i = 0; i < values.length; i++)sum += values[i];
    return sum / values.length;
}
function standardDeviation(values, mean) {
    let squareDiffSum = 0;
    for(let i = 0; i < values.length; i++){
        const diff = values[i] - mean;
        squareDiffSum += diff * diff;
    }
    return Math.sqrt(squareDiffSum / values.length);
}
function kurtosis(values) {
    // https://en.wikipedia.org/wiki/Kurtosis
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum4 = 0;
    for(let i = 0; i < n; i++){
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum4 += Math.pow(v, 4);
    }
    return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);
}
function skewness(values) {
    // https://en.wikipedia.org/wiki/Skewness
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum3 = 0;
    for(let i = 0; i < n; i++){
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum3 += Math.pow(v, 3);
    }
    return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 1.5);
}

},{"seedrandom":"kcfU7","../test_util":"9tuFM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcfU7":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.
// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require("./lib/alea");
// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require("./lib/xor128");
// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require("./lib/xorwow");
// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require("./lib/xorshift7");
// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require("./lib/xor4096");
// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require("./lib/tychei");
// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require("./seedrandom");
sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;
module.exports = sr;

},{"./lib/alea":"c47hP","./lib/xor128":"hy9Go","./lib/xorwow":"8ktBo","./lib/xorshift7":"i5aBa","./lib/xor4096":"7tXtZ","./lib/tychei":"eVmNr","./seedrandom":"lbeKh"}],"c47hP":[function(require,module,exports) {
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -
// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
(function(global, module1, define1) {
    function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
            var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
            me.s0 = me.s1;
            me.s1 = me.s2;
            return me.s2 = t - (me.c = t | 0);
        };
        // Apply the seeding algorithm from Baagoe.
        me.c = 1;
        me.s0 = mash(" ");
        me.s1 = mash(" ");
        me.s2 = mash(" ");
        me.s0 -= mash(seed);
        if (me.s0 < 0) me.s0 += 1;
        me.s1 -= mash(seed);
        if (me.s1 < 0) me.s1 += 1;
        me.s2 -= mash(seed);
        if (me.s2 < 0) me.s2 += 1;
        mash = null;
    }
    function copy(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
    }
    function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
            return xg.next() * 0x100000000 | 0;
        };
        prng.double = function() {
            return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
        };
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    function Mash() {
        var n = 0xefc8249d;
        var mash = function(data) {
            data = String(data);
            for(var i = 0; i < data.length; i++){
                n += data.charCodeAt(i);
                var h = 0.02519603282416938 * n;
                n = h >>> 0;
                h -= n;
                h *= n;
                n = h >>> 0;
                h -= n;
                n += h * 0x100000000; // 2^32
            }
            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
        };
        return mash;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.alea = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"hy9Go":[function(require,module,exports) {
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x << 11;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xor128 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"8ktBo":[function(require,module,exports) {
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x >>> 2;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            me.w = me.v;
            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            if (k == strseed.length) me.d = me.x << 10 ^ me.x >>> 4;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xorwow = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"i5aBa":[function(require,module,exports) {
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this;
        // Set up generator function.
        me.next = function() {
            // Update xor generator.
            var X = me.x, i = me.i, t, v, w;
            t = X[i];
            t ^= t >>> 7;
            v = t ^ t << 24;
            t = X[i + 1 & 7];
            v ^= t ^ t >>> 10;
            t = X[i + 3 & 7];
            v ^= t ^ t >>> 3;
            t = X[i + 4 & 7];
            v ^= t ^ t << 7;
            t = X[i + 7 & 7];
            t = t ^ t << 13;
            v ^= t ^ t << 9;
            X[i] = v;
            me.i = i + 1 & 7;
            return v;
        };
        function init(me, seed) {
            var j, w, X = [];
            if (seed === (seed | 0)) // Seed state array using a 32-bit integer.
            w = X[0] = seed;
            else {
                // Seed state using a string.
                seed = "" + seed;
                for(j = 0; j < seed.length; ++j)X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
            // Enforce an array length of 8, not all zeroes.
            while(X.length < 8)X.push(0);
            for(j = 0; j < 8 && X[j] === 0; ++j);
            if (j == 8) w = X[7] = -1;
            else w = X[j];
            me.x = X;
            me.i = 0;
            // Discard an initial 256 values.
            for(j = 256; j > 0; --j)me.next();
        }
        init(me, seed);
    }
    function copy(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.x) copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xorshift7 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"7tXtZ":[function(require,module,exports) {
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this;
        // Set up generator function.
        me.next = function() {
            var w = me.w, X = me.X, i = me.i, t, v;
            // Update Weyl generator.
            me.w = w = w + 0x61c88647 | 0;
            // Update xor generator.
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            // Update Xor generator array state.
            v = X[i] = v ^ t;
            me.i = i;
            // Result is the combination.
            return v + (w ^ w >>> 16) | 0;
        };
        function init(me, seed) {
            var t, v, i, j, w, X = [], limit = 128;
            if (seed === (seed | 0)) {
                // Numeric seeds initialize v, which is used to generates X.
                v = seed;
                seed = null;
            } else {
                // String seeds are mixed into v and X one character at a time.
                seed = seed + "\0";
                v = 0;
                limit = Math.max(limit, seed.length);
            }
            // Initialize circular array and weyl value.
            for(i = 0, j = -32; j < limit; ++j){
                // Put the unicode characters into the array, and shuffle them.
                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
                // After 32 shuffles, take v as the starting w value.
                if (j === 0) w = v;
                v ^= v << 10;
                v ^= v >>> 15;
                v ^= v << 4;
                v ^= v >>> 13;
                if (j >= 0) {
                    w = w + 0x61c88647 | 0; // Weyl.
                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.
                    i = 0 == t ? i + 1 : 0; // Count zeroes.
                }
            }
            // We have detected all zeroes; make the key nonzero.
            if (i >= 128) X[(seed && seed.length || 0) & 127] = -1;
            // Run the generator 512 times to further mix the state before using it.
            // Factoring this as a function slows the main generator, so it is just
            // unrolled here.  The weyl generator is not advanced while warming up.
            i = 127;
            for(j = 512; j > 0; --j){
                v = X[i + 34 & 127];
                t = X[i = i + 1 & 127];
                v ^= v << 13;
                t ^= t << 17;
                v ^= v >>> 15;
                t ^= t >>> 12;
                X[i] = v ^ t;
            }
            // Storing state as object members is faster than using closure variables.
            me.w = w;
            me.X = X;
            me.i = i;
        }
        init(me, seed);
    }
    function copy(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.X) copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xor4096 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"eVmNr":[function(require,module,exports) {
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        // Set up generator function.
        me.next = function() {
            var b = me.b, c = me.c, d = me.d, a = me.a;
            b = b << 25 ^ b >>> 7 ^ c;
            c = c - d | 0;
            d = d << 24 ^ d >>> 8 ^ a;
            a = a - b | 0;
            me.b = b = b << 20 ^ b >>> 12 ^ c;
            me.c = c = c - d | 0;
            me.d = d << 16 ^ c >>> 16 ^ a;
            return me.a = a - b | 0;
        };
        /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */ me.a = 0;
        me.b = 0;
        me.c = -1640531527;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
            // Integer seed.
            me.a = seed / 0x100000000 | 0;
            me.b = seed | 0;
        } else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 20; k++){
            me.b ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.tychei = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"lbeKh":[function(require,module,exports) {
/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/ (function(global, pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //
    var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.
    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed, options, callback) {
        var key = [];
        options = options == true ? {
            entropy: true
        } : options || {};
        // Flatten the seed string or build one from local entropy if needed.
        var shortseed = mixkey(flatten(options.entropy ? [
            seed,
            tostring(pool)
        ] : seed == null ? autoseed() : seed, 3), key);
        // Use the seed to initialize an ARC4 generator.
        var arc4 = new ARC4(key);
        // This function returns a random double in [0, 1) that contains
        // randomness in every bit of the mantissa of the IEEE 754 value.
        var prng = function() {
            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.
            while(n < significance){
                n = (n + x) * width; //   shifting numerator and
                d *= width; //   denominator and generating a
                x = arc4.g(1); //   new least-significant-byte.
            }
            while(n >= overflow){
                n /= 2; //   last byte, shift everything
                d /= 2; //   right using integer math until
                x >>>= 1; //   we have exactly the desired bits.
            }
            return (n + x) / d; // Form the number within [0, 1).
        };
        prng.int32 = function() {
            return arc4.g(4) | 0;
        };
        prng.quick = function() {
            return arc4.g(4) / 0x100000000;
        };
        prng.double = prng;
        // Mix the randomness into accumulated entropy.
        mixkey(tostring(arc4.S), pool);
        // Calling convention: what to return as a function of prng, seed, is_math.
        return (options.pass || callback || function(prng, seed, is_math_call, state) {
            if (state) {
                // Load the arc4 state from the given state if it has an S array.
                if (state.S) copy(state, arc4);
                // Only provide the .state method if requested via options.state.
                prng.state = function() {
                    return copy(arc4, {});
                };
            }
            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) {
                math[rngname] = prng;
                return seed;
            } else return prng;
        })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
    }
    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
        // The empty key [] is treated as [0].
        if (!keylen) key = [
            keylen++
        ];
        // Set up S using the standard key scheduling algorithm.
        while(i < width)s[i] = i++;
        for(i = 0; i < width; i++){
            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
            s[j] = t;
        }
        // The "g" method returns the next (count) outputs as one number.
        (me.g = function(count) {
            // Using instance members instead of closure state nearly doubles speed.
            var t, r = 0, i = me.i, j = me.j, s = me.S;
            while(count--){
                t = s[i = mask & i + 1];
                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
            }
            me.i = i;
            me.j = j;
            return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
        })(width);
    }
    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
            for(prop in obj)try {
                result.push(flatten(obj[prop], depth - 1));
            } catch (e) {}
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
    }
    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
        var stringseed = seed + "", smear, j = 0;
        while(j < stringseed.length)key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        return tostring(key);
    }
    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
        try {
            var out;
            if (nodecrypto && (out = nodecrypto.randomBytes)) // The use of 'out' to remember randomBytes makes tight minified code.
            out = out(width);
            else {
                out = new Uint8Array(width);
                (global.crypto || global.msCrypto).getRandomValues(out);
            }
            return tostring(out);
        } catch (e) {
            var browser = global.navigator, plugins = browser && browser.plugins;
            return [
                +new Date,
                global,
                plugins,
                global.screen,
                tostring(pool)
            ];
        }
    }
    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
        return String.fromCharCode.apply(0, a);
    }
    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);
    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (module.exports) {
        module.exports = seedrandom;
        // When in node.js, try using crypto package for autoseeding.
        try {
            nodecrypto = require("crypto");
        } catch (ex) {}
    } else if (typeof define == "function" && define.amd) define(function() {
        return seedrandom;
    });
    else // When included as a plain script, set up Math.seedrandom global.
    math["seed" + rngname] = seedrandom;
// End anonymous scope, and pass initial values.
})(// global: `self` in browsers (including strict mode and web workers),
// otherwise `this` in Node and other environments
typeof self !== "undefined" ? self : this, [], Math // math: package containing random, pow, and seedrandom
);

},{"crypto":"jhUEF"}],"ilcdV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomNormal", ()=>randomNormal);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _buffer = require("./buffer");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === "bool") throw new Error(`Unsupported data type ${dtype}`);
    const randGauss = new (0, _randUtil.MPRandGauss)(mean, stdDev, dtype, false, seed);
    const res = (0, _buffer.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = randGauss.nextValue();
    return res.toTensor();
}
const randomNormal = (0, _operation.op)({
    randomNormal_
});

},{"./buffer":"e0wS6","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7paic":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomStandardNormal", ()=>randomStandardNormal);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _operation = require("./operation");
var _randomNormal = require("./random_normal");
/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * The generated values will have mean 0 and standard deviation 1.
 *
 * ```js
 * tf.randomStandardNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function randomStandardNormal_(shape, dtype, seed) {
    if (dtype != null && dtype === "bool") throw new Error(`Unsupported data type ${dtype}`);
    return (0, _randomNormal.randomNormal)(shape, 0, 1, dtype, seed);
}
const randomStandardNormal = (0, _operation.op)({
    randomStandardNormal_
});

},{"./operation":"l6IGY","./random_normal":"ilcdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24OwU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomUniform", ()=>randomUniform);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _buffer = require("./buffer");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */ function randomUniform_(shape, minval = 0, maxval = 1, dtype = "float32", seed) {
    const res = (0, _buffer.buffer)(shape, dtype);
    const random = new (0, _randUtil.UniformRandom)(minval, maxval, null, seed);
    for(let i = 0; i < res.values.length; i++)res.values[i] = random.nextValue();
    return res.toTensor();
}
const randomUniform = (0, _operation.op)({
    randomUniform_
});

},{"./buffer":"e0wS6","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"UdMo5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reciprocal", ()=>reciprocal);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function reciprocal_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reciprocal");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Reciprocal), inputs);
}
const reciprocal = (0, _operation.op)({
    reciprocal_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftjvT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse1d", ()=>reverse1d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reverse = require("./reverse");
/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */ function reverse1d_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 1, ()=>`Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
    return (0, _reverse.reverse)($x, 0);
}
const reverse1d = (0, _operation.op)({
    reverse1d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reverse":"j7SBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2dak6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse2d", ()=>reverse2d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reverse = require("./reverse");
/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse2d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 2, ()=>`Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
    return (0, _reverse.reverse)($x, axis);
}
const reverse2d = (0, _operation.op)({
    reverse2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reverse":"j7SBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Zn90":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse3d", ()=>reverse3d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reverse = require("./reverse");
/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse3d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 3, ()=>`Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
    return (0, _reverse.reverse)($x, axis);
}
const reverse3d = (0, _operation.op)({
    reverse3d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reverse":"j7SBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"335y6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse4d", ()=>reverse4d);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _reverse = require("./reverse");
/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse4d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 4, ()=>`Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
    return (0, _reverse.reverse)($x, axis);
}
const reverse4d = (0, _operation.op)({
    reverse4d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./reverse":"j7SBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8BuqG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rsqrt", ()=>rsqrt);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function rsqrt_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "rsqrt", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Rsqrt), inputs);
}
const rsqrt = (0, _operation.op)({
    rsqrt_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MGVt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selu", ()=>selu);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function selu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "selu");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Selu), inputs);
}
const selu = (0, _operation.op)({
    selu_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NvRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "separableConv2d", ()=>separableConv2d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _conv2D = require("./conv2d");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _operation = require("./operation");
var _reshape = require("./reshape");
/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */ function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [
    1,
    1
], dataFormat = "NHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "separableConv2d");
    const $depthwiseFilter = (0, _tensorUtilEnv.convertToTensor)(depthwiseFilter, "depthwiseFilter", "separableConv2d");
    const $pointwiseFilter = (0, _tensorUtilEnv.convertToTensor)(pointwiseFilter, "pointwiseFilter", "separableConv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _reshape.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    if (dataFormat === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
    _util.assert(x4D.rank === 4, ()=>`Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($depthwiseFilter.rank === 4, ()=>`Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
    _util.assert($pointwiseFilter.rank === 4, ()=>`Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
    _util.assert($pointwiseFilter.shape[0] === 1, ()=>`Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
    _util.assert($pointwiseFilter.shape[1] === 1, ()=>`Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
    const inChannels = $depthwiseFilter.shape[2];
    const channelMultiplier = $depthwiseFilter.shape[3];
    _util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, ()=>`Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);
    const depthwise = (0, _depthwiseConv2D.depthwiseConv2d)(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
    const pointwiseStride = 1;
    const res = (0, _conv2D.conv2d)(depthwise, $pointwiseFilter, pointwiseStride, "valid", dataFormat);
    if (reshapedTo4D) return (0, _reshape.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const separableConv2d = (0, _operation.op)({
    separableConv2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv2d":"94uN6","./depthwise_conv2d":"kqwkG","./operation":"l6IGY","./reshape":"45nfd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5kqj6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setdiff1dAsync", ()=>setdiff1dAsync);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */ async function setdiff1dAsync_(x, y) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "setdiff1d");
    const $y = (0, _tensorUtilEnv.convertToTensor)(y, "y", "setdiff1d");
    _util.assert($x.dtype === $y.dtype, ()=>`x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
    _util.assert($x.rank === 1, ()=>`x should be 1D tensor, but got x (${$x.shape}).`);
    _util.assert($y.rank === 1, ()=>`y should be 1D tensor, but got y (${$y.shape}).`);
    const xVals = await $x.data();
    const yVals = await $y.data();
    const ySet = new Set(yVals);
    let outputSize = 0;
    for(let i = 0; i < xVals.length; i++)if (!ySet.has(xVals[i])) outputSize++;
    const buffer = new (0, _tensor.TensorBuffer)([
        outputSize
    ], $x.dtype);
    const indices = new (0, _tensor.TensorBuffer)([
        outputSize
    ], "int32");
    for(let i1 = 0, p = 0; i1 < xVals.length; i1++)if (!ySet.has(xVals[i1])) {
        buffer.values[p] = xVals[i1];
        indices.values[p] = i1;
        p++;
    }
    return [
        buffer.toTensor(),
        indices.toTensor()
    ];
}
const setdiff1dAsync = setdiff1dAsync_;

},{"../tensor":"DPGBx","../tensor_util_env":"fsyzK","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h3t4j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sign", ()=>sign);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function sign_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sign");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sign), inputs);
}
const sign = (0, _operation.op)({
    sign_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"shyaU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sin", ()=>sin);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function sin_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sin", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sin), inputs);
}
const sin = (0, _operation.op)({
    sin_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50NCL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinh", ()=>sinh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function sinh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sinh");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Sinh), inputs);
}
const sinh = (0, _operation.op)({
    sinh_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ex5pZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice1d", ()=>slice1d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _slice = require("./slice");
/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */ function slice1d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice1d");
    _util.assert($x.rank === 1, ()=>`slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
    return (0, _slice.slice)($x, [
        begin
    ], [
        size
    ]);
}
const slice1d = (0, _operation.op)({
    slice1d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./slice":"ist4s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50EPC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice2d", ()=>slice2d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _slice = require("./slice");
/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice2d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice2d");
    _util.assert($x.rank === 2, ()=>`slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
    return (0, _slice.slice)($x, begin, size);
}
const slice2d = (0, _operation.op)({
    slice2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./slice":"ist4s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"u6rI5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice3d", ()=>slice3d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _slice = require("./slice");
/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice3d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice3d");
    _util.assert($x.rank === 3, ()=>`slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
    return (0, _slice.slice)($x, begin, size);
}
const slice3d = (0, _operation.op)({
    slice3d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./slice":"ist4s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18PEc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice4d", ()=>slice4d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _slice = require("./slice");
/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice4d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice4d");
    _util.assert($x.rank === 4, ()=>`slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
    return (0, _slice.slice)($x, begin, size);
}
const slice4d = (0, _operation.op)({
    slice4d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./slice":"ist4s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lB9jN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softmax", ()=>softmax);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function softmax_(logits, dim = -1) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "softmax", "float32");
    if (dim === -1) dim = $logits.rank - 1;
    if (dim !== $logits.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. " + `Logits was rank ${$logits.rank} and dim was ${dim}`);
    const inputs = {
        logits: $logits
    };
    const attrs = {
        dim
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Softmax), inputs, attrs);
}
const softmax = (0, _operation.op)({
    softmax_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ngVB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stridedSlice", ()=>stridedSlice);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */ function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "stridedSlice", "string_or_numeric");
    const inputs = {
        x: $x
    };
    const attrs = {
        begin,
        end,
        strides,
        beginMask,
        endMask,
        ellipsisMask,
        newAxisMask,
        shrinkAxisMask
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.StridedSlice), inputs, attrs);
}
const stridedSlice = (0, _operation.op)({
    stridedSlice_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUiCG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tan", ()=>tan);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */ function tan_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tan", "float32");
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.Tan), inputs);
}
const tan = (0, _operation.op)({
    tan_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vQLF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor4d", ()=>tensor4d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor4d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 4) throw new Error("tensor4d() requires shape to have four numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 4 && inferredShape.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"nQwcC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor5d", ()=>tensor5d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor5d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 5) throw new Error("tensor5d() requires shape to have five numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 5 && inferredShape.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WRPd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "tensor6d", ()=>tensor6d);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOpsUtil = require("./tensor_ops_util");
function tensor6d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 6) throw new Error("tensor6d() requires shape to have six numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 6 && inferredShape.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
    shape = shape || inferredShape;
    return (0, _tensorOpsUtil.makeTensor)(values, shape, inferredShape, dtype);
}

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops_util":"VO6YN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lELoV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topk", ()=>topk);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ function topk_(x, k = 1, sorted = true) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "topk");
    if ($x.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher");
    const lastDim = $x.shape[$x.shape.length - 1];
    if (k < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);
    if (k > lastDim) throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);
    const inputs = {
        x: $x
    };
    const attrs = {
        k,
        sorted
    };
    const [values, indices] = (0, _engine.ENGINE).runKernel((0, _kernelNames.TopK), inputs, attrs);
    return {
        values,
        indices
    };
}
const topk = (0, _operation.op)({
    topk_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioTIz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "truncatedNormal", ()=>truncatedNormal);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _buffer = require("./buffer");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === "bool") throw new Error(`Unsupported data type $ { dtype }`);
    const randGauss = new (0, _randUtil.MPRandGauss)(mean, stdDev, dtype, true, seed);
    const res = (0, _buffer.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = randGauss.nextValue();
    return res.toTensor();
}
const truncatedNormal = (0, _operation.op)({
    truncatedNormal_
});

},{"./buffer":"e0wS6","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGqVD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unique", ()=>unique);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Finds unique elements along an axis of a tensor.
 *
 * It returns a tensor `values` containing all of the unique elements along the
 * `axis` of the given tensor `x` in the same order that they occur along the
 * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
 * `indices` the same size as the number of the elements in `x` along the `axis`
 * dimension. It contains the index in the unique output `values`.
 *
 * ```js
 * // A 1-D tensor
 * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
 * const {values, indices} = tf.unique(a);
 * values.print();   // [1, 2, 4, 7, 8,]
 * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=0
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 0)
 * values.print();   // [[1, 0, 0],
 *                   //  [2, 0, 0]]
 * indices.print();  // [0, 0, 1]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=1
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 1)
 * values.print();   // [[1, 0],
 *                   //  [1, 0],
 *                   //  [2, 0]]
 * indices.print();  // [0, 1, 1]
 * ```
 * @param x A tensor (int32, string, bool).
 * @param axis The axis of the tensor to find the unique elements.
 * @returns [uniqueElements, indices] (see above for details)
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ function unique_(x, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "unique", "string_or_numeric");
    (0, _util.assert)($x.rank > 0, ()=>"The input tensor must be at least 1D");
    const inputs = {
        x: $x
    };
    const attrs = {
        axis
    };
    const [values, indices] = (0, _engine.ENGINE).runKernel((0, _kernelNames.Unique), inputs, attrs);
    return {
        values,
        indices
    };
}
const unique = (0, _operation.op)({
    unique_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9iL2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unsortedSegmentSum", ()=>unsortedSegmentSum);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */ function unsortedSegmentSum_(x, segmentIds, numSegments) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "unsortedSegmentSum");
    const $segmentIds = (0, _tensorUtilEnv.convertToTensor)(segmentIds, "segmentIds", "unsortedSegmentSum", "int32");
    (0, _util.assert)((0, _util.isInt)(numSegments), ()=>"numSegments must be of dtype int");
    const inputs = {
        x: $x,
        segmentIds: $segmentIds
    };
    const attrs = {
        numSegments
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.UnsortedSegmentSum), inputs, attrs);
}
const unsortedSegmentSum = (0, _operation.op)({
    unsortedSegmentSum_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VUvK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The index returned corresponds to the first edge greater than the value.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'upperBound' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * const values = tf.tensor1d([0, 4, 10]);
 * const result = tf.upperBound(seq, values);
 * result.print(); // [1, 2, 5]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying upper bound to each value. The result is not a global index to
 *     the entire Tensor, but the index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ parcelHelpers.export(exports, "upperBound", ()=>upperBound);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _searchSorted = require("./search_sorted");
function upperBound(sortedSequence, values) {
    return (0, _searchSorted.searchSorted)(sortedSequence, values, "right");
}

},{"./search_sorted":"fTzhX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Z5i1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "variable", ()=>variable);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
function variable(initialValue, trainable = true, name, dtype) {
    return (0, _engine.ENGINE).makeVariable(initialValue, trainable, name, dtype);
}

},{"../engine":"1aEvR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFKuj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "whereAsync", ()=>whereAsync);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _whereImpl = require("../backends/where_impl");
var _tensorUtilEnv = require("../tensor_util_env");
/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */ async function whereAsync_(condition) {
    const $condition = (0, _tensorUtilEnv.convertToTensor)(condition, "condition", "whereAsync", "bool");
    const vals = await $condition.data();
    const res = (0, _whereImpl.whereImpl)($condition.shape, vals);
    if (condition !== $condition) $condition.dispose();
    return res;
}
const whereAsync = whereAsync_;

},{"../backends/where_impl":"gWXHH","../tensor_util_env":"fsyzK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7kjVm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanMaskAsync", ()=>booleanMaskAsync);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _gather = require("./gather");
var _reshape = require("./reshape");
var _squeeze = require("./squeeze");
var _whereAsync = require("./where_async");
/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */ async function booleanMaskAsync_(tensor, mask, axis) {
    const $tensor = (0, _tensorUtilEnv.convertToTensor)(tensor, "tensor", "boolMask");
    const $mask = (0, _tensorUtilEnv.convertToTensor)(mask, "mask", "boolMask", "bool");
    const axisFrom = axis == null ? 0 : axis;
    const maskDim = $mask.rank;
    const tensorShape = $tensor.shape;
    _util.assert(maskDim > 0, ()=>"mask cannot be scalar");
    _util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
    let leadingSize = 1;
    for(let i = axisFrom; i < axisFrom + maskDim; i++)leadingSize *= tensorShape[i];
    const targetTensorShape = tensorShape.slice(0, axisFrom).concat([
        leadingSize
    ], tensorShape.slice(axisFrom + maskDim));
    const reshapedTensor = (0, _reshape.reshape)($tensor, targetTensorShape);
    const reshapedMask = (0, _reshape.reshape)($mask, [
        -1
    ]);
    const positivePositions = await (0, _whereAsync.whereAsync)(reshapedMask);
    const indices = (0, _squeeze.squeeze)(positivePositions, [
        1
    ]);
    const res = (0, _gather.gather)(reshapedTensor, indices, axisFrom);
    // Ensure no memory leak.
    if (tensor !== $tensor) $tensor.dispose();
    if (mask !== $mask) $mask.dispose();
    indices.dispose();
    reshapedTensor.dispose();
    reshapedMask.dispose();
    positivePositions.dispose();
    return res;
}
const booleanMaskAsync = booleanMaskAsync_;

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./gather":"lFXWL","./reshape":"45nfd","./squeeze":"bqHGH","./where_async":"lFKuj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5NSiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "movingAverage", ()=>movingAverage);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _add = require("./add");
var _div = require("./div");
var _mul = require("./mul");
var _operation = require("./operation");
var _pow = require("./pow");
var _scalar = require("./scalar");
var _sub = require("./sub");
/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */ function movingAverage_(v, x, decay, step, zeroDebias = true) {
    const $v = (0, _tensorUtilEnv.convertToTensor)(v, "v", "movingAverage");
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "movingAverage");
    const $decay = (0, _tensorUtilEnv.convertToTensor)(decay, "decay", "movingAverage");
    (0, _tensorUtil.assertTypesMatch)($v, $x);
    _util.assert(_util.arraysEqual($v.shape, $x.shape), ()=>"Shape mismatch in v and x");
    const one = (0, _scalar.scalar)(1);
    const oneMinusDecay = (0, _sub.sub)(one, $decay);
    let update = (0, _mul.mul)((0, _sub.sub)($x, $v), oneMinusDecay);
    if (zeroDebias) {
        _util.assert(step != null, ()=>"When using zeroDebias: true, step is required.");
        const $step = (0, _tensorUtilEnv.convertToTensor)(step, "step", "movingAverage");
        update = (0, _div.div)(update, (0, _sub.sub)(one, (0, _pow.pow)($decay, $step)));
    }
    return (0, _add.add)($v, update);
}
const movingAverage = (0, _operation.op)({
    movingAverage_
});

},{"../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","../util":"9v6Fb","./add":"i4ulI","./div":"3bNgZ","./mul":"8s4p1","./operation":"l6IGY","./pow":"9jbjX","./scalar":"jMh5J","./sub":"mafuF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfFmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatterND", ()=>scatterND);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
var _scatterNdUtil = require("./scatter_nd_util");
/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */ function scatterND_(indices, updates, shape) {
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "scatterND", "int32");
    const $updates = (0, _tensorUtilEnv.convertToTensor)(updates, "updates", "scatterND");
    _scatterNdUtil.validateInput($updates, $indices, shape);
    const inputs = {
        indices: $indices,
        updates: $updates
    };
    const attrs = {
        shape
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.ScatterNd), inputs, attrs);
}
const scatterND = (0, _operation.op)({
    scatterND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","./scatter_nd_util":"h9rnV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPJFe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseToDense", ()=>sparseToDense);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _sparseToDenseUtil = require("../ops/sparse_to_dense_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */ function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
    const $sparseIndices = (0, _tensorUtilEnv.convertToTensor)(sparseIndices, "sparseIndices", "sparseToDense", "int32");
    const $sparseValues = (0, _tensorUtilEnv.convertToTensor)(sparseValues, "sparseValues", "sparseToDense", "string_or_numeric");
    const $defaultValue = (0, _tensorUtilEnv.convertToTensor)(defaultValue, "defaultValue", "sparseToDense", $sparseValues.dtype);
    _sparseToDenseUtil.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
    const inputs = {
        sparseIndices: $sparseIndices,
        sparseValues: $sparseValues,
        defaultValue: $defaultValue
    };
    const attrs = {
        outputShape
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.SparseToDense), inputs, attrs);
}
const sparseToDense = (0, _operation.op)({
    sparseToDense_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../ops/sparse_to_dense_util":"bANPZ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bANPZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */ parcelHelpers.export(exports, "validateInput", ()=>validateInput);
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
    if (sparseIndices.dtype !== "int32") throw new Error("tf.sparseToDense() expects the indices to be int32 type," + ` but the dtype was ${sparseIndices.dtype}.`);
    if (sparseIndices.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix," + ` but got shape ${sparseIndices.shape}.`);
    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
    if (outputShape.length !== numDims) throw new Error("outputShape has incorrect number of elements:," + ` ${outputShape.length}, should be: ${numDims}.`);
    const numValues = sparseValues.size;
    if (!(sparseValues.rank === 0 || sparseValues.rank === 1 && numValues === numElems)) throw new Error("sparseValues has incorrect shape " + `${sparseValues.shape}, should be [] or [${numElems}]`);
    if (sparseValues.dtype !== defaultValues.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8605G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherND", ()=>gatherND);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */ function gatherND_(x, indices) {
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "gatherND", "int32");
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "gatherND", "string_or_numeric");
    const inputs = {
        params: $x,
        indices: $indices
    };
    return (0, _engine.ENGINE).runKernel((0, _kernelNames.GatherNd), inputs);
}
const gatherND = (0, _operation.op)({
    gatherND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRq6V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dropout", ()=>dropout);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _add = require("./add");
var _div = require("./div");
var _dropoutUtil = require("./dropout_util");
var _floor = require("./floor");
var _mul = require("./mul");
var _operation = require("./operation");
var _randomUniform = require("./random_uniform");
/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */ function dropout_(x, rate, noiseShape, seed) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "dropout");
    _util.assert($x.dtype === "float32", ()=>`x has to be a floating point tensor since it's going to be ` + `scaled, but got a ${$x.dtype} tensor instead.`);
    _util.assert(rate >= 0 && rate < 1, ()=>`rate must be a float in the range [0, 1), but got ${rate}.`);
    if (rate === 0) return x instanceof (0, _tensor.Tensor) ? $x.clone() : $x;
    const $noiseShape = (0, _dropoutUtil.getNoiseShape)($x, noiseShape);
    const keepProb = 1 - rate;
    const multiplier = (0, _div.div)((0, _floor.floor)((0, _add.add)((0, _randomUniform.randomUniform)($noiseShape, 0, 1, "float32", seed), keepProb)), keepProb);
    return (0, _mul.mul)($x, multiplier);
}
const dropout = (0, _operation.op)({
    dropout_
});

},{"../tensor":"DPGBx","../tensor_util_env":"fsyzK","../util":"9v6Fb","./add":"i4ulI","./div":"3bNgZ","./dropout_util":"4f0M1","./floor":"k53Wo","./mul":"8s4p1","./operation":"l6IGY","./random_uniform":"24OwU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4f0M1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */ parcelHelpers.export(exports, "getNoiseShape", ()=>getNoiseShape);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function getNoiseShape(x, noiseShape) {
    if (noiseShape == null) return x.shape.slice();
    if (_util.arraysEqual(x.shape, noiseShape)) return noiseShape;
    if (x.shape.length === noiseShape.length) {
        const newDimension = [];
        for(let i = 0; i < x.shape.length; i++)if (noiseShape[i] == null && x.shape[i] != null) newDimension.push(x.shape[i]);
        else newDimension.push(noiseShape[i]);
        return newDimension;
    }
    return noiseShape;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQQbM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inTopKAsync", ()=>inTopKAsync);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensor = require("./tensor");
/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */ async function inTopKAsync_(predictions, targets, k = 1) {
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "inTopK");
    const $targets = (0, _tensorUtilEnv.convertToTensor)(targets, "targets", "inTopK");
    (0, _util.assert)($predictions.rank > 1, ()=>"inTopK() expects the predictions to be of rank 2 or higher, " + `but got ${$predictions.rank}`);
    (0, _util.assert)($predictions.rank - 1 === $targets.rank, ()=>`predictions rank should be 1 larger than ` + `targets rank, but got predictions rank ` + `${$predictions.rank} and targets rank ${$targets.rank}`);
    (0, _util.assertShapesMatch)($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` + "except the last dimension.");
    const lastDim = $predictions.shape[$predictions.shape.length - 1];
    (0, _util.assert)(k > 0 && k <= lastDim, ()=>`'k' passed to inTopK() must be > 0 && <= the predictions last ` + `dimension (${lastDim}), but got ${k}`);
    const predictionsVals = await $predictions.data();
    const targetsVals = await $targets.data();
    // Reshape predictionsVals into a 2d tensor [batch, lastDim]
    // and look up topK along lastDim.
    const [batch, size] = [
        predictionsVals.length / lastDim,
        lastDim
    ];
    const precision = (0, _util.getTypedArrayFromDType)("bool", batch);
    for(let b = 0; b < batch; b++){
        const offset = b * size;
        const vals = predictionsVals.subarray(offset, offset + size);
        const valAndInd = [];
        for(let i = 0; i < vals.length; i++)valAndInd.push({
            value: vals[i],
            index: i
        });
        valAndInd.sort((a, b)=>b.value - a.value);
        precision[b] = 0;
        for(let i1 = 0; i1 < k; i1++)if (valAndInd[i1].index === targetsVals[b]) {
            precision[b] = 1;
            break;
        }
    }
    if (predictions !== $predictions) $predictions.dispose();
    if (targets !== $targets) $targets.dispose();
    // Output precision has the same shape as targets.
    return (0, _tensor.tensor)(precision, $targets.shape, "bool");
}
const inTopKAsync = inTopKAsync_;

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor":"eIzFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFpqK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */ parcelHelpers.export(exports, "Optimizer", ()=>Optimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _globals = require("../globals");
var _gradients = require("../gradients");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
class Optimizer extends (0, _serialization.Serializable) {
    /**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */ minimize(f, returnCost = false, varList) {
        const { value , grads  } = this.computeGradients(f, varList);
        if (varList != null) {
            const gradArray = varList.map((v)=>({
                    name: v.name,
                    tensor: grads[v.name]
                }));
            this.applyGradients(gradArray);
        } else this.applyGradients(grads);
        // Dispose gradients.
        (0, _globals.dispose)(grads);
        if (returnCost) return value;
        else {
            value.dispose();
            return null;
        }
    }
    /**
     * The number of iterations that this optimizer instance has been invoked for.
     */ get iterations() {
        if (this.iterations_ == null) this.iterations_ = 0;
        return this.iterations_;
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    /**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */ computeGradients(f, varList) {
        return (0, _gradients.variableGrads)(f, varList);
    }
    /**
     * Dispose the variables (if any) owned by this optimizer instance.
     */ dispose() {
        if (this.iterations_ != null) (0, _globals.dispose)(this.iterations_);
    }
    async saveIterations() {
        if (this.iterations_ == null) this.iterations_ = 0;
        return {
            name: "iter",
            // TODO(cais): Use 'int64' type when available.
            tensor: (0, _ops.scalar)(this.iterations_, "int32")
        };
    }
    async getWeights() {
        throw new Error("getWeights() is not implemented for this optimizer yet.");
    }
    async setWeights(weightValues) {
        throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);
    }
    /**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */ async extractIterations(weightValues) {
        this.iterations_ = (await weightValues[0].tensor.data())[0];
        return weightValues.slice(1);
    }
}
Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: (instance)=>{
        return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;
    }
});

},{"../globals":"gfrr7","../gradients":"4PSmY","../ops/ops":"iDElj","../serialization":"wKqJz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1K352":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "AdagradOptimizer", ()=>AdagradOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _div = require("../ops/div");
var _fill = require("../ops/fill");
var _mul = require("../ops/mul");
var _sqrt = require("../ops/sqrt");
var _square = require("../ops/square");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdagradOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, initialAccumulatorValue = 0.1){
        super();
        this.learningRate = learningRate;
        this.initialAccumulatorValue = initialAccumulatorValue;
        this.accumulatedGrads = [];
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            if (this.accumulatedGrads[i] == null) {
                const trainable = false;
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accumulator`,
                    variable: (0, _globals.tidy)(()=>(0, _fill.fill)(value.shape, this.initialAccumulatorValue).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedGrad = (0, _add.add)(accumulatedGrad, (0, _square.square)(gradient));
                accumulatedGrad.assign(newAccumulatedGrad);
                const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(gradient, (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedGrad, (0, _engine.ENGINE).backend.epsilon()))), -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedGrads != null) (0, _globals.dispose)(this.accumulatedGrads.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [
            await this.saveIterations()
        ].concat(this.accumulatedGrads.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulatedGrads = weightValues.map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "initialAccumulatorValue": this.initialAccumulatorValue
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["initialAccumulatorValue"]);
    }
}
/** @nocollapse */ AdagradOptimizer.className = "Adagrad"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(AdagradOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/div":"3bNgZ","../ops/fill":"dRjVH","../ops/mul":"8s4p1","../ops/sqrt":"aMJIO","../ops/square":"52Axi","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKjPX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdamOptimizer", ()=>AdamOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _div = require("../ops/div");
var _mul = require("../ops/mul");
var _pow = require("../ops/pow");
var _scalar = require("../ops/scalar");
var _sqrt = require("../ops/sqrt");
var _square = require("../ops/square");
var _sub = require("../ops/sub");
var _zerosLike = require("../ops/zeros_like");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdamOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, beta1, beta2, epsilon = null){
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.accumulatedFirstMoment = [];
        this.accumulatedSecondMoment = [];
        (0, _globals.tidy)(()=>{
            // accB* will be updated by batch.
            this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
            this.accBeta2 = (0, _scalar.scalar)(beta2).variable();
        });
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ? variableGradients.map((v)=>v.name) : Object.keys(variableGradients);
        (0, _globals.tidy)(()=>{
            const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
            const oneMinusAccBeta2 = (0, _sub.sub)(1, this.accBeta2);
            varNames.forEach((name, i)=>{
                const value = (0, _engine.ENGINE).registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) this.accumulatedFirstMoment[i] = {
                    originalName: `${name}/m`,
                    variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
                };
                if (this.accumulatedSecondMoment[i] == null) this.accumulatedSecondMoment[i] = {
                    originalName: `${name}/v`,
                    variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
                };
                const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
                if (gradient == null) return;
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const secondMoment = this.accumulatedSecondMoment[i].variable;
                const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
                const newSecondMoment = (0, _add.add)((0, _mul.mul)(secondMoment, this.beta2), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.beta2));
                const biasCorrectedFirstMoment = (0, _div.div)(newFirstMoment, oneMinusAccBeta1);
                const biasCorrectedSecondMoment = (0, _div.div)(newSecondMoment, oneMinusAccBeta2);
                firstMoment.assign(newFirstMoment);
                secondMoment.assign(newSecondMoment);
                const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(biasCorrectedFirstMoment, (0, _add.add)((0, _sqrt.sqrt)(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
                value.assign(newValue);
            });
            this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
            this.accBeta2.assign((0, _mul.mul)(this.accBeta2, this.beta2));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        if (this.accumulatedFirstMoment != null) (0, _globals.dispose)(this.accumulatedFirstMoment.map((v)=>v.variable));
        if (this.accumulatedSecondMoment != null) (0, _globals.dispose)(this.accumulatedSecondMoment.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedFirstMoment,
            ...this.accumulatedSecondMoment
        ];
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        (0, _globals.tidy)(()=>{
            this.accBeta1.assign((0, _pow.pow)(this.beta1, this.iterations_ + 1));
            this.accBeta2.assign((0, _pow.pow)(this.beta2, this.iterations_ + 1));
        });
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "beta1": this.beta1,
            "beta2": this.beta2,
            "epsilon": this.epsilon
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["beta1"], config["beta2"], config["epsilon"]);
    }
}
/** @nocollapse */ AdamOptimizer.className = "Adam"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(AdamOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/div":"3bNgZ","../ops/mul":"8s4p1","../ops/pow":"9jbjX","../ops/scalar":"jMh5J","../ops/sqrt":"aMJIO","../ops/square":"52Axi","../ops/sub":"mafuF","../ops/zeros_like":"dwK1F","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9QP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdamaxOptimizer", ()=>AdamaxOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _abs = require("../ops/abs");
var _add = require("../ops/add");
var _div = require("../ops/div");
var _maximum = require("../ops/maximum");
var _mul = require("../ops/mul");
var _scalar = require("../ops/scalar");
var _sub = require("../ops/sub");
var _zerosLike = require("../ops/zeros_like");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdamaxOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0){
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.decay = decay;
        this.accumulatedFirstMoment = [];
        this.accumulatedWeightedInfNorm = [];
        (0, _globals.tidy)(()=>{
            this.iteration = (0, _scalar.scalar)(0).variable();
            this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
        });
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        (0, _globals.tidy)(()=>{
            const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
            const lr = (0, _div.div)(-this.learningRate, (0, _add.add)((0, _mul.mul)(this.iteration, this.decay), 1));
            variableNames.forEach((name, i)=>{
                const value = (0, _engine.ENGINE).registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) this.accumulatedFirstMoment[i] = {
                    originalName: `${name}/m`,
                    variable: (0, _zerosLike.zerosLike)(value).variable(trainable)
                };
                if (this.accumulatedWeightedInfNorm[i] == null) this.accumulatedWeightedInfNorm[i] = {
                    originalName: `${name}/v`,
                    variable: (0, _zerosLike.zerosLike)(value).variable(trainable)
                };
                const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
                if (gradient == null) return;
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
                const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
                const ut0 = (0, _mul.mul)(weightedInfNorm, this.beta2);
                const ut1 = (0, _abs.abs)(gradient);
                const newWeightedInfNorm = (0, _maximum.maximum)(ut0, ut1);
                firstMoment.assign(newFirstMoment);
                weightedInfNorm.assign(newWeightedInfNorm);
                const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(lr, oneMinusAccBeta1), (0, _div.div)(newFirstMoment, (0, _add.add)(newWeightedInfNorm, this.epsilon))), value);
                value.assign(newValue);
            });
            this.iteration.assign((0, _add.add)(this.iteration, 1));
            this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.iteration.dispose();
        if (this.accumulatedFirstMoment != null) (0, _globals.dispose)(this.accumulatedFirstMoment.map((v)=>v.variable));
        if (this.accumulatedWeightedInfNorm != null) (0, _globals.dispose)(this.accumulatedWeightedInfNorm.map((v)=>v.variable));
    }
    async getWeights() {
        throw new Error("getWeights() is not implemented for Adamax yet.");
    }
    async setWeights(weightValues) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "beta1": this.beta1,
            "beta2": this.beta2,
            "epsilon": this.epsilon,
            "decay": this.decay
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["beta1"], config["beta2"], config["epsilon"], config["decay"]);
    }
}
/** @nocollapse */ AdamaxOptimizer.className = "Adamax"; // Note: Name matters for Python compatbility.
(0, _serialization.registerClass)(AdamaxOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/abs":"4PgZA","../ops/add":"i4ulI","../ops/div":"3bNgZ","../ops/maximum":"clLCR","../ops/mul":"8s4p1","../ops/scalar":"jMh5J","../ops/sub":"mafuF","../ops/zeros_like":"dwK1F","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ywAZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "MomentumOptimizer", ()=>MomentumOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _mul = require("../ops/mul");
var _scalar = require("../ops/scalar");
var _zerosLike = require("../ops/zeros_like");
var _serialization = require("../serialization");
var _sgdOptimizer = require("./sgd_optimizer");
class MomentumOptimizer extends (0, _sgdOptimizer.SGDOptimizer) {
    constructor(learningRate, momentum, useNesterov = false){
        super(learningRate);
        this.learningRate = learningRate;
        this.momentum = momentum;
        this.useNesterov = useNesterov;
        this.accumulations = [];
        this.m = (0, _scalar.scalar)(this.momentum);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            if (this.accumulations[i] == null) {
                const trainable = false;
                this.accumulations[i] = {
                    originalName: `${name}/momentum`,
                    variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
                };
            }
            const accumulation = this.accumulations[i].variable;
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            (0, _globals.tidy)(()=>{
                let newValue;
                const newAccumulation = (0, _add.add)((0, _mul.mul)(this.m, accumulation), gradient);
                if (this.useNesterov) newValue = (0, _add.add)((0, _mul.mul)(this.c, (0, _add.add)(gradient, (0, _mul.mul)(newAccumulation, this.m))), value);
                else newValue = (0, _add.add)((0, _mul.mul)(this.c, newAccumulation), value);
                accumulation.assign(newAccumulation);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        this.m.dispose();
        if (this.accumulations != null) (0, _globals.dispose)(this.accumulations.map((v)=>v.variable));
    }
    /**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */ setMomentum(momentum) {
        this.momentum = momentum;
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [
            await this.saveIterations()
        ].concat(this.accumulations.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulations = weightValues.map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "momentum": this.momentum,
            "useNesterov": this.useNesterov
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["momentum"], config["useNesterov"]);
    }
}
/** @nocollapse */ MomentumOptimizer.className = "Momentum"; // Name matters for Python compatibility.
(0, _serialization.registerClass)(MomentumOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/mul":"8s4p1","../ops/scalar":"jMh5J","../ops/zeros_like":"dwK1F","../serialization":"wKqJz","./sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9wSb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "SGDOptimizer", ()=>SGDOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _mul = require("../ops/mul");
var _scalar = require("../ops/scalar");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class SGDOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate){
        super();
        this.learningRate = learningRate;
        this.setLearningRate(learningRate);
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ? variableGradients.map((v)=>v.name) : Object.keys(variableGradients);
        varNames.forEach((name, i)=>{
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const value = (0, _engine.ENGINE).registeredVariables[name];
            (0, _globals.tidy)(()=>{
                const newValue = (0, _add.add)((0, _mul.mul)(this.c, gradient), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    /**
     * Sets the learning rate of the optimizer.
     */ setLearningRate(learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) this.c.dispose();
        this.c = (0, _globals.keep)((0, _scalar.scalar)(-learningRate));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [
            await this.saveIterations()
        ];
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        if (weightValues.length !== 0) throw new Error("SGD optimizer does not have settable weights.");
    }
    getConfig() {
        return {
            "learningRate": this.learningRate
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"]);
    }
}
/** @nocollapse */ SGDOptimizer.className = "SGD"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(SGDOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/mul":"8s4p1","../ops/scalar":"jMh5J","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Pbck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OptimizerConstructors", ()=>OptimizerConstructors);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _adadeltaOptimizer = require("./adadelta_optimizer");
var _adagradOptimizer = require("./adagrad_optimizer");
var _adamOptimizer = require("./adam_optimizer");
var _adamaxOptimizer = require("./adamax_optimizer");
var _momentumOptimizer = require("./momentum_optimizer");
var _rmspropOptimizer = require("./rmsprop_optimizer");
var _sgdOptimizer = require("./sgd_optimizer");
class OptimizerConstructors {
    /**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static sgd(learningRate) {
        return new (0, _sgdOptimizer.SGDOptimizer)(learningRate);
    }
    /**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static momentum(learningRate, momentum, useNesterov = false) {
        return new (0, _momentumOptimizer.MomentumOptimizer)(learningRate, momentum, useNesterov);
    }
    /**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
        return new (0, _rmspropOptimizer.RMSPropOptimizer)(learningRate, decay, momentum, epsilon, centered);
    }
    /**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
        return new (0, _adamOptimizer.AdamOptimizer)(learningRate, beta1, beta2, epsilon);
    }
    /**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adadelta(learningRate = .001, rho = .95, epsilon = null) {
        return new (0, _adadeltaOptimizer.AdadeltaOptimizer)(learningRate, rho, epsilon);
    }
    /**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
        return new (0, _adamaxOptimizer.AdamaxOptimizer)(learningRate, beta1, beta2, epsilon, decay);
    }
    /**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adagrad(learningRate, initialAccumulatorValue = 0.1) {
        return new (0, _adagradOptimizer.AdagradOptimizer)(learningRate, initialAccumulatorValue);
    }
}

},{"./adadelta_optimizer":"7LYeo","./adagrad_optimizer":"1K352","./adam_optimizer":"lKjPX","./adamax_optimizer":"d9QP5","./momentum_optimizer":"5ywAZ","./rmsprop_optimizer":"21qx8","./sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21qx8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "RMSPropOptimizer", ()=>RMSPropOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _add = require("../ops/add");
var _div = require("../ops/div");
var _mul = require("../ops/mul");
var _sqrt = require("../ops/sqrt");
var _square = require("../ops/square");
var _sub = require("../ops/sub");
var _zerosLike = require("../ops/zeros_like");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class RMSPropOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false){
        super();
        this.learningRate = learningRate;
        this.decay = decay;
        this.momentum = momentum;
        this.epsilon = epsilon;
        this.accumulatedMeanSquares = [];
        this.accumulatedMoments = [];
        this.accumulatedMeanGrads = [];
        this.centered = centered;
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
        if (learningRate == null) throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            const trainable = false;
            if (this.accumulatedMeanSquares[i] == null) this.accumulatedMeanSquares[i] = {
                originalName: `${name}/rms`,
                variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedMoments[i] == null) this.accumulatedMoments[i] = {
                originalName: `${name}/momentum`,
                variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedMeanGrads[i] == null && this.centered) this.accumulatedMeanGrads[i] = {
                originalName: `${name}/mg`,
                variable: (0, _globals.tidy)(()=>(0, _zerosLike.zerosLike)(value).variable(trainable))
            };
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
            const accumulatedMoments = this.accumulatedMoments[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedMeanSquare = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));
                if (this.centered) {
                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;
                    // Centered gradient
                    const newAccumulatedMeanGrad = (0, _add.add)((0, _mul.mul)(accumulatedMeanGrad, this.decay), (0, _mul.mul)(gradient, 1 - this.decay));
                    const gradContribution = (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _sub.sub)(newAccumulatedMeanSquare, (0, _add.add)((0, _square.square)(newAccumulatedMeanGrad), this.epsilon))));
                    const newAccumulatedMoments = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), gradContribution);
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = (0, _sub.sub)(value, newAccumulatedMoments);
                    value.assign(newValue);
                } else {
                    // Plain gradient
                    const newAccumulatedMeanSquare1 = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));
                    const newAccumulatedMoments1 = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedMeanSquare1, this.epsilon))));
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare1);
                    accumulatedMoments.assign(newAccumulatedMoments1);
                    const newValue1 = (0, _sub.sub)(value, newAccumulatedMoments1);
                    value.assign(newValue1);
                }
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedMeanSquares != null) (0, _globals.dispose)(this.accumulatedMeanSquares.map((v)=>v.variable));
        if (this.accumulatedMeanGrads != null && this.centered) (0, _globals.dispose)(this.accumulatedMeanGrads.map((v)=>v.variable));
        if (this.accumulatedMoments != null) (0, _globals.dispose)(this.accumulatedMoments.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedMeanSquares,
            ...this.accumulatedMoments
        ];
        if (this.centered) variables.push(...this.accumulatedMeanGrads);
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
        const trainable = false;
        this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        if (this.centered) this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "decay": this.decay,
            "momentum": this.momentum,
            "epsilon": this.epsilon,
            "centered": this.centered
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["decay"], config["momentum"], config["epsilon"], config["centered"]);
    }
}
/** @nocollapse */ RMSPropOptimizer.className = "RMSProp"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(RMSPropOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/add":"i4ulI","../ops/div":"3bNgZ","../ops/mul":"8s4p1","../ops/sqrt":"aMJIO","../ops/square":"52Axi","../ops/sub":"mafuF","../ops/zeros_like":"dwK1F","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hMjG0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "train", ()=>train);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // So typings can propagate.
var _adadeltaOptimizer = require("./optimizers/adadelta_optimizer");
var _adagradOptimizer = require("./optimizers/adagrad_optimizer");
var _adamOptimizer = require("./optimizers/adam_optimizer");
var _adamaxOptimizer = require("./optimizers/adamax_optimizer");
var _momentumOptimizer = require("./optimizers/momentum_optimizer");
var _optimizerConstructors = require("./optimizers/optimizer_constructors");
var _rmspropOptimizer = require("./optimizers/rmsprop_optimizer");
var _sgdOptimizer = require("./optimizers/sgd_optimizer");
const train = {
    sgd: (0, _optimizerConstructors.OptimizerConstructors).sgd,
    momentum: (0, _optimizerConstructors.OptimizerConstructors).momentum,
    adadelta: (0, _optimizerConstructors.OptimizerConstructors).adadelta,
    adagrad: (0, _optimizerConstructors.OptimizerConstructors).adagrad,
    rmsprop: (0, _optimizerConstructors.OptimizerConstructors).rmsprop,
    adamax: (0, _optimizerConstructors.OptimizerConstructors).adamax,
    adam: (0, _optimizerConstructors.OptimizerConstructors).adam
};

},{"./optimizers/adadelta_optimizer":"7LYeo","./optimizers/adagrad_optimizer":"1K352","./optimizers/adam_optimizer":"lKjPX","./optimizers/adamax_optimizer":"d9QP5","./optimizers/momentum_optimizer":"5ywAZ","./optimizers/optimizer_constructors":"2Pbck","./optimizers/rmsprop_optimizer":"21qx8","./optimizers/sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHUPK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextFrame", ()=>nextFrame);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const delayCallback = (()=>{
    if (typeof requestAnimationFrame !== "undefined") return requestAnimationFrame;
    else if (typeof setImmediate !== "undefined") return setImmediate;
    return (f)=>f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */ function nextFrame() {
    return new Promise((resolve)=>delayCallback(()=>resolve()));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lS39m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_fusedMatMul", ()=>_fusedMatMul);
parcelHelpers.export(exports, "_fusedMatMulConfig", ()=>_fusedMatMulConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fusedUtils = require("../utils/fused_utils");
var _add = require("./Add");
var _batchMatMul = require("./BatchMatMul");
function _fusedMatMul(args) {
    const { inputs , backend , attrs  } = args;
    const { a , b , bias , preluActivationWeights  } = inputs;
    const { transposeA , transposeB , activation , leakyreluAlpha  } = attrs;
    let current;
    let addRes;
    let activationRes;
    const intermediates = [];
    const matMulRes = (0, _batchMatMul.batchMatMul)({
        inputs: {
            a,
            b
        },
        attrs: {
            transposeA,
            transposeB
        },
        backend
    });
    current = matMulRes;
    if (bias) {
        addRes = (0, _add.add)({
            inputs: {
                a: current,
                b: bias
            },
            backend
        });
        intermediates.push(current);
        current = addRes;
    }
    if (activation) {
        activationRes = (0, _fusedUtils.applyActivation)(backend, current, activation, preluActivationWeights, leakyreluAlpha);
        intermediates.push(current);
        current = activationRes;
    }
    for (const i of intermediates)backend.disposeIntermediateTensorInfo(i);
    return current;
}
const _fusedMatMulConfig = {
    kernelName: (0, _tfjsCore._FusedMatMul),
    backendName: "cpu",
    kernelFunc: _fusedMatMul
};

},{"@tensorflow/tfjs-core":"2votT","../utils/fused_utils":"4G9S6","./Add":"5SGy9","./BatchMatMul":"ieudW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4G9S6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyActivation", ()=>applyActivation);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _elu = require("../kernels/Elu");
var _identity = require("../kernels/Identity");
var _leakyRelu = require("../kernels/LeakyRelu");
var _prelu = require("../kernels/Prelu");
var _relu = require("../kernels/Relu");
var _relu6 = require("../kernels/Relu6");
var _sigmoid = require("../kernels/Sigmoid");
function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {
    if (activation === "linear") return (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    else if (activation === "relu") return (0, _relu.relu)({
        inputs: {
            x
        },
        backend
    });
    else if (activation === "elu") return (0, _elu.elu)({
        inputs: {
            x
        },
        backend
    });
    else if (activation === "relu6") return (0, _relu6.relu6)({
        inputs: {
            x
        },
        backend
    });
    else if (activation === "prelu") return (0, _prelu.prelu)({
        inputs: {
            x,
            alpha: preluActivationWeights
        },
        backend
    });
    else if (activation === "leakyrelu") return (0, _leakyRelu.leakyRelu)({
        inputs: {
            x
        },
        backend,
        attrs: {
            alpha: leakyreluAlpha
        }
    });
    else if (activation === "sigmoid") return (0, _sigmoid.sigmoid)({
        inputs: {
            x
        },
        backend
    });
    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);
}

},{"../kernels/Elu":"c1FL0","../kernels/Identity":"9BGOC","../kernels/LeakyRelu":"1BRcT","../kernels/Prelu":"67p4X","../kernels/Relu":"6xaOS","../kernels/Relu6":"2OBtL","../kernels/Sigmoid":"1n8M4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1FL0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "elu", ()=>elu);
parcelHelpers.export(exports, "eluConfig", ()=>eluConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const elu = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Elu), (xi)=>xi >= 0 ? xi : Math.exp(xi) - 1);
const eluConfig = {
    kernelName: (0, _tfjsCore.Elu),
    backendName: "cpu",
    kernelFunc: elu
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8aAW6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param name Kernel name.
 * @param op A `SimpleUnaryOperation` for the kernel.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */ parcelHelpers.export(exports, "unaryKernelFunc", ()=>unaryKernelFunc);
/**
 * Template that creates a `KernelFunc` for unary ops from the given
 * `SimpleUnaryImpl`..
 * @param name Kernel name.
 * @param unaryImpl A `SimpleUnaryImpl` that implements the op.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */ parcelHelpers.export(exports, "unaryKernelFuncFromImpl", ()=>unaryKernelFuncFromImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function unaryKernelFunc(name, op, dtype) {
    return ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        (0, _cpuUtil.assertNotComplex)(x, name);
        if (x.dtype === "string" || dtype === "string") throw new Error("unaryKernelFunc does not support string input/output");
        const cpuBackend = backend;
        const values = cpuBackend.data.get(x.dataId).values;
        const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
        const $dtype = dtype || x.dtype;
        const newValues = (0, _tfjsCore.util).getArrayFromDType($dtype, xSize);
        for(let i = 0; i < xSize; ++i)newValues[i] = op(values[i], attrs);
        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
    };
}
function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {
    return ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        (0, _cpuUtil.assertNotComplex)(x, name);
        if (x.dtype === "string" || dtype === "string") throw new Error("unaryKernelFunc does not support string input/output");
        const cpuBackend = backend;
        const values = cpuBackend.data.get(x.dataId).values;
        const $dtype = dtype || x.dtype;
        const newValues = unaryImpl(values, $dtype, attrs);
        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
    };
}

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ii07P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertNotComplex", ()=>assertNotComplex);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function assertNotComplex(tensor, opName) {
    if (!Array.isArray(tensor)) tensor = [
        tensor
    ];
    tensor.forEach((t)=>{
        if (t != null) (0, _tfjsCore.util).assert(t.dtype !== "complex64", ()=>`${opName} does not support complex64 tensors in the CPU backend.`);
    });
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9BGOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "identityConfig", ()=>identityConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function identity(args) {
    const { inputs , backend  } = args;
    const { x  } = inputs;
    backend.incRef(x.dataId);
    return {
        dataId: x.dataId,
        shape: x.shape,
        dtype: x.dtype
    };
}
const identityConfig = {
    kernelName: (0, _tfjsCore.Identity),
    backendName: "cpu",
    kernelFunc: identity
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BRcT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leakyRelu", ()=>leakyRelu);
parcelHelpers.export(exports, "leakyReluConfig", ()=>leakyReluConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function leakyRelu(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { alpha  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x
    ], "leakyRelu");
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const xVals = backend.data.get(x.dataId).values;
    const outVals = (0, _tfjsCore.util).getTypedArrayFromDType("float32", xSize);
    for(let i = 0; i < xVals.length; i++)outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];
    return backend.makeTensorInfo(x.shape, "float32", outVals);
}
const leakyReluConfig = {
    kernelName: (0, _tfjsCore.LeakyRelu),
    backendName: "cpu",
    kernelFunc: leakyRelu
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67p4X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prelu", ()=>prelu);
parcelHelpers.export(exports, "preluConfig", ()=>preluConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _binaryImpl = require("../utils/binary_impl");
const preluImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((xValue, aValue)=>xValue < 0 ? aValue * xValue : xValue);
function prelu(args) {
    const { inputs , backend  } = args;
    const { x , alpha  } = inputs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        alpha
    ], "prelu");
    const aVals = backend.data.get(x.dataId).values;
    const bVals = backend.data.get(alpha.dataId).values;
    const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, "float32");
    return backend.makeTensorInfo(resultShape, "float32", resultData);
}
const preluConfig = {
    kernelName: (0, _tfjsCore.Prelu),
    backendName: "cpu",
    kernelFunc: prelu
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/binary_impl":"PztB9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"PztB9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Template that creates implementation for binary ops. Supports broadcast.
 */ parcelHelpers.export(exports, "createSimpleBinaryKernelImpl", ()=>createSimpleBinaryKernelImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function createSimpleBinaryKernelImpl(op) {
    return (aShape, bShape, aVals, bVals, dtype)=>{
        const newShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        const resultRank = newShape.length;
        const resultStrides = (0, _tfjsCore.util).computeStrides(newShape);
        const resultSize = (0, _tfjsCore.util).sizeFromShape(newShape);
        const result = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, resultSize);
        const aRank = aShape.length;
        const bRank = bShape.length;
        const aStrides = (0, _tfjsCore.util).computeStrides(aShape);
        const bStrides = (0, _tfjsCore.util).computeStrides(bShape);
        const aBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(aShape, newShape);
        const bBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(bShape, newShape);
        if (aBroadcastDims.length + bBroadcastDims.length === 0) for(let i = 0; i < result.length; ++i)result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
        else for(let i1 = 0; i1 < result.length; ++i1){
            const loc = (0, _tfjsCore.util).indexToLoc(i1, resultRank, resultStrides);
            const aLoc = loc.slice(-aRank);
            aBroadcastDims.forEach((d)=>aLoc[d] = 0);
            const aIndex = (0, _tfjsCore.util).locToIndex(aLoc, aRank, aStrides);
            const bLoc = loc.slice(-bRank);
            bBroadcastDims.forEach((d)=>bLoc[d] = 0);
            const bIndex = (0, _tfjsCore.util).locToIndex(bLoc, bRank, bStrides);
            result[i1] = op(aVals[aIndex], bVals[bIndex]);
        }
        return [
            result,
            newShape
        ];
    };
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xaOS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relu", ()=>relu);
parcelHelpers.export(exports, "reluConfig", ()=>reluConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const relu = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Relu), (xi)=>Math.max(0, xi));
const reluConfig = {
    kernelName: (0, _tfjsCore.Relu),
    backendName: "cpu",
    kernelFunc: relu
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OBtL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relu6", ()=>relu6);
parcelHelpers.export(exports, "relu6Config", ()=>relu6Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const relu6 = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Relu6), (xi)=>Math.min(Math.max(0, xi), 6));
const relu6Config = {
    kernelName: (0, _tfjsCore.Relu6),
    backendName: "cpu",
    kernelFunc: relu6
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1n8M4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sigmoidImpl", ()=>sigmoidImpl);
parcelHelpers.export(exports, "sigmoid", ()=>sigmoid);
parcelHelpers.export(exports, "sigmoidConfig", ()=>sigmoidConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const sigmoidImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>1 / (1 + Math.exp(-xi)));
const sigmoid = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Sigmoid), (xi)=>1 / (1 + Math.exp(-xi)));
const sigmoidConfig = {
    kernelName: (0, _tfjsCore.Sigmoid),
    backendName: "cpu",
    kernelFunc: sigmoid
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WKfI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Template that creates implementation for unary op.
 */ parcelHelpers.export(exports, "createSimpleUnaryImpl", ()=>createSimpleUnaryImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function createSimpleUnaryImpl(op) {
    return (values, dtype, attrs)=>{
        const newValues = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = op(values[i], attrs);
        return newValues;
    };
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5SGy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addImpl", ()=>addImpl);
parcelHelpers.export(exports, "addComplexImpl", ()=>addComplexImpl);
parcelHelpers.export(exports, "add", ()=>add);
parcelHelpers.export(exports, "addConfig", ()=>addConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const addImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a + b);
const addComplexImpl = (0, _binaryUtils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag)=>{
    return {
        real: aReal + bReal,
        imag: aImag + bImag
    };
});
const add = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Add), addImpl, addComplexImpl);
const addConfig = {
    kernelName: (0, _tfjsCore.Add),
    backendName: "cpu",
    kernelFunc: add
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kjogZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param name Kernel name.
 * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.
 * @param binaryKernelComplexImpl Optional. If exists, represents a
 *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype
 *     is `complex64`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */ parcelHelpers.export(exports, "binaryKernelFunc", ()=>binaryKernelFunc);
/**
 * Template that creates the complex type implementation for binary ops.
 * Supports broadcast.
 */ parcelHelpers.export(exports, "createComplexBinaryKernelImpl", ()=>createComplexBinaryKernelImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _cast = require("../kernels/Cast");
var _complex = require("../kernels/Complex");
function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {
    if (complexImpl == null) return ({ inputs , backend  })=>{
        const { a , b  } = inputs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], name);
        const aVals = cpuBackend.data.get(a.dataId).values;
        const bVals = cpuBackend.data.get(b.dataId).values;
        const decodedAVals = a.dtype === "string" ? // tslint:disable-next-line: no-any
        (0, _tfjsCore.backend_util).fromUint8ToStringArray(aVals) : aVals;
        const decodedBVals = a.dtype === "string" ? // tslint:disable-next-line: no-any
        (0, _tfjsCore.backend_util).fromUint8ToStringArray(bVals) : bVals;
        const $dtype = dtype || a.dtype;
        const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
        return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
    };
    return ({ inputs , backend  })=>{
        const { a , b  } = inputs;
        const cpuBackend = backend;
        if (a.dtype === "complex64" || b.dtype === "complex64") {
            const $aComplex = (0, _cast.cast)({
                inputs: {
                    x: a
                },
                backend: cpuBackend,
                attrs: {
                    dtype: "complex64"
                }
            });
            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);
            const aReal = $aComplexVals.complexTensorInfos.real;
            const aImag = $aComplexVals.complexTensorInfos.imag;
            const aRealVals = cpuBackend.data.get(aReal.dataId).values;
            const aImagVals = cpuBackend.data.get(aImag.dataId).values;
            const $bComplex = (0, _cast.cast)({
                inputs: {
                    x: b
                },
                backend: cpuBackend,
                attrs: {
                    dtype: "complex64"
                }
            });
            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);
            const bReal = $bComplexVals.complexTensorInfos.real;
            const bImag = $bComplexVals.complexTensorInfos.imag;
            const bRealVals = cpuBackend.data.get(bReal.dataId).values;
            const bImagVals = cpuBackend.data.get(bImag.dataId).values;
            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);
            const resultReal = cpuBackend.makeTensorInfo(resultShape, "float32", resultRealData);
            const resultImag = cpuBackend.makeTensorInfo(resultShape, "float32", resultImagData);
            const result = (0, _complex.complex)({
                inputs: {
                    real: resultReal,
                    imag: resultImag
                },
                backend: cpuBackend
            });
            cpuBackend.disposeIntermediateTensorInfo($aComplex);
            cpuBackend.disposeIntermediateTensorInfo($bComplex);
            cpuBackend.disposeIntermediateTensorInfo(resultReal);
            cpuBackend.disposeIntermediateTensorInfo(resultImag);
            return result;
        } else {
            const aVals = cpuBackend.data.get(a.dataId).values;
            const bVals = cpuBackend.data.get(b.dataId).values;
            const $dtype = dtype || a.dtype;
            const [resultData, resultShape1] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);
            return cpuBackend.makeTensorInfo(resultShape1, $dtype, resultData);
        }
    };
}
function createComplexBinaryKernelImpl(op) {
    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals)=>{
        const resultShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        const resultSize = (0, _tfjsCore.util).sizeFromShape(resultShape);
        const resultRank = resultShape.length;
        const resultStrides = (0, _tfjsCore.util).computeStrides(resultShape);
        const resultRealVals = (0, _tfjsCore.util).getTypedArrayFromDType("float32", resultSize);
        const resultImagVals = (0, _tfjsCore.util).getTypedArrayFromDType("float32", resultSize);
        const aBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(aShape, resultShape);
        const bBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(bShape, resultShape);
        const aVals = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(aRealVals, aImagVals);
        const bVals = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(bRealVals, bImagVals);
        const aRank = aShape.length;
        const aStrides = (0, _tfjsCore.util).computeStrides(aShape);
        const bRank = bShape.length;
        const bStrides = (0, _tfjsCore.util).computeStrides(bShape);
        if (aBroadcastDims.length + bBroadcastDims.length === 0) for(let i = 0; i < resultRealVals.length; i++){
            const aIdx = i % aVals.length;
            const bIdx = i % bVals.length;
            const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);
            resultRealVals[i] = result.real;
            resultImagVals[i] = result.imag;
        }
        else for(let i1 = 0; i1 < resultRealVals.length; i1++){
            const loc = (0, _tfjsCore.util).indexToLoc(i1, resultRank, resultStrides);
            const aLoc = loc.slice(-aRank);
            aBroadcastDims.forEach((d)=>aLoc[d] = 0);
            const aIndex = (0, _tfjsCore.util).locToIndex(aLoc, aRank, aStrides);
            const bLoc = loc.slice(-bRank);
            bBroadcastDims.forEach((d)=>bLoc[d] = 0);
            const bIndex = (0, _tfjsCore.util).locToIndex(bLoc, bRank, bStrides);
            const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);
            resultRealVals[i1] = opResult.real;
            resultImagVals[i1] = opResult.imag;
        }
        return [
            resultRealVals,
            resultImagVals,
            resultShape
        ];
    };
}

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../kernels/Cast":"hBSGR","../kernels/Complex":"ihUM4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBSGR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "castImpl", ()=>castImpl);
parcelHelpers.export(exports, "cast", ()=>cast);
parcelHelpers.export(exports, "castConfig", ()=>castConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _zerosImpl = require("../utils/zeros_impl");
var _complex = require("./Complex");
var _identity = require("./Identity");
var _real = require("./Real");
function castImpl(values, shape, inputType, dtype) {
    if (dtype === "int32") {
        const resultValues = Int32Array.from(values);
        return [
            shape,
            "int32",
            resultValues
        ];
    }
    if (dtype === "bool") {
        // This is essentially the result of notEqual(x, 0). We avoid using
        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->
        // cast -> notEqual -> binary_utils.
        const zero = (0, _tfjsCore.util).toTypedArray([
            0
        ], inputType);
        const [resultData, resultShape] = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a !== b ? 1 : 0)(shape, [], values, zero, "bool");
        return [
            resultShape,
            "bool",
            resultData
        ];
    }
    throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);
}
function cast(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { dtype  } = attrs;
    // Casting to complex64.
    if (dtype === "complex64") {
        if (x.dtype === "complex64") return (0, _identity.identity)({
            inputs: {
                x
            },
            backend
        });
        const zerosTensorInfo = (0, _zerosImpl.zeros)(backend, x.shape, x.dtype);
        const floatX = cast({
            inputs: {
                x
            },
            backend,
            attrs: {
                dtype: "float32"
            }
        });
        const result = (0, _complex.complex)({
            inputs: {
                real: floatX,
                imag: zerosTensorInfo
            },
            backend
        });
        backend.disposeIntermediateTensorInfo(zerosTensorInfo);
        backend.disposeIntermediateTensorInfo(floatX);
        return result;
    }
    // Casting from complex64
    if (x.dtype === "complex64") {
        const realPart = (0, _real.real)({
            inputs: {
                input: x
            },
            backend
        });
        const result1 = cast({
            inputs: {
                x: realPart
            },
            backend,
            attrs: {
                dtype
            }
        });
        backend.disposeIntermediateTensorInfo(realPart);
        return result1;
    }
    if (!(0, _tfjsCore.util).hasEncodingLoss(x.dtype, dtype)) {
        // We don't change the underlying data, since we cast to higher
        // precision.
        const result2 = (0, _identity.identity)({
            inputs: {
                x
            },
            backend
        });
        return {
            dataId: result2.dataId,
            shape: result2.shape,
            dtype
        };
    }
    const values = backend.data.get(x.dataId).values;
    const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);
    return backend.makeTensorInfo(resultShape, resultType, resultData);
}
const castConfig = {
    kernelName: (0, _tfjsCore.Cast),
    backendName: "cpu",
    kernelFunc: cast
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/zeros_impl":"lQJBv","./Complex":"ihUM4","./Identity":"9BGOC","./Real":"8fguZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lQJBv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Generates a tensorInfo with all zeros value.
 * @param backend cpu backend.
 * @param shape Shape for the zeros tensor.
 * @param dtype Optional. If set, the result has this dtype.
 */ parcelHelpers.export(exports, "zeros", ()=>zeros);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _complex = require("../kernels/Complex");
function zeros(backend, shape, dtype = "float32") {
    if (dtype === "complex64") {
        const real = zeros(backend, shape, "float32");
        const imag = zeros(backend, shape, "float32");
        return (0, _complex.complex)({
            inputs: {
                real,
                imag
            },
            backend
        });
    }
    const values = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(shape), dtype);
    return backend.makeTensorInfo(shape, dtype, values);
}

},{"@tensorflow/tfjs-core":"2votT","../kernels/Complex":"ihUM4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihUM4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complex", ()=>complex);
parcelHelpers.export(exports, "complexConfig", ()=>complexConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function complex(args) {
    const { inputs , backend  } = args;
    const { real , imag  } = inputs;
    const realVals = backend.data.get(real.dataId).values;
    const imagVals = backend.data.get(imag.dataId).values;
    const complexInfo = backend.makeTensorInfo(real.shape, "complex64");
    const complex = backend.data.get(complexInfo.dataId);
    // The complex tensor owns the underlying real and imag tensorInfos, only the
    // complex tensor tracks refCount, when complexData is disposed the
    // underlying tensorData will be disposed.
    complex.complexTensorInfos = {
        real: backend.makeTensorInfo(real.shape, "float32", realVals),
        imag: backend.makeTensorInfo(imag.shape, "float32", imagVals)
    };
    return complexInfo;
}
const complexConfig = {
    kernelName: (0, _tfjsCore.Complex),
    backendName: "cpu",
    kernelFunc: complex
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8fguZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "real", ()=>real);
parcelHelpers.export(exports, "realConfig", ()=>realConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function real(args) {
    const { inputs , backend  } = args;
    const { input  } = inputs;
    const real = backend.data.get(input.dataId).complexTensorInfos.real;
    const realVal = backend.data.get(real.dataId).values;
    // When complex tensor is disposed, its underlying parts will be disposed too.
    // Make new tensor out of the real value of the complex. This makes sure the
    // value is still accessible even if complex tensor is disposed.
    return backend.makeTensorInfo(real.shape, real.dtype, realVal);
}
const realConfig = {
    kernelName: (0, _tfjsCore.Real),
    backendName: "cpu",
    kernelFunc: real
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ieudW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchMatMul", ()=>batchMatMul);
parcelHelpers.export(exports, "batchMatMulConfig", ()=>batchMatMulConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
function batchMatMul(args) {
    const { inputs , backend , attrs  } = args;
    const { a , b  } = inputs;
    const { transposeA , transposeB  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        a,
        b
    ], "matMul");
    const aRank = a.shape.length;
    const bRank = b.shape.length;
    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
    const outerDimsA = a.shape.slice(0, -2);
    const outerDimsB = b.shape.slice(0, -2);
    const batchDimA = (0, _tfjsCore.util).sizeFromShape(outerDimsA);
    const batchDimB = (0, _tfjsCore.util).sizeFromShape(outerDimsB);
    const outShapeOuterDims = (0, _tfjsCore.broadcast_util).assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
    const outShape = outShapeOuterDims.concat([
        outerShapeA,
        outerShapeB
    ]);
    (0, _tfjsCore.util).assert(innerShapeA === innerShapeB, ()=>`Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
    const a3dShape = transposeA ? [
        batchDimA,
        innerShapeA,
        outerShapeA
    ] : [
        batchDimA,
        outerShapeA,
        innerShapeA
    ];
    const b3dShape = transposeB ? [
        batchDimB,
        outerShapeB,
        innerShapeB
    ] : [
        batchDimB,
        innerShapeB,
        outerShapeB
    ];
    // The rest of the implementation is designed to operate on rank-3 tensors
    const a3d = (0, _reshape.reshape)({
        inputs: {
            x: a
        },
        backend,
        attrs: {
            shape: a3dShape
        }
    });
    const b3d = (0, _reshape.reshape)({
        inputs: {
            x: b
        },
        backend,
        attrs: {
            shape: b3dShape
        }
    });
    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];
    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];
    const batchDim = Math.max(batchDimA, batchDimB);
    const a3dValues = backend.data.get(a3d.dataId).values;
    const b3dValues = backend.data.get(b3d.dataId).values;
    const a3dStrides = (0, _tfjsCore.util).computeStrides(a3d.shape);
    const b3dStrides = (0, _tfjsCore.util).computeStrides(b3d.shape);
    const [aBatch, aOuterStep, aInnerStep] = transposeA ? [
        a3dStrides[0],
        1,
        a3dStrides[1]
    ] : [
        a3dStrides[0],
        a3dStrides[1],
        1
    ];
    const [bInnerStep, bOuterStep, bBatch] = transposeB ? [
        1,
        b3dStrides[1],
        b3dStrides[0]
    ] : [
        b3dStrides[1],
        1,
        b3dStrides[0]
    ];
    const size = leftDim * rightDim;
    const result = (0, _tfjsCore.buffer)([
        batchDim,
        leftDim,
        rightDim
    ], a3d.dtype);
    const resVals = result.values;
    const blockSize = backend.blockSize;
    for(let bi = 0; bi < batchDim; bi++)for(let i0 = 0; i0 < leftDim; i0 += blockSize){
        for(let j0 = 0; j0 < rightDim; j0 += blockSize)for(let k0 = 0; k0 < sharedDim; k0 += blockSize){
            // for when blockSize doesn't evenly divide the input
            const iBlock = Math.min(i0 + blockSize, leftDim);
            const jBlock = Math.min(j0 + blockSize, rightDim);
            const kBlock = Math.min(k0 + blockSize, sharedDim);
            for(let i = i0; i < iBlock; i++)for(let j = j0; j < jBlock; j++){
                let sum = 0.0;
                for(let k = k0; k < kBlock; k++){
                    const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;
                    const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;
                    const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];
                    const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];
                    sum += aVal * bVal;
                }
                resVals[bi * size + (i * rightDim + j)] += sum;
            }
        }
    }
    backend.disposeIntermediateTensorInfo(a3d);
    backend.disposeIntermediateTensorInfo(b3d);
    // set correct shape on output.
    return backend.makeTensorInfo(outShape, result.dtype, result.values);
}
const batchMatMulConfig = {
    kernelName: (0, _tfjsCore.BatchMatMul),
    backendName: "cpu",
    kernelFunc: batchMatMul
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hjnko":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshape", ()=>reshape);
parcelHelpers.export(exports, "reshapeConfig", ()=>reshapeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function reshape(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { shape  } = attrs;
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const $shape = (0, _tfjsCore.util).inferFromImplicitShape(shape, xSize);
    const $xSize = (0, _tfjsCore.util).sizeFromShape($shape);
    (0, _tfjsCore.util).assert(xSize === $xSize, ()=>`The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);
    backend.incRef(x.dataId);
    const xData = backend.data.get(x.dataId);
    if (xData.complexTensorInfos != null) {
        const real = xData.complexTensorInfos.real;
        const imag = xData.complexTensorInfos.imag;
        real.shape = $shape;
        imag.shape = $shape;
    }
    return {
        dataId: x.dataId,
        shape: $shape,
        dtype: x.dtype
    };
}
const reshapeConfig = {
    kernelName: (0, _tfjsCore.Reshape),
    backendName: "cpu",
    kernelFunc: reshape
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2UER":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "simpleAbsImpl", ()=>simpleAbsImpl);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "absConfig", ()=>absConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function simpleAbsImpl(vals) {
    const resultValues = new Float32Array(vals.length);
    for(let i = 0; i < vals.length; ++i)resultValues[i] = Math.abs(vals[i]);
    return resultValues;
}
const abs = (args)=>{
    const { x  } = args.inputs;
    const cpuBackend = args.backend;
    (0, _cpuUtil.assertNotComplex)(x, "abs");
    let resultValues = new Float32Array((0, _tfjsCore.util).sizeFromShape(x.shape));
    const values = cpuBackend.data.get(x.dataId).values;
    resultValues = simpleAbsImpl(values);
    return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);
};
const absConfig = {
    kernelName: (0, _tfjsCore.Abs),
    backendName: "cpu",
    kernelFunc: abs
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1t4Yh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "acosConfig", ()=>acosConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const acos = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Acos), (xi)=>Math.acos(xi));
const acosConfig = {
    kernelName: (0, _tfjsCore.Acos),
    backendName: "cpu",
    kernelFunc: acos
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qKqS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosh", ()=>acosh);
parcelHelpers.export(exports, "acoshConfig", ()=>acoshConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const acosh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Acosh), (xi)=>Math.acosh(xi));
const acoshConfig = {
    kernelName: (0, _tfjsCore.Acosh),
    backendName: "cpu",
    kernelFunc: acosh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d4Yqi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addN", ()=>addN);
parcelHelpers.export(exports, "addNConfig", ()=>addNConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function addN(args) {
    const { inputs , backend  } = args;
    const tensors = inputs;
    (0, _cpuUtil.assertNotComplex)(inputs, "addN");
    const vals = tensors.map((t)=>backend.data.get(t.dataId).values);
    const outBuf = (0, _tfjsCore.buffer)(tensors[0].shape, tensors[0].dtype);
    const outVals = outBuf.values;
    for(let i = 0; i < tensors.length; i++){
        const currVals = vals[i];
        for(let j = 0; j < outVals.length; j++)outVals[j] += currVals[j];
    }
    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const addNConfig = {
    kernelName: (0, _tfjsCore.AddN),
    backendName: "cpu",
    kernelFunc: addN
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHQJx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "all", ()=>all);
parcelHelpers.export(exports, "allConfig", ()=>allConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function all(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "all");
    const origAxes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    let axes = origAxes;
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, x.shape.length);
    let $x = x;
    if (permutedAxes != null) {
        $x = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutedAxes
            }
        });
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, x.shape.length);
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("all", axes, $x.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes($x.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const vals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(outShape), $x.dtype);
    const aVals = backend.data.get($x.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let all = aVals[offset];
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            all = all && value;
        }
        vals[i] = all;
    }
    if (permutedAxes != null) backend.disposeIntermediateTensorInfo($x);
    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
    if (keepDims) {
        const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(outShape, origAxes);
        const reshapedResult = (0, _reshape.reshape)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                shape: expandedShape
            }
        });
        backend.disposeIntermediateTensorInfo(result);
        return reshapedResult;
    }
    return result;
}
const allConfig = {
    kernelName: (0, _tfjsCore.All),
    backendName: "cpu",
    kernelFunc: all
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gEhkg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transpose", ()=>transpose);
parcelHelpers.export(exports, "transposeConfig", ()=>transposeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transposeImpl = require("./Transpose_impl");
function transpose(args) {
    const { inputs , attrs , backend  } = args;
    const { x  } = inputs;
    const { perm  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "transpose");
    const xRank = x.shape.length;
    const newShape = new Array(xRank);
    for(let i = 0; i < newShape.length; i++)newShape[i] = x.shape[perm[i]];
    const values = backend.data.get(x.dataId).values;
    const result = (0, _transposeImpl.transposeImpl)(values, x.shape, x.dtype, perm, newShape);
    const dataId = backend.write(result, newShape, x.dtype);
    return {
        dataId,
        shape: newShape,
        dtype: x.dtype
    };
}
const transposeConfig = {
    kernelName: (0, _tfjsCore.Transpose),
    backendName: "cpu",
    kernelFunc: transpose
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose_impl":"fwwXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fwwXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeImpl", ()=>transposeImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function transposeImpl(xVals, xShape, dtype, perm, newShape) {
    const xRank = xShape.length;
    const xSize = (0, _tfjsCore.util).sizeFromShape(xShape);
    const xStrides = (0, _tfjsCore.util).computeStrides(xShape);
    const newStrides = (0, _tfjsCore.util).computeStrides(newShape);
    const result = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(newShape));
    for(let i = 0; i < xSize; ++i){
        const loc = (0, _tfjsCore.util).indexToLoc(i, xRank, xStrides);
        // Permute location.
        const newLoc = new Array(loc.length);
        for(let i1 = 0; i1 < newLoc.length; i1++)newLoc[i1] = loc[perm[i1]];
        const newIndex = (0, _tfjsCore.util).locToIndex(newLoc, xRank, newStrides);
        result[newIndex] = xVals[i];
    }
    return result;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jTRz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "any", ()=>any);
parcelHelpers.export(exports, "anyConfig", ()=>anyConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function any(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "any");
    const origAxes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    let axes = origAxes;
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, x.shape.length);
    let $x = x;
    if (permutedAxes != null) {
        $x = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutedAxes
            }
        });
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, x.shape.length);
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("any", axes, $x.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes($x.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const vals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(outShape), $x.dtype);
    const aVals = backend.data.get($x.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let anyVal = aVals[offset];
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            anyVal = anyVal || value;
        }
        vals[i] = anyVal;
    }
    if (permutedAxes != null) backend.disposeIntermediateTensorInfo($x);
    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
    if (keepDims) {
        const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(outShape, origAxes);
        const reshapedResult = (0, _reshape.reshape)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                shape: expandedShape
            }
        });
        backend.disposeIntermediateTensorInfo(result);
        return reshapedResult;
    }
    return result;
}
const anyConfig = {
    kernelName: (0, _tfjsCore.Any),
    backendName: "cpu",
    kernelFunc: any
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7RMI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMax", ()=>argMax);
parcelHelpers.export(exports, "argMaxConfig", ()=>argMaxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transpose = require("./Transpose");
function argMax(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "argMax");
    let axes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, x.shape.length);
    let $x = x;
    const intermediateTensorInfos = [];
    if (permutedAxes != null) {
        $x = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutedAxes
            }
        });
        intermediateTensorInfos.push($x);
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, $x.shape.length);
    }
    axes = [
        axes[0]
    ];
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("argMax", axes, $x.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes($x.shape, axes);
    const outSize = (0, _tfjsCore.util).sizeFromShape(outShape);
    const vals = (0, _tfjsCore.util).makeZerosTypedArray(outSize, "int32");
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const aVals = backend.data.get($x.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let max = aVals[offset];
        let maxIndex = 0;
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            if (value > max) {
                max = value;
                maxIndex = j;
            }
        }
        vals[i] = maxIndex;
    }
    intermediateTensorInfos.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return backend.makeTensorInfo(outShape, "int32", vals);
}
const argMaxConfig = {
    kernelName: (0, _tfjsCore.ArgMax),
    backendName: "cpu",
    kernelFunc: argMax
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vytWQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMin", ()=>argMin);
parcelHelpers.export(exports, "argMinConfig", ()=>argMinConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transpose = require("./Transpose");
function argMin(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "argMin");
    let axes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, x.shape.length);
    let $x = x;
    const intermediateTensorInfos = [];
    if (permutedAxes != null) {
        $x = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutedAxes
            }
        });
        intermediateTensorInfos.push($x);
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, $x.shape.length);
    }
    axes = [
        axes[0]
    ];
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("argMin", axes, $x.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes($x.shape, axes);
    const outSize = (0, _tfjsCore.util).sizeFromShape(outShape);
    const vals = (0, _tfjsCore.util).makeZerosTypedArray(outSize, "int32");
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const aVals = backend.data.get($x.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let min = aVals[offset];
        let minIndex = 0;
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            if (value < min) {
                min = value;
                minIndex = j;
            }
        }
        vals[i] = minIndex;
    }
    intermediateTensorInfos.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return backend.makeTensorInfo(outShape, "int32", vals);
}
const argMinConfig = {
    kernelName: (0, _tfjsCore.ArgMin),
    backendName: "cpu",
    kernelFunc: argMin
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l9DNk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "asinConfig", ()=>asinConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const asin = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Asin), (xi)=>Math.asin(xi));
const asinConfig = {
    kernelName: (0, _tfjsCore.Asin),
    backendName: "cpu",
    kernelFunc: asin
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6czH3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinh", ()=>asinh);
parcelHelpers.export(exports, "asinhConfig", ()=>asinhConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const asinh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Asinh), (xi)=>Math.asinh(xi));
const asinhConfig = {
    kernelName: (0, _tfjsCore.Asinh),
    backendName: "cpu",
    kernelFunc: asinh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hH2Zt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "atanConfig", ()=>atanConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const atan = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Atan), (xi)=>Math.atan(xi));
const atanConfig = {
    kernelName: (0, _tfjsCore.Atan),
    backendName: "cpu",
    kernelFunc: atan
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Q1jC1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan2Impl", ()=>atan2Impl);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "atan2Config", ()=>atan2Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const atan2Impl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>Math.atan2(aValue, bValue));
const atan2 = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Atan2), atan2Impl);
const atan2Config = {
    kernelName: (0, _tfjsCore.Atan2),
    backendName: "cpu",
    kernelFunc: atan2
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7REX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanh", ()=>atanh);
parcelHelpers.export(exports, "atanhConfig", ()=>atanhConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const atanh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Atanh), (xi)=>Math.atanh(xi));
const atanhConfig = {
    kernelName: (0, _tfjsCore.Atanh),
    backendName: "cpu",
    kernelFunc: atanh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mEHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool", ()=>avgPool);
parcelHelpers.export(exports, "avgPoolConfig", ()=>avgPoolConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
var _identity = require("./Identity");
function avgPool(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    (0, _cpuUtil.assertNotComplex)(x, "avgPool");
    const { filterSize , strides , pad , dimRoundingMode  } = attrs;
    const dilations = 1;
    (0, _tfjsCore.util).assert((0, _tfjsCore.backend_util).eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    let res;
    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && (0, _tfjsCore.util).arraysEqual(convInfo.inShape, convInfo.outShape)) res = (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    else {
        const xValues = backend.data.get(x.dataId).values;
        const strides1 = (0, _tfjsCore.util).computeStrides(x.shape);
        const buffer = (0, _poolUtils.pool)(xValues, x.shape, x.dtype, strides1, convInfo, "avg");
        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
    }
    return res;
}
const avgPoolConfig = {
    kernelName: (0, _tfjsCore.AvgPool),
    backendName: "cpu",
    kernelFunc: avgPool
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","./Identity":"9BGOC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEXEJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pool", ()=>pool);
parcelHelpers.export(exports, "maxPoolPositions", ()=>maxPoolPositions);
parcelHelpers.export(exports, "pool3d", ()=>pool3d);
parcelHelpers.export(exports, "maxPool3dPositions", ()=>maxPool3dPositions);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function pool(xValues, xShape, dtype, strides, convInfo, poolType) {
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const initialValue = poolType === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
    const output = (0, _tfjsCore.buffer)(convInfo.outShape, dtype);
    const outputVals = output.values;
    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];
    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];
    const outputColStrides = convInfo.outShape[3];
    for(let b = 0; b < convInfo.batchSize; ++b){
        const outputBatchOffset = b * outputBatchStrides;
        const inputBatchOffset = b * strides[0];
        for(let d = 0; d < convInfo.inChannels; ++d)for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const xRCorner = yR * strideHeight - padTop;
            const xRMin = Math.max(0, xRCorner);
            const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
            const outputRowOffset = outputBatchOffset + yR * outputRowStrides;
            for(let yC = 0; yC < convInfo.outWidth; ++yC){
                const xCCorner = yC * strideWidth - padLeft;
                const xCMin = Math.max(0, xCCorner);
                const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                let minMaxValue = initialValue;
                let avgValue = 0;
                let count = 0;
                for(let xR = xRMin; xR < xRMax; xR += dilationHeight){
                    const xROffset = inputBatchOffset + xR * strides[1];
                    for(let xC = xCMin; xC < xCMax; xC += dilationWidth){
                        const xCOffset = xROffset + xC * strides[2];
                        const pixel = xValues[xCOffset + d];
                        if (poolType === "max" && pixel > minMaxValue) minMaxValue = pixel;
                        else if (poolType === "avg") {
                            avgValue += pixel;
                            count++;
                        }
                    }
                    if (isNaN(minMaxValue)) break;
                }
                const outputOffset = outputRowOffset + yC * outputColStrides + d;
                outputVals[outputOffset] = poolType === "avg" ? avgValue / count : minMaxValue;
            }
        }
    }
    return output;
}
function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {
    const maxPositions = (0, _tfjsCore.buffer)(convInfo.outShape, "int32");
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const xBuf = (0, _tfjsCore.buffer)(xShape, dtype, xValues);
    for(let b = 0; b < convInfo.batchSize; ++b){
        for(let d = 0; d < convInfo.inChannels; ++d)for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const xRCorner = yR * strideHeight - padTop;
            let xRMin = xRCorner;
            while(xRMin < 0)xRMin += dilationHeight;
            // const xRMin = Math.max(0, xRCorner);
            const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
            for(let yC = 0; yC < convInfo.outWidth; ++yC){
                const xCCorner = yC * strideWidth - padLeft;
                let xCMin = xCCorner;
                while(xCMin < 0)xCMin += dilationWidth;
                const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                let maxValue = Number.NEGATIVE_INFINITY;
                let maxPosition = -1;
                for(let xR = xRMin; xR < xRMax; xR += dilationHeight){
                    const wR = xR - xRCorner;
                    for(let xC = xCMin; xC < xCMax; xC += dilationWidth){
                        const wC = xC - xCCorner;
                        const pixel = xBuf.get(b, xR, xC, d);
                        if (pixel > maxValue) {
                            maxValue = pixel;
                            if (flattenPositions) maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;
                            else maxPosition = wR * effectiveFilterWidth + wC;
                        }
                    }
                }
                maxPositions.set(maxPosition, b, yR, yC, d);
            }
        }
    }
    return maxPositions;
}
function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const initialValue = poolType === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
    const output = (0, _tfjsCore.buffer)(convInfo.outShape, dtype);
    const outputVals = output.values;
    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
    const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];
    const outputColStrides = convInfo.outShape[4];
    for(let batch = 0; batch < convInfo.batchSize; ++batch){
        const outputBatchOffset = batch * outputBatchStrides;
        const inputBatchOffset = batch * strides[0];
        for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth){
            const xDepthCorner = yDepth * strideDepth - padFront;
            let xDepthMin = xDepthCorner;
            while(xDepthMin < 0)xDepthMin += dilationDepth;
            const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
            const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;
            for(let yRow = 0; yRow < convInfo.outHeight; ++yRow){
                const xRowCorner = yRow * strideHeight - padTop;
                let xRowMin = xRowCorner;
                while(xRowMin < 0)xRowMin += dilationHeight;
                const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;
                for(let yCol = 0; yCol < convInfo.outWidth; ++yCol){
                    const xColCorner = yCol * strideWidth - padLeft;
                    let xColMin = xColCorner;
                    while(xColMin < 0)xColMin += dilationWidth;
                    const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                    // Shader code begins
                    const outputColOffset = outputRowOffset + yCol * outputColStrides;
                    let minMaxValue = initialValue;
                    let avgValue = 0;
                    let count = 0;
                    for(let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth){
                        const xDepthOffset = inputBatchOffset + xDepth * strides[1];
                        for(let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight){
                            const xRowOffset = xDepthOffset + xRow * strides[2];
                            for(let xCol = xColMin; xCol < xColMax; xCol += dilationWidth){
                                const xColOffset = xRowOffset + xCol * strides[3];
                                const pixel = xValues[xColOffset + channel];
                                if (poolType === "max" && pixel > minMaxValue) minMaxValue = pixel;
                                else if (poolType === "avg") {
                                    avgValue += pixel;
                                    count++;
                                }
                                if (isNaN(minMaxValue)) break;
                            }
                            if (isNaN(minMaxValue)) break;
                        }
                        if (isNaN(minMaxValue)) break;
                    }
                    const outputOffset = outputColOffset + channel;
                    outputVals[outputOffset] = poolType === "avg" ? avgValue / count : minMaxValue;
                }
            }
        }
    }
    return output;
}
function maxPool3dPositions(xBuf, convInfo) {
    const maxPositions = (0, _tfjsCore.buffer)(convInfo.outShape, "int32");
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    for(let batch = 0; batch < convInfo.batchSize; ++batch){
        for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth){
            const xDepthCorner = yDepth * strideDepth - padFront;
            let xDepthMin = xDepthCorner;
            while(xDepthMin < 0)xDepthMin += dilationDepth;
            const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
            for(let yRow = 0; yRow < convInfo.outHeight; ++yRow){
                const xRowCorner = yRow * strideHeight - padTop;
                let xRowMin = xRowCorner;
                while(xRowMin < 0)xRowMin += dilationHeight;
                const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                for(let yCol = 0; yCol < convInfo.outWidth; ++yCol){
                    const xColCorner = yCol * strideWidth - padLeft;
                    let xColMin = xColCorner;
                    while(xColMin < 0)xColMin += dilationWidth;
                    const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                    // Shader code begins
                    let maxValue = Number.NEGATIVE_INFINITY;
                    let maxPosition = -1;
                    for(let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth){
                        const wDepth = xDepth - xDepthCorner;
                        for(let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight){
                            const wRow = xRow - xRowCorner;
                            for(let xCol = xColMin; xCol < xColMax; xCol += dilationWidth){
                                const wCol = xCol - xColCorner;
                                const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);
                                if (pixel >= maxValue) {
                                    maxValue = pixel;
                                    maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;
                                }
                            }
                        }
                    }
                    maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);
                }
            }
        }
    }
    return maxPositions;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jT9BP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool3D", ()=>avgPool3D);
parcelHelpers.export(exports, "avgPool3DConfig", ()=>avgPool3DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
function avgPool3D(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { filterSize , strides , pad , dimRoundingMode , dataFormat  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "avgPool3d");
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode, dataFormat);
    const xValues = backend.data.get(x.dataId).values;
    const outBuf = (0, _poolUtils.pool3d)(xValues, x.shape, x.dtype, (0, _tfjsCore.util).computeStrides(x.shape), convInfo, "avg");
    return backend.makeTensorInfo(outBuf.shape, "float32", outBuf.values);
}
const avgPool3DConfig = {
    kernelName: (0, _tfjsCore.AvgPool3D),
    backendName: "cpu",
    kernelFunc: avgPool3D
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hkWqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool3DGrad", ()=>avgPool3DGrad);
parcelHelpers.export(exports, "avgPool3DGradConfig", ()=>avgPool3DGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function avgPool3DGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , input  } = inputs;
    const { filterSize , strides , pad , dimRoundingMode  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        input
    ], "avgPool3DGrad");
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const dx = (0, _tfjsCore.buffer)(input.shape, "float32");
    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
    const dyBuf = backend.bufferSync(dy);
    for(let batch = 0; batch < convInfo.batchSize; ++batch){
        for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth){
            for(let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow)for(let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol){
                // Shader code begins.
                const dyDepthCorner = dxDepth - padFront;
                const dyRowCorner = dxRow - padTop;
                const dyColCorner = dxCol - padLeft;
                let dotProd = 0;
                for(let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth){
                    const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                    if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) continue;
                    for(let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight){
                        const dyRow = (dyRowCorner + wRow) / strideHeight;
                        if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) continue;
                        for(let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth){
                            const dyCol = (dyColCorner + wCol) / strideWidth;
                            if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) continue;
                            const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                            dotProd += pixel;
                        }
                    }
                }
                dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);
            }
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const avgPool3DGradConfig = {
    kernelName: (0, _tfjsCore.AvgPool3DGrad),
    backendName: "cpu",
    kernelFunc: avgPool3DGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BQOw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPoolGrad", ()=>avgPoolGrad);
parcelHelpers.export(exports, "avgPoolGradConfig", ()=>avgPoolGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function avgPoolGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , input  } = inputs;
    const x = input;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        input
    ], "avgPoolGrad");
    const { filterSize , strides , pad  } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad);
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const dx = (0, _tfjsCore.buffer)(x.shape, "float32");
    const avgMultiplier = 1 / (filterHeight * filterWidth);
    const dyData = backend.data.get(dy.dataId).values;
    const dyBuf = (0, _tfjsCore.buffer)(dy.shape, "float32", dyData);
    for(let b = 0; b < convInfo.batchSize; ++b)for(let d = 0; d < convInfo.inChannels; ++d){
        for(let dxR = 0; dxR < convInfo.inHeight; ++dxR)for(let dxC = 0; dxC < convInfo.inWidth; ++dxC){
            // Shader code begins.
            const dyRCorner = dxR - padTop;
            const dyCCorner = dxC - padLeft;
            let dotProd = 0;
            for(let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight){
                const dyR = (dyRCorner + wR) / strideHeight;
                if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) continue;
                for(let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth){
                    const dyC = (dyCCorner + wC) / strideWidth;
                    if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) continue;
                    const pixel = dyBuf.get(b, dyR, dyC, d);
                    dotProd += pixel;
                }
            }
            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const avgPoolGradConfig = {
    kernelName: (0, _tfjsCore.AvgPoolGrad),
    backendName: "cpu",
    kernelFunc: avgPoolGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGJsR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm", ()=>batchNorm);
parcelHelpers.export(exports, "batchNormConfig", ()=>batchNormConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function batchNorm(args) {
    const { inputs , backend , attrs  } = args;
    const { x , scale , offset , mean , variance  } = inputs;
    (0, _tfjsCore.util).assert(mean.shape.length === variance.shape.length, ()=>"Batch normalization gradient requires mean and variance to have equal ranks.");
    (0, _tfjsCore.util).assert(offset == null || mean.shape.length === offset.shape.length, ()=>"Batch normalization gradient requires mean and offset to have equal ranks.");
    (0, _tfjsCore.util).assert(scale == null || mean.shape.length === scale.shape.length, ()=>"Batch normalization gradient requires mean and scale to have equal ranks.");
    (0, _cpuUtil.assertNotComplex)([
        x,
        mean,
        variance,
        scale,
        offset
    ], "batchNorm");
    let { varianceEpsilon  } = attrs;
    if (varianceEpsilon == null) varianceEpsilon = 0.001;
    const xVals = backend.data.get(x.dataId).values;
    const mVals = backend.data.get(mean.dataId).values;
    const varVals = backend.data.get(variance.dataId).values;
    const sVals = scale ? backend.data.get(scale.dataId).values : new Float32Array([
        1
    ]);
    const offVals = offset ? backend.data.get(offset.dataId).values : new Float32Array([
        0
    ]);
    const outVals = new Float32Array(xVals.length);
    const offValsLength = offVals.length;
    const sValsLength = sVals.length;
    const varValsLength = varVals.length;
    const mValsLength = mVals.length;
    let offi = 0;
    let mi = 0;
    let si = 0;
    let vi = 0;
    for(let i = 0; i < xVals.length; ++i){
        outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);
        if (offi >= offValsLength) offi = 0;
        if (mi >= mValsLength) mi = 0;
        if (si >= sValsLength) si = 0;
        if (vi >= varValsLength) vi = 0;
    }
    return backend.makeTensorInfo(x.shape, x.dtype, outVals);
}
const batchNormConfig = {
    kernelName: (0, _tfjsCore.FusedBatchNorm),
    backendName: "cpu",
    kernelFunc: batchNorm
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVLQm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchToSpaceND", ()=>batchToSpaceND);
parcelHelpers.export(exports, "batchToSpaceNDConfig", ()=>batchToSpaceNDConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
var _slice = require("./Slice");
var _transpose = require("./Transpose");
function batchToSpaceND(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { blockShape , crops  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x
    ], "batchToSpaceND");
    const prod = blockShape.reduce((a, b)=>a * b);
    const reshaped = (0, _tfjsCore.backend_util).getReshaped(x.shape, blockShape, prod);
    const permuted = (0, _tfjsCore.backend_util).getPermuted(reshaped.length, blockShape.length);
    const reshapedPermuted = (0, _tfjsCore.backend_util).getReshapedPermuted(x.shape, blockShape, prod);
    const sliceBeginCoords = (0, _tfjsCore.backend_util).getSliceBeginCoords(crops, blockShape.length);
    const sliceSize = (0, _tfjsCore.backend_util).getSliceSize(reshapedPermuted, crops, blockShape.length);
    const xReshaped = (0, _reshape.reshape)({
        inputs: {
            x
        },
        backend,
        attrs: {
            shape: reshaped
        }
    });
    const xTransposed = (0, _transpose.transpose)({
        inputs: {
            x: xReshaped
        },
        backend,
        attrs: {
            perm: permuted
        }
    });
    const xTransposedReshaped = (0, _reshape.reshape)({
        inputs: {
            x: xTransposed
        },
        backend,
        attrs: {
            shape: reshapedPermuted
        }
    });
    const result = (0, _slice.slice)({
        inputs: {
            x: xTransposedReshaped
        },
        backend,
        attrs: {
            begin: sliceBeginCoords,
            size: sliceSize
        }
    });
    backend.disposeIntermediateTensorInfo(xReshaped);
    backend.disposeIntermediateTensorInfo(xTransposed);
    backend.disposeIntermediateTensorInfo(xTransposedReshaped);
    return result;
}
const batchToSpaceNDConfig = {
    kernelName: (0, _tfjsCore.BatchToSpaceND),
    backendName: "cpu",
    kernelFunc: batchToSpaceND
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","./Slice":"gvcFv","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gvcFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sliceImpl", ()=>sliceImpl);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "sliceConfig", ()=>sliceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function sliceImpl(vals, begin, size, shape, dtype) {
    const isContinous = (0, _tfjsCore.slice_util).isSliceContinous(shape, begin, size);
    const length = (0, _tfjsCore.util).sizeFromShape(size);
    const xStrides = (0, _tfjsCore.util).computeStrides(shape);
    if (isContinous) {
        const flatOffset = (0, _tfjsCore.slice_util).computeFlatOffset(begin, xStrides);
        if (dtype === "string") return vals.slice(flatOffset, flatOffset + length);
        return vals.subarray(flatOffset, flatOffset + length);
    }
    const decodedData = dtype === "string" ? (0, _tfjsCore.backend_util).fromUint8ToStringArray(vals) : vals;
    const inBuf = (0, _tfjsCore.buffer)(shape, dtype, decodedData);
    const outBuf = (0, _tfjsCore.buffer)(size, dtype);
    for(let i = 0; i < outBuf.size; ++i){
        const outLoc = outBuf.indexToLoc(i);
        const inLoc = outLoc.map((idx, j)=>idx + begin[j]);
        outBuf.set(inBuf.get(...inLoc), ...outLoc);
    }
    if (dtype === "string") return (0, _tfjsCore.backend_util).fromStringArrayToUint8(outBuf.values);
    return outBuf.values;
}
function slice(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { begin , size  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "slice");
    const [$begin, $size] = (0, _tfjsCore.slice_util).parseSliceParams(x, begin, size);
    (0, _tfjsCore.slice_util).assertParamsValid(x, $begin, $size);
    const vals = backend.data.get(x.dataId).values;
    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);
    return backend.makeTensorInfo($size, x.dtype, outVals);
}
const sliceConfig = {
    kernelName: (0, _tfjsCore.Slice),
    backendName: "cpu",
    kernelFunc: slice
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diXIe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bincount", ()=>bincount);
parcelHelpers.export(exports, "bincountConfig", ()=>bincountConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _bincountImpl = require("./Bincount_impl");
function bincount(args) {
    const { inputs , backend , attrs  } = args;
    const { x , weights  } = inputs;
    const { size  } = attrs;
    const xVals = backend.data.get(x.dataId).values;
    const weightsVals = backend.data.get(weights.dataId).values;
    const outVals = (0, _bincountImpl.bincountImpl)(xVals, weightsVals, weights.dtype, weights.shape, size);
    return backend.makeTensorInfo([
        size
    ], weights.dtype, outVals);
}
const bincountConfig = {
    kernelName: (0, _tfjsCore.Bincount),
    backendName: "cpu",
    kernelFunc: bincount
};

},{"@tensorflow/tfjs-core":"2votT","./Bincount_impl":"iPuVl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPuVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bincountImpl", ()=>bincountImpl);
parcelHelpers.export(exports, "bincountReduceImpl", ()=>bincountReduceImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {
    const weightsSize = (0, _tfjsCore.util).sizeFromShape(weightsShape);
    const outVals = (0, _tfjsCore.util).makeZerosTypedArray(size, weightsDtype);
    for(let i = 0; i < xVals.length; i++){
        const value = xVals[i];
        if (value < 0) throw new Error("Input x must be non-negative!");
        if (value >= size) continue;
        if (weightsSize > 0) outVals[value] += weightsVals[i];
        else outVals[value] += 1;
    }
    return outVals;
}
function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {
    const numRows = xBuf.shape[0];
    const numCols = xBuf.shape[1];
    const outBuf = (0, _tfjsCore.buffer)([
        numRows,
        size
    ], weightsBuf.dtype);
    for(let i = 0; i < numRows; i++)for(let j = 0; j < numCols; j++){
        const value = xBuf.get(i, j);
        if (value < 0) throw new Error("Input x must be non-negative!");
        if (value >= size) continue;
        if (binaryOutput) outBuf.set(1, i, value);
        else if (weightsBuf.size > 0) outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);
        else outBuf.set(outBuf.get(i, value) + 1, i, value);
    }
    return outBuf;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hrlWy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastArgs", ()=>broadcastArgs);
parcelHelpers.export(exports, "broadcastArgsConfig", ()=>broadcastArgsConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function broadcastArgs(args) {
    const { inputs , backend  } = args;
    const { s0 , s1  } = inputs;
    const s0Vals = backend.data.get(s0.dataId).values;
    const s1Vals = backend.data.get(s1.dataId).values;
    const broadcastShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
    return backend.makeTensorInfo([
        broadcastShape.length
    ], "int32", Int32Array.from(broadcastShape));
}
const broadcastArgsConfig = {
    kernelName: (0, _tfjsCore.BroadcastArgs),
    backendName: "cpu",
    kernelFunc: broadcastArgs
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2laFa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ceilImpl", ()=>ceilImpl);
parcelHelpers.export(exports, "ceil", ()=>ceil);
parcelHelpers.export(exports, "ceilConfig", ()=>ceilConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const ceilImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.ceil(xi));
const ceil = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Ceil), ceilImpl);
const ceilConfig = {
    kernelName: (0, _tfjsCore.Ceil),
    backendName: "cpu",
    kernelFunc: ceil
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"glBpf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clipByValue", ()=>clipByValue);
parcelHelpers.export(exports, "clipByValueConfig", ()=>clipByValueConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const clipByValue = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.ClipByValue), (xi, attrs)=>{
    const clipAttrs = attrs;
    if (xi > clipAttrs.clipValueMax) return clipAttrs.clipValueMax;
    return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;
});
const clipByValueConfig = {
    kernelName: (0, _tfjsCore.ClipByValue),
    backendName: "cpu",
    kernelFunc: clipByValue
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4INDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complexAbs", ()=>complexAbs);
parcelHelpers.export(exports, "complexAbsConfig", ()=>complexAbsConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const complexAbs = (args)=>{
    const { x  } = args.inputs;
    const cpuBackend = args.backend;
    const resultValues = new Float32Array((0, _tfjsCore.util).sizeFromShape(x.shape));
    const complexVals = cpuBackend.data.get(x.dataId);
    const real = complexVals.complexTensorInfos.real;
    const imag = complexVals.complexTensorInfos.imag;
    const realVals = cpuBackend.data.get(real.dataId).values;
    const imagVals = cpuBackend.data.get(imag.dataId).values;
    for(let i = 0; i < realVals.length; i++){
        const real1 = realVals[i];
        const imag1 = imagVals[i];
        resultValues[i] = Math.hypot(real1, imag1);
    }
    return cpuBackend.makeOutput(resultValues, x.shape, "float32");
};
const complexAbsConfig = {
    kernelName: (0, _tfjsCore.ComplexAbs),
    backendName: "cpu",
    kernelFunc: complexAbs
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wEpn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "concatConfig", ()=>concatConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _complex = require("./Complex");
var _concatImpl = require("./Concat_impl");
var _identity = require("./Identity");
var _imag = require("./Imag");
var _real = require("./Real");
var _reshape = require("./Reshape");
function concat(args) {
    const { inputs , backend , attrs  } = args;
    const { axis  } = attrs;
    const $axis = (0, _tfjsCore.util).parseAxisParam(axis, inputs[0].shape)[0];
    let outShape = (0, _tfjsCore.backend_util).computeOutShape(inputs.map((t)=>t.shape), $axis);
    if ((0, _tfjsCore.util).sizeFromShape(outShape) === 0) return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
    // Keep only non-empty tensors (ignore tensors with 0 in their shape).
    const $inputs = inputs.filter((t)=>(0, _tfjsCore.util).sizeFromShape(t.shape) > 0);
    if ($inputs.length === 1) return (0, _identity.identity)({
        inputs: {
            x: $inputs[0]
        },
        backend
    });
    const shapes = $inputs.map((t)=>t.shape);
    (0, _tfjsCore.backend_util).assertParamsConsistent(shapes, $axis);
    if ($inputs[0].dtype === "complex64") {
        const reals = $inputs.map((t)=>(0, _real.real)({
                inputs: {
                    input: t
                },
                backend
            }));
        const imags = $inputs.map((t)=>(0, _imag.imag)({
                inputs: {
                    input: t
                },
                backend
            }));
        const realConcated = concat({
            inputs: reals,
            backend,
            attrs: {
                axis: $axis
            }
        });
        const imagConcated = concat({
            inputs: imags,
            backend,
            attrs: {
                axis: $axis
            }
        });
        const result = (0, _complex.complex)({
            inputs: {
                real: realConcated,
                imag: imagConcated
            },
            backend
        });
        reals.forEach((r)=>backend.disposeIntermediateTensorInfo(r));
        imags.forEach((i)=>backend.disposeIntermediateTensorInfo(i));
        backend.disposeIntermediateTensorInfo(realConcated);
        backend.disposeIntermediateTensorInfo(imagConcated);
        return result;
    }
    // Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.
    const inputs2D = $inputs.map((t)=>{
        const innerSize = (0, _tfjsCore.util).sizeFromShape(t.shape.slice($axis));
        const shape = [
            -1,
            innerSize
        ];
        return (0, _reshape.reshape)({
            inputs: {
                x: t
            },
            backend,
            attrs: {
                shape
            }
        });
    });
    const inputsValShapes = inputs2D.map((t)=>{
        return {
            vals: backend.data.get(t.dataId).values,
            shape: t.shape
        };
    });
    // Concats 2d tensors along axis=1.
    outShape = (0, _tfjsCore.backend_util).computeOutShape(inputs2D.map((t)=>t.shape), 1 /* axis */ );
    const simplyConcat = inputs2D[0].shape[0] === 1;
    const outVals = (0, _concatImpl.concatImpl)(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);
    const finalOutShape = (0, _tfjsCore.backend_util).computeOutShape($inputs.map((t)=>t.shape), $axis);
    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);
    inputs2D.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return outInfo;
}
const concatConfig = {
    kernelName: (0, _tfjsCore.Concat),
    backendName: "cpu",
    kernelFunc: concat
};

},{"@tensorflow/tfjs-core":"2votT","./Complex":"ihUM4","./Concat_impl":"j8xJI","./Identity":"9BGOC","./Imag":"jPu41","./Real":"8fguZ","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8xJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatImpl", ()=>concatImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function concatImpl(inputs, outShape, dtype, simplyConcat) {
    const outVals = (0, _tfjsCore.util).getArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(outShape));
    if (simplyConcat && dtype !== "string") {
        // Use built-in TypedArray.set() method for speed.
        let offset = 0;
        inputs.forEach((input)=>{
            const size = (0, _tfjsCore.util).sizeFromShape(input.shape);
            outVals.set(input.vals, offset);
            offset += size;
        });
    } else {
        let colOffset = 0;
        inputs.forEach((input)=>{
            const decodedData = dtype === "string" ? (0, _tfjsCore.backend_util).fromUint8ToStringArray(input.vals) : input.vals;
            let tIdx = 0;
            for(let row = 0; row < input.shape[0]; ++row){
                const resIdx = row * outShape[1] + colOffset;
                for(let col = 0; col < input.shape[1]; ++col)outVals[resIdx + col] = decodedData[tIdx++];
            }
            colOffset += input.shape[1];
        });
    }
    return outVals;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jPu41":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "imag", ()=>imag);
parcelHelpers.export(exports, "imagConfig", ()=>imagConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function imag(args) {
    const { inputs , backend  } = args;
    const { input  } = inputs;
    const imag = backend.data.get(input.dataId).complexTensorInfos.imag;
    const imagVal = backend.data.get(imag.dataId).values;
    // When complex tensor is disposed, its underlying parts will be disposed too.
    // Make new tensor out of the imag value of the complex. This makes sure the
    // value is still accessible even if complex tensor is disposed.
    return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);
}
const imagConfig = {
    kernelName: (0, _tfjsCore.Imag),
    backendName: "cpu",
    kernelFunc: imag
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"13rOl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2D", ()=>conv2D);
parcelHelpers.export(exports, "conv2DConfig", ()=>conv2DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv2D(args) {
    const { inputs , backend , attrs  } = args;
    const { x , filter  } = inputs;
    const { strides , pad , dataFormat , dilations , dimRoundingMode  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        filter
    ], "conv2d");
    const $dataFormat = (0, _tfjsCore.backend_util).convertConv2DDataFormat(dataFormat);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const padLeft = convInfo.padInfo.left;
    const padTop = convInfo.padInfo.top;
    const isChannelsLast = convInfo.dataFormat === "channelsLast";
    const y = new (0, _tfjsCore.TensorBuffer)(convInfo.outShape, x.dtype);
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    const xBatchStride = xStrides[0];
    const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];
    const xColStride = isChannelsLast ? xStrides[2] : 1;
    const xChannelStride = isChannelsLast ? 1 : xStrides[1];
    const yBatchStride = y.strides[0];
    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];
    const yColStride = isChannelsLast ? y.strides[2] : 1;
    const yChannelStride = isChannelsLast ? 1 : y.strides[1];
    const xVals = backend.data.get(x.dataId).values;
    const wVals = backend.data.get(filter.dataId).values;
    const yVals = y.values;
    for(let b = 0; b < convInfo.batchSize; ++b){
        const xOffset1 = b * xBatchStride;
        const yOffset1 = b * yBatchStride;
        for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const yOffset2 = yOffset1 + yR * yRowStride;
            const xRCorner = yR * convInfo.strideHeight - padTop;
            for(let wR = 0; wR < filterHeight; ++wR){
                const xR = xRCorner + wR * dilationHeight;
                if (xR < 0 || xR >= convInfo.inHeight) continue;
                const wOffset1 = wR * filterStrides[0];
                const xOffset2 = xOffset1 + xR * xRowStride;
                for(let yC = 0; yC < convInfo.outWidth; ++yC){
                    const yOffset3 = yOffset2 + yC * yColStride;
                    const xCCorner = yC * convInfo.strideWidth - padLeft;
                    for(let wC = 0; wC < filterWidth; ++wC){
                        const xC = xCCorner + wC * dilationWidth;
                        if (xC < 0 || xC >= convInfo.inWidth) continue;
                        const wOffset2 = wOffset1 + wC * filterStrides[1];
                        const xOffset3 = xOffset2 + xC * xColStride;
                        let wOffset3 = wOffset2;
                        for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                            const xVal = xVals[xOffset3 + d1 * xChannelStride];
                            for(let d2 = 0; d2 < convInfo.outChannels; ++d2)yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];
                            wOffset3 += convInfo.outChannels;
                        }
                    }
                }
            }
        }
    }
    return backend.makeTensorInfo(y.shape, y.dtype, yVals);
}
const conv2DConfig = {
    kernelName: (0, _tfjsCore.Conv2D),
    backendName: "cpu",
    kernelFunc: conv2D
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8LOW1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropFilter", ()=>conv2DBackpropFilter);
parcelHelpers.export(exports, "conv2DBackpropFilterConfig", ()=>conv2DBackpropFilterConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv2DBackpropFilter(args) {
    const { inputs , backend , attrs  } = args;
    const { x , dy  } = inputs;
    const { strides , pad , dataFormat , dimRoundingMode , filterShape  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        dy
    ], "conv2dBackpropFilter");
    const $dataFormat = (0, _tfjsCore.backend_util).convertConv2DDataFormat(dataFormat);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */ , pad, dimRoundingMode, false, $dataFormat);
    const { strideHeight , strideWidth , filterHeight , filterWidth  } = convInfo;
    const isChannelsLast = convInfo.dataFormat === "channelsLast";
    const dW = new (0, _tfjsCore.TensorBuffer)(convInfo.filterShape, "float32");
    const leftPad = convInfo.padInfo.left;
    const topPad = convInfo.padInfo.top;
    const xVals = backend.data.get(x.dataId).values;
    const dyVals = backend.data.get(dy.dataId).values;
    const xBuf = new (0, _tfjsCore.TensorBuffer)(x.shape, x.dtype, xVals);
    const dyBuf = new (0, _tfjsCore.TensorBuffer)(dy.shape, dy.dtype, dyVals);
    for(let wR = 0; wR < filterHeight; ++wR){
        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
        for(let wC = 0; wC < filterWidth; ++wC){
            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
            for(let d1 = 0; d1 < convInfo.inChannels; ++d1)for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                let dotProd = 0;
                for(let b = 0; b < convInfo.batchSize; ++b)for(let yR = yRMin; yR < yRMax; ++yR){
                    const xR = wR + yR * strideHeight - topPad;
                    for(let yC = yCMin; yC < yCMax; ++yC){
                        const xC = wC + yC * strideWidth - leftPad;
                        if (isChannelsLast) dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
                        else dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);
                    }
                }
                dW.set(dotProd, wR, wC, d1, d2);
            }
        }
    }
    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
}
const conv2DBackpropFilterConfig = {
    kernelName: (0, _tfjsCore.Conv2DBackpropFilter),
    backendName: "cpu",
    kernelFunc: conv2DBackpropFilter
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUbt4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropInput", ()=>conv2DBackpropInput);
parcelHelpers.export(exports, "conv2DBackpropInputConfig", ()=>conv2DBackpropInputConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv2DBackpropInput(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , filter  } = inputs;
    const { inputShape , strides , pad , dataFormat , dimRoundingMode  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        filter
    ], "conv2dBackpropInput");
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    let $dataFormat = (0, _tfjsCore.backend_util).convertConv2DDataFormat(dataFormat);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */ , pad, dimRoundingMode, false, $dataFormat);
    const dx = new (0, _tfjsCore.TensorBuffer)(convInfo.inShape, "float32");
    const dxValues = dx.values;
    const dyValues = backend.data.get(dy.dataId).values;
    const fltValues = backend.data.get(filter.dataId).values;
    const [fltS0, fltS1, fltS2] = filterStrides;
    const { batchSize , filterHeight , filterWidth , inChannels , inHeight , inWidth , outChannels , outHeight , outWidth , strideHeight , strideWidth  } = convInfo;
    $dataFormat = convInfo.dataFormat;
    const topPad = filterHeight - 1 - convInfo.padInfo.top;
    const leftPad = filterWidth - 1 - convInfo.padInfo.left;
    const isChannelsLast = $dataFormat === "channelsLast";
    const xBatchStride = dx.strides[0];
    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];
    const xColStride = isChannelsLast ? dx.strides[2] : 1;
    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];
    const yBatchStride = dyStrides[0];
    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];
    const yColStride = isChannelsLast ? dyStrides[2] : 1;
    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];
    for(let b = 0; b < batchSize; ++b){
        for(let d1 = 0; d1 < inChannels; ++d1)for(let xR = 0; xR < inHeight; ++xR){
            const xRCorner = xR - topPad;
            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
            const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
            for(let xC = 0; xC < inWidth; ++xC){
                const xCCorner = xC - leftPad;
                const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                let dotProd = 0;
                for(let yR = xRMin; yR < yRMax; ++yR){
                    const wR = yR * strideHeight - xRCorner;
                    for(let yC = xCMin; yC < yCMax; ++yC){
                        const wC = yC * strideWidth - xCCorner;
                        const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;
                        const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                        for(let d2 = 0; d2 < outChannels; ++d2){
                            const pixel = dyValues[dyOffset + yChannelStride * d2];
                            const weight = fltValues[fltOffset + d2];
                            dotProd += pixel * weight;
                        }
                    }
                }
                const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;
                dxValues[dxOffset] = dotProd;
            }
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const conv2DBackpropInputConfig = {
    kernelName: (0, _tfjsCore.Conv2DBackpropInput),
    backendName: "cpu",
    kernelFunc: conv2DBackpropInput
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fFsS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3D", ()=>conv3D);
parcelHelpers.export(exports, "conv3DConfig", ()=>conv3DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv3D(args) {
    const { inputs , backend , attrs  } = args;
    const { x , filter  } = inputs;
    const { strides , pad , dilations  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        filter
    ], "conv3d");
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
    const { filterDepth , filterHeight , filterWidth , dilationDepth , dilationHeight , dilationWidth , padInfo  } = convInfo;
    const padFront = padInfo.front;
    const padLeft = padInfo.left;
    const padTop = padInfo.top;
    const y = new (0, _tfjsCore.TensorBuffer)(convInfo.outShape, x.dtype);
    const xVals = backend.data.get(x.dataId).values;
    const wVals = backend.data.get(filter.dataId).values;
    const yVals = y.values;
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    for(let b = 0; b < convInfo.batchSize; ++b){
        const xOffset1 = b * xStrides[0];
        const yOffset1 = b * y.strides[0];
        for(let yF = 0; yF < convInfo.outDepth; ++yF){
            const yOffset2 = yOffset1 + yF * y.strides[1];
            const xFCorner = yF * convInfo.strideDepth - padFront;
            for(let wF = 0; wF < filterDepth; ++wF){
                const xF = xFCorner + wF * dilationDepth;
                if (xF < 0 || xF >= convInfo.inDepth) continue;
                const wOffset1 = wF * filterStrides[0];
                const xOffset2 = xOffset1 + xF * xStrides[1];
                for(let yR = 0; yR < convInfo.outHeight; ++yR){
                    const yOffset3 = yOffset2 + yR * y.strides[2];
                    const xRCorner = yR * convInfo.strideHeight - padTop;
                    for(let wR = 0; wR < filterHeight; ++wR){
                        const xR = xRCorner + wR * dilationHeight;
                        if (xR < 0 || xR >= convInfo.inHeight) continue;
                        const wOffset2 = wOffset1 + wR * filterStrides[1];
                        const xOffset3 = xOffset2 + xR * xStrides[2];
                        for(let yC = 0; yC < convInfo.outWidth; ++yC){
                            const yOffset4 = yOffset3 + yC * convInfo.outChannels;
                            const xCCorner = yC * convInfo.strideWidth - padLeft;
                            for(let wC = 0; wC < filterWidth; ++wC){
                                const xC = xCCorner + wC * dilationWidth;
                                if (xC < 0 || xC >= convInfo.inWidth) continue;
                                const wOffset3 = wOffset2 + wC * filterStrides[2];
                                const xOffset4 = xOffset3 + xC * convInfo.inChannels;
                                let wOffset4 = wOffset3;
                                for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                                    const xVal = xVals[xOffset4 + d1];
                                    for(let d2 = 0; d2 < convInfo.outChannels; ++d2)yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];
                                    wOffset4 += convInfo.outChannels;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return backend.makeTensorInfo(y.shape, y.dtype, y.values);
}
const conv3DConfig = {
    kernelName: (0, _tfjsCore.Conv3D),
    backendName: "cpu",
    kernelFunc: conv3D
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ewbj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropFilterV2", ()=>conv3DBackpropFilterV2);
parcelHelpers.export(exports, "conv3DBackpropFilterV2Config", ()=>conv3DBackpropFilterV2Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv3DBackpropFilterV2(args) {
    const { inputs , backend , attrs  } = args;
    const { x , dy  } = inputs;
    const { strides , pad , filterShape  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        dy
    ], "conv3dBackpropFilterV2");
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */ , pad);
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const dw = new (0, _tfjsCore.TensorBuffer)(convInfo.filterShape, "float32");
    const dwValues = dw.values;
    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;
    const dyValues = backend.data.get(dy.dataId).values;
    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
    const xValues = backend.data.get(x.dataId).values;
    const [xS0, xS1, xS2, xS3] = xStrides;
    const frontPad = convInfo.padInfo.front;
    const leftPad = convInfo.padInfo.left;
    const topPad = convInfo.padInfo.top;
    for(let wF = 0; wF < filterDepth; ++wF){
        const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));
        const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);
        const wOffset1 = wF * dwS0;
        for(let wR = 0; wR < filterHeight; ++wR){
            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            const wOffset2 = wR * dwS1 + wOffset1;
            for(let wC = 0; wC < filterWidth; ++wC){
                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                const wOffset3 = wC * dwS2 + wOffset2;
                for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                    const wOffset4 = d1 * dwS3 + wOffset3;
                    for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                        let dotProd = 0;
                        for(let b = 0; b < convInfo.batchSize; ++b){
                            const xOffset1 = b * xS0;
                            const yOffset1 = b * dyS0;
                            for(let yF = yFMin; yF < yFMax; ++yF){
                                const xF = wF + yF * strideDepth - frontPad;
                                const xOffset2 = xF * xS1 + xOffset1;
                                const yOffset2 = yF * dyS1 + yOffset1;
                                for(let yR = yRMin; yR < yRMax; ++yR){
                                    const xR = wR + yR * strideHeight - topPad;
                                    const xOffset3 = xR * xS2 + xOffset2;
                                    const yOffset3 = yR * dyS2 + yOffset2;
                                    for(let yC = yCMin; yC < yCMax; ++yC){
                                        const xC = wC + yC * strideWidth - leftPad;
                                        const xOffset4 = xC * xS3 + xOffset3;
                                        const yOffset4 = yC * dyS3 + yOffset3;
                                        dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];
                                    }
                                }
                            }
                        }
                        dwValues[wOffset4 + d2] = dotProd;
                    }
                }
            }
        }
    }
    return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);
}
const conv3DBackpropFilterV2Config = {
    kernelName: (0, _tfjsCore.Conv3DBackpropFilterV2),
    backendName: "cpu",
    kernelFunc: conv3DBackpropFilterV2
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqd30":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropInputV2", ()=>conv3DBackpropInputV2);
parcelHelpers.export(exports, "conv3DBackpropInputV2Config", ()=>conv3DBackpropInputV2Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function conv3DBackpropInputV2(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , filter  } = inputs;
    const { pad , strides , inputShape  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy
    ], "conv3dBackpropInputV2");
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */ , pad);
    const dx = new (0, _tfjsCore.TensorBuffer)(convInfo.inShape, "float32");
    const dxValues = dx.values;
    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;
    const dyValues = backend.data.get(dy.dataId).values;
    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
    const fltValues = backend.data.get(filter.dataId).values;
    const [fltS0, fltS1, fltS2, fltS3] = filterStrides;
    const { batchSize , filterDepth , filterHeight , filterWidth , inChannels , inDepth , inHeight , inWidth , outChannels , outDepth , outHeight , outWidth , strideDepth , strideHeight , strideWidth  } = convInfo;
    const frontPad = filterDepth - 1 - convInfo.padInfo.front;
    const topPad = filterHeight - 1 - convInfo.padInfo.top;
    const leftPad = filterWidth - 1 - convInfo.padInfo.left;
    for(let b = 0; b < batchSize; ++b){
        for(let d1 = 0; d1 < inChannels; ++d1)// Frames of depth
        for(let xF = 0; xF < inDepth; ++xF){
            const xFCorner = xF - frontPad;
            const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));
            const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);
            // Rows as per standard 2d matrix notation
            for(let xR = 0; xR < inHeight; ++xR){
                const xRCorner = xR - topPad;
                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                // Columns as per standard 2d matrix notation
                for(let xC = 0; xC < inWidth; ++xC){
                    const xCCorner = xC - leftPad;
                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                    let dotProd = 0;
                    for(let yF = xFMin; yF < yFMax; ++yF){
                        const wF = yF * strideDepth - xFCorner;
                        for(let yR = xRMin; yR < yRMax; ++yR){
                            const wR = yR * strideHeight - xRCorner;
                            for(let yC = xCMin; yC < yCMax; ++yC){
                                const wC = yC * strideWidth - xCCorner;
                                const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;
                                const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;
                                for(let d2 = 0; d2 < outChannels; ++d2){
                                    const pixel = dyValues[dyOffset + d2];
                                    const weight = fltValues[fltOffset + d2];
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                    }
                    dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;
                }
            }
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const conv3DBackpropInputV2Config = {
    kernelName: (0, _tfjsCore.Conv3DBackpropInputV2),
    backendName: "cpu",
    kernelFunc: conv3DBackpropInputV2
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKXGp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "cosConfig", ()=>cosConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const cos = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Cos), (xi)=>Math.cos(xi));
const cosConfig = {
    kernelName: (0, _tfjsCore.Cos),
    backendName: "cpu",
    kernelFunc: cos
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IH4N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosh", ()=>cosh);
parcelHelpers.export(exports, "coshConfig", ()=>coshConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const cosh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Cosh), (xi)=>Math.cosh(xi));
const coshConfig = {
    kernelName: (0, _tfjsCore.Cosh),
    backendName: "cpu",
    kernelFunc: cosh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1S3IR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cropAndResize", ()=>cropAndResize);
parcelHelpers.export(exports, "cropAndResizeConfig", ()=>cropAndResizeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function cropAndResize(args) {
    const { inputs , backend , attrs  } = args;
    const { image , boxes , boxInd  } = inputs;
    const { cropSize , method , extrapolationValue  } = attrs;
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const numBoxes = boxes.shape[0];
    const [cropHeight, cropWidth] = cropSize;
    const output = (0, _tfjsCore.buffer)([
        numBoxes,
        cropHeight,
        cropWidth,
        numChannels
    ], "float32");
    const boxVals = backend.data.get(boxes.dataId).values;
    const boxIndVals = backend.data.get(boxInd.dataId).values;
    const imageVals = backend.data.get(image.dataId).values;
    const inStride = (0, _tfjsCore.util).computeStrides(image.shape); // to calculate flat indexes into image
    const outStride = (0, _tfjsCore.util).computeStrides(output.shape); // to calculate flat indexes into output
    // Reference implementation
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc
    for(let b = 0; b < numBoxes; b++){
        const startInd = b * 4;
        const y1 = boxVals[startInd];
        const x1 = boxVals[startInd + 1];
        const y2 = boxVals[startInd + 2];
        const x2 = boxVals[startInd + 3];
        const bInd = boxIndVals[b];
        if (bInd >= batch) continue;
        const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;
        const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;
        for(let y = 0; y < cropHeight; y++){
            const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);
            if (yInd < 0 || yInd > imageHeight - 1) {
                for(let x = 0; x < cropWidth; x++)for(let c = 0; c < numChannels; c++){
                    const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                    output.values[ind] = extrapolationValue;
                }
                continue;
            }
            if (method === "bilinear") {
                const topInd = Math.floor(yInd);
                const bottomInd = Math.ceil(yInd);
                const yLerp = yInd - topInd;
                for(let x3 = 0; x3 < cropWidth; x3++){
                    const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x3 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
                    if (xInd < 0 || xInd > imageWidth - 1) {
                        for(let c1 = 0; c1 < numChannels; c1++){
                            const ind1 = c1 + x3 * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[ind1] = extrapolationValue;
                        }
                        continue;
                    }
                    const leftInd = Math.floor(xInd);
                    const rightInd = Math.ceil(xInd);
                    const xLerp = xInd - leftInd;
                    for(let c2 = 0; c2 < numChannels; c2++){
                        let ind2 = c2 + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
                        const topLeft = imageVals[ind2];
                        ind2 = c2 + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
                        const topRight = imageVals[ind2];
                        ind2 = c2 + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
                        const bottomLeft = imageVals[ind2];
                        ind2 = c2 + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
                        const bottomRight = imageVals[ind2];
                        const top = topLeft + (topRight - topLeft) * xLerp;
                        const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;
                        ind2 = c2 + x3 * outStride[2] + y * outStride[1] + b * outStride[0];
                        output.values[ind2] = top + (bottom - top) * yLerp;
                    }
                }
            } else for(let x4 = 0; x4 < cropWidth; ++x4){
                const xInd1 = cropWidth > 1 ? x1 * (imageWidth - 1) + x4 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
                if (xInd1 < 0 || xInd1 > imageWidth - 1) {
                    for(let c3 = 0; c3 < numChannels; c3++){
                        const ind3 = c3 + x4 * outStride[2] + y * outStride[1] + b * outStride[0];
                        output.values[ind3] = extrapolationValue;
                    }
                    continue;
                }
                const closestX = Math.round(xInd1);
                const closestY = Math.round(yInd);
                for(let c4 = 0; c4 < numChannels; c4++){
                    const inInd = c4 + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];
                    const outInd = c4 + x4 * outStride[2] + y * outStride[1] + b * outStride[0];
                    output.values[outInd] = imageVals[inInd];
                }
            }
        }
    }
    return backend.makeTensorInfo(output.shape, output.dtype, output.values);
}
const cropAndResizeConfig = {
    kernelName: (0, _tfjsCore.CropAndResize),
    backendName: "cpu",
    kernelFunc: cropAndResize
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"04WrV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumprod", ()=>cumprod);
parcelHelpers.export(exports, "cumprodConfig", ()=>cumprodConfig);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transpose = require("./Transpose");
function cumprod(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , exclusive , reverse  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "cumprod");
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation([
        axis
    ], x.shape.length);
    let $x = x;
    if (permutation != null) $x = (0, _transpose.transpose)({
        inputs: {
            x
        },
        backend,
        attrs: {
            perm: permutation
        }
    });
    const permutedAxis = (0, _tfjsCore.backend_util).getInnerMostAxes(1, x.shape.length)[0];
    if (permutedAxis !== $x.shape.length - 1) throw new Error(`backend.cumprod in CPU expects an inner-most ` + `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);
    const resultDtype = (0, _tfjsCore.upcastType)($x.dtype, "int32");
    const vals = (0, _tfjsCore.util).makeOnesTypedArray((0, _tfjsCore.util).sizeFromShape($x.shape), resultDtype);
    const aVals = backend.data.get($x.dataId).values;
    const finalDim = $x.shape[$x.shape.length - 1];
    const indexAdjuster = reverse ? (i, j)=>i + finalDim - j - 1 : (i, j)=>i + j;
    for(let i = 0; i < aVals.length; i += finalDim)for(let j = 0; j < finalDim; j++){
        const idx = indexAdjuster(i, j);
        if (j === 0) vals[idx] = exclusive ? 1 : aVals[idx];
        else {
            const prevIdx = indexAdjuster(i, j - 1);
            vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] : aVals[idx] * vals[prevIdx];
        }
    }
    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);
    if (permutation != null) {
        const reversePermutation = (0, _tfjsCore.backend_util).getUndoAxesPermutation(permutation);
        const reverseTransposedResult = (0, _transpose.transpose)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                perm: reversePermutation
            }
        });
        backend.disposeIntermediateTensorInfo(result);
        backend.disposeIntermediateTensorInfo($x);
        return reverseTransposedResult;
    }
    return result;
}
const cumprodConfig = {
    kernelName: (0, _tfjsCore.Cumprod),
    backendName: "cpu",
    kernelFunc: cumprod
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNgeK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumsum", ()=>cumsum);
parcelHelpers.export(exports, "cumsumConfig", ()=>cumsumConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transpose = require("./Transpose");
function cumsum(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , exclusive , reverse  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "cumsum");
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation([
        axis
    ], x.shape.length);
    let $x = x;
    if (permutation != null) $x = (0, _transpose.transpose)({
        inputs: {
            x
        },
        backend,
        attrs: {
            perm: permutation
        }
    });
    const permutedAxis = (0, _tfjsCore.backend_util).getInnerMostAxes(1, x.shape.length)[0];
    if (permutedAxis !== $x.shape.length - 1) throw new Error(`backend.cumsum in CPU expects an inner-most ` + `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);
    const resultDtype = (0, _tfjsCore.upcastType)($x.dtype, "int32");
    const vals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape($x.shape), resultDtype);
    const aVals = backend.data.get($x.dataId).values;
    const finalDim = $x.shape[$x.shape.length - 1];
    const indexAdjuster = reverse ? (i, j)=>i + finalDim - j - 1 : (i, j)=>i + j;
    for(let i = 0; i < aVals.length; i += finalDim)for(let j = 0; j < finalDim; j++){
        const idx = indexAdjuster(i, j);
        if (j === 0) vals[idx] = exclusive ? 0 : aVals[idx];
        else {
            const prevIdx = indexAdjuster(i, j - 1);
            vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];
        }
    }
    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);
    if (permutation != null) {
        const reversePermutation = (0, _tfjsCore.backend_util).getUndoAxesPermutation(permutation);
        const reverseTransposedResult = (0, _transpose.transpose)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                perm: reversePermutation
            }
        });
        backend.disposeIntermediateTensorInfo(result);
        backend.disposeIntermediateTensorInfo($x);
        return reverseTransposedResult;
    }
    return result;
}
const cumsumConfig = {
    kernelName: (0, _tfjsCore.Cumsum),
    backendName: "cpu",
    kernelFunc: cumsum
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eWoF6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "denseBincount", ()=>denseBincount);
parcelHelpers.export(exports, "denseBincountConfig", ()=>denseBincountConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _bincountImpl = require("./Bincount_impl");
function denseBincount(args) {
    const { inputs , backend , attrs  } = args;
    const { x , weights  } = inputs;
    const { size , binaryOutput  } = attrs;
    if (x.shape.length === 1) {
        const xVals = backend.data.get(x.dataId).values;
        const weightsVals = backend.data.get(weights.dataId).values;
        const outVals = (0, _bincountImpl.bincountImpl)(xVals, weightsVals, weights.dtype, weights.shape, size);
        return backend.makeTensorInfo([
            size
        ], weights.dtype, outVals);
    } else if (x.shape.length === 2) {
        const xBuf = backend.bufferSync(x);
        const weightsBuf = backend.bufferSync(weights);
        const outBuf = (0, _bincountImpl.bincountReduceImpl)(xBuf, weightsBuf, size, binaryOutput);
        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
    }
    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);
}
const denseBincountConfig = {
    kernelName: (0, _tfjsCore.DenseBincount),
    backendName: "cpu",
    kernelFunc: denseBincount
};

},{"@tensorflow/tfjs-core":"2votT","./Bincount_impl":"iPuVl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"34Mx8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthToSpace", ()=>depthToSpace);
parcelHelpers.export(exports, "depthToSpaceConfig", ()=>depthToSpaceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function depthToSpace(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { blockSize , dataFormat  } = attrs;
    (0, _tfjsCore.util).assert(dataFormat === "NHWC", ()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);
    const batchSize = x.shape[0];
    const inputHeight = x.shape[1];
    const inputWidth = x.shape[2];
    const inputDepth = x.shape[3];
    const outputHeight = inputHeight * blockSize;
    const outputWidth = inputWidth * blockSize;
    const outputDepth = inputDepth / (blockSize * blockSize);
    const xValues = backend.data.get(x.dataId).values;
    const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);
    let outputIdx = 0;
    for(let b = 0; b < batchSize; ++b)for(let h = 0; h < outputHeight; ++h){
        const inH = Math.floor(h / blockSize);
        const offsetH = h % blockSize;
        for(let w = 0; w < outputWidth; ++w){
            const inW = Math.floor(w / blockSize);
            const offsetW = w % blockSize;
            const offsetD = (offsetH * blockSize + offsetW) * outputDepth;
            for(let d = 0; d < outputDepth; ++d){
                const inD = d + offsetD;
                const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));
                result[outputIdx++] = xValues[inputIdx];
            }
        }
    }
    return backend.makeTensorInfo([
        batchSize,
        outputHeight,
        outputWidth,
        outputDepth
    ], x.dtype, result);
}
const depthToSpaceConfig = {
    kernelName: (0, _tfjsCore.DepthToSpace),
    backendName: "cpu",
    kernelFunc: depthToSpace
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61IHT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNative", ()=>depthwiseConv2dNative);
parcelHelpers.export(exports, "depthwiseConv2dNativeConfig", ()=>depthwiseConv2dNativeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function depthwiseConv2dNative(args) {
    const { inputs , backend , attrs  } = args;
    const { x , filter  } = inputs;
    const { strides , pad , dilations , dimRoundingMode  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        filter
    ], "depthwiseConv2DNative");
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    let $dilations = dilations;
    if ($dilations == null) $dilations = [
        1,
        1
    ];
    (0, _tfjsCore.util).assert((0, _tfjsCore.backend_util).eitherStridesOrDilationsAreOne(strides, $dilations), ()=>"Error in depthwiseConv2d: Either strides or dilations must be " + `1. Got strides ${strides} and dilations '${$dilations}'`);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);
    const { filterHeight , filterWidth , dilationHeight , dilationWidth , padInfo  } = convInfo;
    const padLeft = padInfo.left;
    const padTop = padInfo.top;
    const chMul = convInfo.outChannels / convInfo.inChannels;
    const y = new (0, _tfjsCore.TensorBuffer)(convInfo.outShape, x.dtype);
    const xVals = backend.data.get(x.dataId).values;
    const wVals = backend.data.get(filter.dataId).values;
    const yVals = y.values;
    for(let b = 0; b < convInfo.batchSize; ++b){
        const xOffset1 = b * xStrides[0];
        const yOffset1 = b * y.strides[0];
        for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const yOffset2 = yOffset1 + yR * y.strides[1];
            const xRCorner = yR * convInfo.strideHeight - padTop;
            for(let wR = 0; wR < filterHeight; ++wR){
                const xR = xRCorner + wR * dilationHeight;
                if (xR < 0 || xR >= convInfo.inHeight) continue;
                const wOffset1 = wR * filterStrides[0];
                const xOffset2 = xOffset1 + xR * xStrides[1];
                for(let yC = 0; yC < convInfo.outWidth; ++yC){
                    const yOffset3 = yOffset2 + yC * y.strides[2];
                    const xCCorner = yC * convInfo.strideWidth - padLeft;
                    for(let wC = 0; wC < filterWidth; ++wC){
                        const xC = xCCorner + wC * dilationWidth;
                        if (xC < 0 || xC >= convInfo.inWidth) continue;
                        const wOffset2 = wOffset1 + wC * filterStrides[1];
                        const xOffset3 = xOffset2 + xC * convInfo.inChannels;
                        let yOffset4 = yOffset3;
                        let wOffset3 = wOffset2;
                        for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                            const xVal = xVals[xOffset3 + d1];
                            for(let q = 0; q < chMul; ++q)yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];
                            yOffset4 += chMul;
                            wOffset3 += chMul;
                        }
                    }
                }
            }
        }
    }
    return backend.makeTensorInfo(y.shape, y.dtype, y.values);
}
const depthwiseConv2dNativeConfig = {
    kernelName: (0, _tfjsCore.DepthwiseConv2dNative),
    backendName: "cpu",
    kernelFunc: depthwiseConv2dNative
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCp4J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropFilter", ()=>depthwiseConv2dNativeBackpropFilter);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropFilterConfig", ()=>depthwiseConv2dNativeBackpropFilterConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function depthwiseConv2dNativeBackpropFilter(args) {
    const { inputs , backend , attrs  } = args;
    const { x , dy  } = inputs;
    const { strides , dilations , pad , dimRoundingMode , filterShape  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        dy
    ], "depthwiseConv2dNativeBackpropFilter");
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true);
    const { strideHeight , strideWidth , filterHeight , filterWidth  } = convInfo;
    const dW = new (0, _tfjsCore.TensorBuffer)(convInfo.filterShape, "float32");
    const leftPad = convInfo.padInfo.left;
    const topPad = convInfo.padInfo.top;
    const chMul = convInfo.outChannels / convInfo.inChannels;
    const xVals = backend.data.get(x.dataId).values;
    const xBuf = new (0, _tfjsCore.TensorBuffer)(x.shape, x.dtype, xVals);
    const dyVals = backend.data.get(dy.dataId).values;
    const dyBuf = new (0, _tfjsCore.TensorBuffer)(dy.shape, dy.dtype, dyVals);
    for(let wR = 0; wR < filterHeight; ++wR){
        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
        for(let wC = 0; wC < filterWidth; ++wC){
            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
            for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                const d1 = Math.trunc(d2 / chMul);
                const dm = d2 % chMul;
                let dotProd = 0;
                for(let b = 0; b < convInfo.batchSize; ++b)for(let yR = yRMin; yR < yRMax; ++yR){
                    const xR = wR + yR * strideHeight - topPad;
                    for(let yC = yCMin; yC < yCMax; ++yC){
                        const xC = wC + yC * strideWidth - leftPad;
                        dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
                    }
                }
                dW.set(dotProd, wR, wC, d1, dm);
            }
        }
    }
    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
}
const depthwiseConv2dNativeBackpropFilterConfig = {
    kernelName: (0, _tfjsCore.DepthwiseConv2dNativeBackpropFilter),
    backendName: "cpu",
    kernelFunc: depthwiseConv2dNativeBackpropFilter
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eyZ9H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropInput", ()=>depthwiseConv2dNativeBackpropInput);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropInputConfig", ()=>depthwiseConv2dNativeBackpropInputConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function depthwiseConv2dNativeBackpropInput(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , filter  } = inputs;
    const { strides , dilations , pad , dimRoundingMode , inputShape  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        filter
    ], "depthwiseConv2DNativeBackpropInput");
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    const filterStrides = (0, _tfjsCore.util).computeStrides(filter.shape);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true);
    const dx = new (0, _tfjsCore.TensorBuffer)(convInfo.inShape, "float32");
    const dxValues = dx.values;
    const [dxS0, dxS1, dxS2] = dx.strides;
    const dyValues = backend.data.get(dy.dataId).values;
    const [dyS0, dyS1, dyS2] = dyStrides;
    const fltValues = backend.data.get(filter.dataId).values;
    const [fltS0, fltS1, fltS2] = filterStrides;
    const { batchSize , filterHeight , filterWidth , inChannels , inHeight , inWidth , outChannels , outHeight , outWidth , strideHeight , strideWidth  } = convInfo;
    const topPad = filterHeight - 1 - convInfo.padInfo.top;
    const leftPad = filterWidth - 1 - convInfo.padInfo.left;
    const chMul = outChannels / inChannels;
    for(let b = 0; b < batchSize; ++b){
        for(let d1 = 0; d1 < inChannels; ++d1)for(let xR = 0; xR < inHeight; ++xR){
            const xRCorner = xR - topPad;
            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
            const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
            for(let xC = 0; xC < inWidth; ++xC){
                const xCCorner = xC - leftPad;
                const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                let dotProd = 0;
                for(let yR = xRMin; yR < yRMax; ++yR){
                    const wR = yR * strideHeight - xRCorner;
                    for(let yC = xCMin; yC < yCMax; ++yC){
                        const wC = yC * strideWidth - xCCorner;
                        const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
                        const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                        for(let dm = 0; dm < chMul; ++dm){
                            const d2 = d1 * chMul + dm;
                            const pixel = dyValues[dyOffset + d2];
                            const weight = fltValues[fltOffset + dm];
                            dotProd += pixel * weight;
                        }
                    }
                }
                dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
            }
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const depthwiseConv2dNativeBackpropInputConfig = {
    kernelName: (0, _tfjsCore.DepthwiseConv2dNativeBackpropInput),
    backendName: "cpu",
    kernelFunc: depthwiseConv2dNativeBackpropInput
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcxfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diag", ()=>diag);
parcelHelpers.export(exports, "diagConfig", ()=>diagConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function diag(args) {
    const { inputs , backend  } = args;
    const { x  } = inputs;
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const xVals = backend.data.get(x.dataId).values;
    const outBuf = (0, _tfjsCore.buffer)([
        xSize,
        xSize
    ], x.dtype);
    const vals = outBuf.values;
    for(let i = 0; i < xVals.length; i++)vals[i * xSize + i] = xVals[i];
    const outShape = [
        ...x.shape,
        ...x.shape
    ];
    return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);
}
const diagConfig = {
    kernelName: (0, _tfjsCore.Diag),
    backendName: "cpu",
    kernelFunc: diag
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGGht":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2DConfig", ()=>dilation2DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const dilation2DConfig = {
    kernelName: (0, _tfjsCore.Dilation2D),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        const { x , filter  } = inputs;
        const { strides , pad , dilations  } = attrs;
        const cpuBackend = backend;
        const xVals = cpuBackend.data.get(x.dataId).values;
        const xRank = x.shape.length;
        const filterVals = cpuBackend.data.get(filter.dataId).values;
        const filterRank = filter.shape.length;
        const { batchSize , inHeight , inWidth , inChannels , outHeight , outWidth , padInfo , strideHeight , strideWidth , filterHeight , filterWidth , dilationHeight , dilationWidth , outShape  } = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations);
        const outSize = (0, _tfjsCore.util).sizeFromShape(outShape);
        const outRank = outShape.length;
        const outputVals = (0, _tfjsCore.util).getArrayFromDType(x.dtype, outSize);
        // Upsampling the input by fill in `dilation size - 1` values between each
        // input value.
        // This implementation follows the TF c++ implementation:
        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
        for(let b = 0; b < batchSize; ++b)for(let hOut = 0; hOut < outHeight; ++hOut){
            const hBeg = hOut * strideHeight - padInfo.top;
            for(let wOut = 0; wOut < outWidth; ++wOut){
                const wBeg = wOut * strideWidth - padInfo.left;
                for(let d = 0; d < inChannels; ++d){
                    let curVal = Number.MIN_SAFE_INTEGER;
                    for(let h = 0; h < filterHeight; ++h){
                        const hIn = hBeg + h * dilationHeight;
                        if (hIn >= 0 && hIn < inHeight) for(let w = 0; w < filterWidth; ++w){
                            const wIn = wBeg + w * dilationWidth;
                            if (wIn >= 0 && wIn < inWidth) {
                                const xIndex = (0, _tfjsCore.util).locToIndex([
                                    b,
                                    hIn,
                                    wIn,
                                    d
                                ], xRank, (0, _tfjsCore.util).computeStrides(x.shape));
                                const filterIndex = (0, _tfjsCore.util).locToIndex([
                                    h,
                                    w,
                                    d
                                ], filterRank, (0, _tfjsCore.util).computeStrides(filter.shape));
                                const val = xVals[xIndex] + filterVals[filterIndex];
                                if (val > curVal) curVal = val;
                            }
                        }
                    }
                    const outputIndex = (0, _tfjsCore.util).locToIndex([
                        b,
                        hOut,
                        wOut,
                        d
                    ], outRank, (0, _tfjsCore.util).computeStrides(outShape));
                    outputVals[outputIndex] = curVal;
                }
            }
        }
        const dataId = cpuBackend.write((0, _tfjsCore.util).toTypedArray(outputVals, x.dtype), outShape, x.dtype);
        return {
            dataId,
            shape: outShape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7ZbF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2DBackpropFilterConfig", ()=>dilation2DBackpropFilterConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const dilation2DBackpropFilterConfig = {
    kernelName: (0, _tfjsCore.Dilation2DBackpropFilter),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        const { x , filter , dy  } = inputs;
        const { strides , pad , dilations  } = attrs;
        const cpuBackend = backend;
        const $x = (0, _tfjsCore.util).toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
        const $filter = (0, _tfjsCore.util).toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
        const { batchSize , inHeight , inWidth , inChannels , outHeight , outWidth , padInfo , strideHeight , strideWidth , filterHeight , filterWidth , dilationHeight , dilationWidth , outShape  } = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations);
        (0, _tfjsCore.util).assert(dy.rank === outShape.length, ()=>`Error in ${0, _tfjsCore.Dilation2DBackpropFilter}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);
        const $dy = (0, _tfjsCore.util).toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
        // The computed filter gradients has the same dimensions as the filter:
        // [filterHeight, filterWidth, depth]
        const gradients = (0, _tfjsCore.util).makeZerosNestedTypedArray(filter.shape, filter.dtype);
        // In the case of multiple argmax branches, we only back-propagate along the
        // last branch, i.e., the one with largest value of `h * filter_cols + w`,
        // similarly to the max-pooling backward routines.
        // This implementation follows the TF c++ implementation:
        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
        for(let b = 0; b < batchSize; ++b)for(let hOut = 0; hOut < outHeight; ++hOut){
            const hBeg = hOut * strideHeight - padInfo.top;
            for(let wOut = 0; wOut < outWidth; ++wOut){
                const wBeg = wOut * strideWidth - padInfo.left;
                for(let d = 0; d < inChannels; ++d){
                    let curVal = Number.MIN_SAFE_INTEGER;
                    let hMax = 0;
                    let wMax = 0;
                    for(let h = 0; h < filterHeight; ++h){
                        const hIn = hBeg + h * dilationHeight;
                        if (hIn >= 0 && hIn < inHeight) for(let w = 0; w < filterWidth; ++w){
                            const wIn = wBeg + w * dilationWidth;
                            if (wIn >= 0 && wIn < inWidth) {
                                const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                                if (val > curVal) {
                                    curVal = val;
                                    hMax = h;
                                    wMax = w;
                                }
                            }
                        }
                    }
                    gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];
                }
            }
        }
        const dataId = cpuBackend.write((0, _tfjsCore.util).toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);
        return {
            dataId,
            shape: filter.shape,
            dtype: filter.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8B3I5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2DBackpropInputConfig", ()=>dilation2DBackpropInputConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const dilation2DBackpropInputConfig = {
    kernelName: (0, _tfjsCore.Dilation2DBackpropInput),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        const { x , filter , dy  } = inputs;
        const { strides , pad , dilations  } = attrs;
        const cpuBackend = backend;
        const $x = (0, _tfjsCore.util).toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
        const $filter = (0, _tfjsCore.util).toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
        const { batchSize , inHeight , inWidth , inChannels , outHeight , outWidth , padInfo , strideHeight , strideWidth , filterHeight , filterWidth , dilationHeight , dilationWidth , outShape  } = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations);
        (0, _tfjsCore.util).assert(dy.rank === outShape.length, ()=>`Error in ${0, _tfjsCore.Dilation2DBackpropInput}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);
        const $dy = (0, _tfjsCore.util).toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
        // The computed gradients has the same dimensions as the input:
        // [batch, inputHeight, inputCols, inChannel]
        const gradients = (0, _tfjsCore.util).makeZerosNestedTypedArray(x.shape, x.dtype);
        // In the case of multiple argmax branches, we only back-propagate along the
        // last branch, i.e., the one with largest value of `h * filter_cols + w`,
        // similarly to the max-pooling backward routines.
        // This implementation follows the TF c++ implementation:
        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
        for(let b = 0; b < batchSize; ++b)for(let hOut = 0; hOut < outHeight; ++hOut){
            const hBeg = hOut * strideHeight - padInfo.top;
            for(let wOut = 0; wOut < outWidth; ++wOut){
                const wBeg = wOut * strideWidth - padInfo.left;
                for(let d = 0; d < inChannels; ++d){
                    let curVal = Number.MIN_SAFE_INTEGER;
                    let hInMax = hBeg < 0 ? 0 : hBeg;
                    let wInMax = wBeg < 0 ? 0 : wBeg;
                    for(let h = 0; h < filterHeight; ++h){
                        const hIn = hBeg + h * dilationHeight;
                        if (hIn >= 0 && hIn < inHeight) for(let w = 0; w < filterWidth; ++w){
                            const wIn = wBeg + w * dilationWidth;
                            if (wIn >= 0 && wIn < inWidth) {
                                const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                                if (val > curVal) {
                                    curVal = val;
                                    hInMax = hIn;
                                    wInMax = wIn;
                                }
                            }
                        }
                    }
                    gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];
                }
            }
        }
        const dataId = cpuBackend.write((0, _tfjsCore.util).toTypedArray(gradients, x.dtype), x.shape, x.dtype);
        return {
            dataId,
            shape: x.shape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4WtjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "einsum", ()=>einsum);
parcelHelpers.export(exports, "einsumConfig", ()=>einsumConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _multiply = require("./Multiply");
var _reshape = require("./Reshape");
var _sum = require("./Sum");
var _transpose = require("./Transpose");
function einsum(args) {
    const { inputs , backend , attrs  } = args;
    const { equation  } = attrs;
    const tensors = inputs;
    const { allDims , summedDims , idDims  } = (0, _tfjsCore.backend_util).decodeEinsumEquation(equation, tensors.length);
    (0, _tfjsCore.backend_util).checkEinsumDimSizes(allDims.length, idDims, tensors);
    const { path , steps  } = (0, _tfjsCore.backend_util).getEinsumComputePath(summedDims, idDims);
    const nSteps = steps.length;
    let out = null;
    let numDimsRemaining = allDims.length;
    const tensorsToDispose = [];
    for(let i = 0; i < nSteps; ++i){
        for (const idTerm of steps[i]){
            const { permutationIndices: perm , expandDims: dimsToExpand  } = (0, _tfjsCore.backend_util).getEinsumPermutation(numDimsRemaining, idDims[idTerm]);
            let x;
            if ((0, _tfjsCore.backend_util).isIdentityPermutation(perm)) x = tensors[idTerm];
            else {
                x = (0, _transpose.transpose)({
                    inputs: {
                        x: tensors[idTerm]
                    },
                    backend,
                    attrs: {
                        perm
                    }
                });
                tensorsToDispose.push(x);
            }
            const targetShape = x.shape.slice();
            for(let k = 0; k < dimsToExpand.length; ++k)targetShape.splice(dimsToExpand[k], 0, 1);
            if (!(0, _tfjsCore.util).arraysEqual(x.shape, targetShape)) {
                x = (0, _reshape.reshape)({
                    inputs: {
                        x
                    },
                    backend,
                    attrs: {
                        shape: targetShape
                    }
                });
                tensorsToDispose.push(x);
            }
            if (out === null) out = x;
            else {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                out = (0, _multiply.multiply)({
                    inputs: {
                        a: x,
                        b: out
                    },
                    backend
                });
                tensorsToDispose.push(out);
            }
        }
        if (i < nSteps - 1) {
            if (path[i] >= 0) {
                out = (0, _sum.sum)({
                    inputs: {
                        x: out
                    },
                    backend,
                    attrs: {
                        axis: path[i] - (allDims.length - numDimsRemaining),
                        keepDims: false
                    }
                });
                tensorsToDispose.push(out);
            }
            numDimsRemaining--;
        }
    }
    // Clean up intermediate tensors.
    for (const tensorInfo of tensorsToDispose){
        if (tensorInfo === out) continue;
        backend.disposeIntermediateTensorInfo(tensorInfo);
    }
    return out;
}
const einsumConfig = {
    kernelName: (0, _tfjsCore.Einsum),
    backendName: "cpu",
    kernelFunc: einsum
};

},{"@tensorflow/tfjs-core":"2votT","./Multiply":"8yTpL","./Reshape":"hjnko","./Sum":"43iZ4","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8yTpL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiplyImpl", ()=>multiplyImpl);
parcelHelpers.export(exports, "multiplyComplexImpl", ()=>multiplyComplexImpl);
parcelHelpers.export(exports, "multiply", ()=>multiply);
parcelHelpers.export(exports, "multiplyConfig", ()=>multiplyConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const multiplyImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>aValue * bValue);
const multiplyComplexImpl = (0, _binaryUtils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag)=>{
    return {
        real: aReal * bReal - aImag * bImag,
        imag: aReal * bImag + aImag * bReal
    };
});
const multiply = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Multiply), multiplyImpl, multiplyComplexImpl);
const multiplyConfig = {
    kernelName: (0, _tfjsCore.Multiply),
    backendName: "cpu",
    kernelFunc: multiply
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43iZ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sum", ()=>sum);
parcelHelpers.export(exports, "sumConfig", ()=>sumConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _zerosImpl = require("../utils/zeros_impl");
var _cast = require("./Cast");
var _identity = require("./Identity");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function sum(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "sum");
    let $x;
    if (x.dtype === "bool") $x = (0, _cast.cast)({
        inputs: {
            x
        },
        backend,
        attrs: {
            dtype: "int32"
        }
    });
    else $x = (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    const xRank = $x.shape.length;
    const axes = (0, _tfjsCore.util).parseAxisParam(axis, $x.shape);
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
    let reductionAxes = axes;
    let permutedX = $x;
    if (permutation != null) {
        permutedX = (0, _transpose.transpose)({
            inputs: {
                x: $x
            },
            backend,
            attrs: {
                perm: permutation
            }
        });
        reductionAxes = (0, _tfjsCore.backend_util).getInnerMostAxes(reductionAxes.length, xRank);
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("sum", reductionAxes, permutedX.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(permutedX.shape, reductionAxes);
    const resultDtype = (0, _tfjsCore.backend_util).upcastType(permutedX.dtype, "int32");
    let result = (0, _zerosImpl.zeros)(backend, outShape, resultDtype);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const vals = backend.data.get(result.dataId).values;
    const aVals = backend.data.get(permutedX.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let sum = 0;
        for(let j = 0; j < reduceSize; ++j)sum += aVals[offset + j];
        vals[i] = sum;
    }
    if (keepDims) {
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(result.shape, axes);
        const oldResult = result;
        result = (0, _reshape.reshape)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                shape: newShape
            }
        });
        backend.disposeIntermediateTensorInfo(oldResult);
    }
    backend.disposeIntermediateTensorInfo($x);
    if (permutation != null) backend.disposeIntermediateTensorInfo(permutedX);
    return result;
}
const sumConfig = {
    kernelName: (0, _tfjsCore.Sum),
    backendName: "cpu",
    kernelFunc: sum
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/zeros_impl":"lQJBv","./Cast":"hBSGR","./Identity":"9BGOC","./Reshape":"hjnko","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHzcT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eluGrad", ()=>eluGrad);
parcelHelpers.export(exports, "eluGradConfig", ()=>eluGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function eluGrad(args) {
    const { inputs , backend  } = args;
    const { dy , y  } = inputs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        y
    ], "eluGrad");
    const resultValues = new Float32Array((0, _tfjsCore.util).sizeFromShape(y.shape));
    const values = backend.data.get(y.dataId).values;
    const dyValues = backend.data.get(dy.dataId).values;
    for(let i = 0; i < values.length; ++i){
        const v = values[i];
        if (v >= 1) resultValues[i] = dyValues[i];
        else resultValues[i] = dyValues[i] * (v + 1);
    }
    return backend.makeTensorInfo(y.shape, "float32", resultValues);
}
const eluGradConfig = {
    kernelName: (0, _tfjsCore.EluGrad),
    backendName: "cpu",
    kernelFunc: eluGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7yhU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalImpl", ()=>equalImpl);
parcelHelpers.export(exports, "equal", ()=>equal);
parcelHelpers.export(exports, "equalConfig", ()=>equalConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const equalImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a === b ? 1 : 0);
const equal = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Equal), equalImpl, null, "bool");
const equalConfig = {
    kernelName: (0, _tfjsCore.Equal),
    backendName: "cpu",
    kernelFunc: equal
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBsUL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erf", ()=>erf);
parcelHelpers.export(exports, "erfConfig", ()=>erfConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const p = (0, _tfjsCore.backend_util).ERF_P;
const a1 = (0, _tfjsCore.backend_util).ERF_A1;
const a2 = (0, _tfjsCore.backend_util).ERF_A2;
const a3 = (0, _tfjsCore.backend_util).ERF_A3;
const a4 = (0, _tfjsCore.backend_util).ERF_A4;
const a5 = (0, _tfjsCore.backend_util).ERF_A5;
const erf = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Erf), (xi)=>{
    const sign = Math.sign(xi);
    const v = Math.abs(xi);
    const t = 1.0 / (1.0 + p * v);
    return sign * (1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-v * v));
});
const erfConfig = {
    kernelName: (0, _tfjsCore.Erf),
    backendName: "cpu",
    kernelFunc: erf
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8DGt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expImpl", ()=>expImpl);
parcelHelpers.export(exports, "exp", ()=>exp);
parcelHelpers.export(exports, "expConfig", ()=>expConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const expImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.exp(xi));
const exp = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Exp), expImpl, "float32");
const expConfig = {
    kernelName: (0, _tfjsCore.Exp),
    backendName: "cpu",
    kernelFunc: exp
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8V7D8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expandDims", ()=>expandDims);
parcelHelpers.export(exports, "expandDimsConfig", ()=>expandDimsConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
function expandDims(args) {
    const { inputs , backend , attrs  } = args;
    const { input  } = inputs;
    const { dim  } = attrs;
    const inputRank = input.shape.length;
    const newShape = input.shape.slice();
    let $dim = dim;
    if (dim < 0) {
        // Negative value is counted from the tail of rank.
        (0, _tfjsCore.util).assert(-(inputRank + 1) <= dim, ()=>`Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
        $dim = inputRank + dim + 1;
    }
    newShape.splice($dim, 0, 1);
    return (0, _reshape.reshape)({
        inputs: {
            x: input
        },
        backend,
        attrs: {
            shape: newShape
        }
    });
}
const expandDimsConfig = {
    kernelName: (0, _tfjsCore.ExpandDims),
    backendName: "cpu",
    kernelFunc: expandDims
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c75hq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expm1Impl", ()=>expm1Impl);
parcelHelpers.export(exports, "expm1", ()=>expm1);
parcelHelpers.export(exports, "expm1Config", ()=>expm1Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const expm1Impl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.expm1(xi));
const expm1 = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Expm1), expm1Impl);
const expm1Config = {
    kernelName: (0, _tfjsCore.Expm1),
    backendName: "cpu",
    kernelFunc: expm1
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"MRvZK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fft", ()=>fft);
parcelHelpers.export(exports, "fftConfig", ()=>fftConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fftUtils = require("../utils/fft_utils");
var _reshape = require("./Reshape");
function fft(args) {
    const { inputs , backend  } = args;
    const { input  } = inputs;
    const inputSize = (0, _tfjsCore.util).sizeFromShape(input.shape);
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = inputSize / innerDimensionSize;
    const input2D = (0, _reshape.reshape)({
        inputs: {
            x: input
        },
        backend,
        attrs: {
            shape: [
                batch,
                innerDimensionSize
            ]
        }
    });
    const result = (0, _fftUtils.fftBatch)(input2D, false, backend);
    const resultReshaped = (0, _reshape.reshape)({
        inputs: {
            x: result
        },
        backend,
        attrs: {
            shape: input.shape
        }
    });
    backend.disposeIntermediateTensorInfo(input2D);
    backend.disposeIntermediateTensorInfo(result);
    return resultReshaped;
}
const fftConfig = {
    kernelName: (0, _tfjsCore.FFT),
    backendName: "cpu",
    kernelFunc: fft
};

},{"@tensorflow/tfjs-core":"2votT","../utils/fft_utils":"1lOUy","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1lOUy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Calculate FFT of inner most elements of batch tensor.
 */ parcelHelpers.export(exports, "fftBatch", ()=>fftBatch);
parcelHelpers.export(exports, "fftImpl", ()=>fftImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _add = require("../kernels/Add");
var _complex = require("../kernels/Complex");
var _concat = require("../kernels/Concat");
var _identity = require("../kernels/Identity");
var _imag = require("../kernels/Imag");
var _multiply = require("../kernels/Multiply");
var _real = require("../kernels/Real");
var _realDiv = require("../kernels/RealDiv");
var _slice = require("../kernels/Slice");
var _sub = require("../kernels/Sub");
function fftBatch(input, inverse, cpuBackend) {
    const inputShape = input.shape;
    const batch = inputShape[0];
    const innerDim = inputShape[1];
    const inputVals = cpuBackend.data.get(input.dataId);
    const real2D = inputVals.complexTensorInfos.real;
    const imag2D = inputVals.complexTensorInfos.imag;
    // Collects real and imaginary values separately.
    const resultShape = [
        batch,
        innerDim
    ];
    const resultSize = (0, _tfjsCore.util).sizeFromShape(resultShape);
    const resultReal = (0, _tfjsCore.util).getTypedArrayFromDType("float32", resultSize);
    const resultImag = (0, _tfjsCore.util).getTypedArrayFromDType("float32", resultSize);
    for(let b = 0; b < batch; b++){
        // TODO: Support slice ops for complex type.
        const r = (0, _slice.slice)({
            inputs: {
                x: real2D
            },
            backend: cpuBackend,
            attrs: {
                begin: [
                    b,
                    0
                ],
                size: [
                    1,
                    innerDim
                ]
            }
        });
        const i = (0, _slice.slice)({
            inputs: {
                x: imag2D
            },
            backend: cpuBackend,
            attrs: {
                begin: [
                    b,
                    0
                ],
                size: [
                    1,
                    innerDim
                ]
            }
        });
        const input1 = (0, _complex.complex)({
            inputs: {
                real: r,
                imag: i
            },
            backend: cpuBackend
        });
        // Run FFT by batch element.
        const { real , imag  } = fftImpl(input1, inverse, cpuBackend);
        const res = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(real, imag);
        for(let d = 0; d < innerDim; d++){
            const c = (0, _tfjsCore.backend_util).getComplexWithIndex(res, d);
            resultReal[b * innerDim + d] = c.real;
            resultImag[b * innerDim + d] = c.imag;
        }
        cpuBackend.disposeIntermediateTensorInfo(r);
        cpuBackend.disposeIntermediateTensorInfo(i);
        cpuBackend.disposeIntermediateTensorInfo(input1);
    }
    const $realInfo = cpuBackend.makeTensorInfo(resultShape, "float32", resultReal);
    const $imagInfo = cpuBackend.makeTensorInfo(resultShape, "float32", resultImag);
    const result = (0, _complex.complex)({
        inputs: {
            real: $realInfo,
            imag: $imagInfo
        },
        backend: cpuBackend
    });
    cpuBackend.disposeIntermediateTensorInfo($realInfo);
    cpuBackend.disposeIntermediateTensorInfo($imagInfo);
    return result;
}
function fftImpl(input, inverse, cpuBackend) {
    const inputSize = (0, _tfjsCore.util).sizeFromShape(input.shape);
    const inputVals = cpuBackend.data.get(input.dataId);
    const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;
    const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;
    if (isExponentOf2(inputSize)) {
        const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);
        const resultShape = [
            input.shape[0],
            input.shape[1]
        ];
        if (inverse) {
            const realInfo = cpuBackend.makeTensorInfo(resultShape, "float32", result.real);
            const imagInfo = cpuBackend.makeTensorInfo(resultShape, "float32", result.imag);
            const sizeInfo = cpuBackend.makeTensorInfo([], "float32", (0, _tfjsCore.util).createScalarValue(inputSize, "float32"));
            const sizeInfoCopy = (0, _identity.identity)({
                inputs: {
                    x: sizeInfo
                },
                backend: cpuBackend
            });
            const divRealInfo = (0, _realDiv.realDivConfig).kernelFunc({
                inputs: {
                    a: realInfo,
                    b: sizeInfo
                },
                backend: cpuBackend
            });
            const divImagInfo = (0, _realDiv.realDivConfig).kernelFunc({
                inputs: {
                    a: imagInfo,
                    b: sizeInfoCopy
                },
                backend: cpuBackend
            });
            const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;
            const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;
            cpuBackend.disposeIntermediateTensorInfo(realInfo);
            cpuBackend.disposeIntermediateTensorInfo(imagInfo);
            cpuBackend.disposeIntermediateTensorInfo(sizeInfo);
            cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);
            cpuBackend.disposeIntermediateTensorInfo(divRealInfo);
            cpuBackend.disposeIntermediateTensorInfo(divImagInfo);
            return {
                real: divRealVals,
                imag: divImagVals
            };
        }
        return result;
    } else {
        const data = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realVals, imagVals);
        const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);
        return (0, _tfjsCore.backend_util).splitRealAndImagArrays(rawOutput);
    }
}
function isExponentOf2(size) {
    return (size & size - 1) === 0;
}
// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.
function fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {
    if (size === 1) return {
        real: realVals,
        imag: imagVals
    };
    const data = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realVals, imagVals);
    const half = size / 2;
    const evenComplex = (0, _tfjsCore.backend_util).complexWithEvenIndex(data);
    const evenRealVals = evenComplex.real;
    const evenImagVals = evenComplex.imag;
    const evenShape = [
        evenRealVals.length
    ];
    const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, "float32", evenRealVals);
    const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, "float32", evenImagVals);
    const evenTensorInfo = (0, _complex.complex)({
        inputs: {
            real: evenRealInfo,
            imag: evenImagInfo
        },
        backend: cpuBackend
    });
    const oddComplex = (0, _tfjsCore.backend_util).complexWithOddIndex(data);
    const oddRealVals = oddComplex.real;
    const oddImagVals = oddComplex.imag;
    const oddShape = [
        oddRealVals.length
    ];
    const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, "float32", oddRealVals);
    const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, "float32", oddImagVals);
    const oddTensorInfo = (0, _complex.complex)({
        inputs: {
            real: oddRealInfo,
            imag: oddImagInfo
        },
        backend: cpuBackend
    });
    // Recursive call for half part of original input.
    const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);
    const $evenRealVals = $evenComplex.real;
    const $evenImagVals = $evenComplex.imag;
    const $evenShape = [
        $evenRealVals.length
    ];
    const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, "float32", $evenRealVals);
    const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, "float32", $evenImagVals);
    const $evenTensorInfo = (0, _complex.complex)({
        inputs: {
            real: $evenRealInfo,
            imag: $evenImagInfo
        },
        backend: cpuBackend
    });
    const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);
    const $oddRealVals = $oddComplex.real;
    const $oddImagVals = $oddComplex.imag;
    const $oddShape = [
        $oddRealVals.length
    ];
    const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, "float32", $oddRealVals);
    const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, "float32", $oddImagVals);
    const $oddTensorInfo = (0, _complex.complex)({
        inputs: {
            real: $oddRealInfo,
            imag: $oddImagInfo
        },
        backend: cpuBackend
    });
    const e = (0, _tfjsCore.backend_util).exponents(size, inverse);
    const eShape = [
        e.real.length
    ];
    const eRealInfo = cpuBackend.makeTensorInfo(eShape, "float32", e.real);
    const eImagInfo = cpuBackend.makeTensorInfo(eShape, "float32", e.imag);
    const complexInfo = (0, _complex.complex)({
        inputs: {
            real: eRealInfo,
            imag: eImagInfo
        },
        backend: cpuBackend
    });
    const exponentInfo = (0, _multiply.multiply)({
        inputs: {
            a: complexInfo,
            b: $oddTensorInfo
        },
        backend: cpuBackend
    });
    const addPart = (0, _add.add)({
        inputs: {
            a: $evenTensorInfo,
            b: exponentInfo
        },
        backend: cpuBackend
    });
    const subPart = (0, _sub.sub)({
        inputs: {
            a: $evenTensorInfo,
            b: exponentInfo
        },
        backend: cpuBackend
    });
    const addPartReal = (0, _real.real)({
        inputs: {
            input: addPart
        },
        backend: cpuBackend
    });
    const subPartReal = (0, _real.real)({
        inputs: {
            input: subPart
        },
        backend: cpuBackend
    });
    const addPartImag = (0, _imag.imag)({
        inputs: {
            input: addPart
        },
        backend: cpuBackend
    });
    const subPartImag = (0, _imag.imag)({
        inputs: {
            input: subPart
        },
        backend: cpuBackend
    });
    const $real = (0, _concat.concat)({
        inputs: [
            addPartReal,
            subPartReal
        ],
        backend: cpuBackend,
        attrs: {
            axis: 0
        }
    });
    const $imag = (0, _concat.concat)({
        inputs: [
            addPartImag,
            subPartImag
        ],
        backend: cpuBackend,
        attrs: {
            axis: 0
        }
    });
    const $realVals = cpuBackend.data.get($real.dataId).values;
    const $imagVals = cpuBackend.data.get($imag.dataId).values;
    cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);
    cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);
    cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);
    cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);
    cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);
    cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);
    cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);
    cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);
    cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);
    cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);
    cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);
    cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);
    cpuBackend.disposeIntermediateTensorInfo(eRealInfo);
    cpuBackend.disposeIntermediateTensorInfo(eImagInfo);
    cpuBackend.disposeIntermediateTensorInfo(complexInfo);
    cpuBackend.disposeIntermediateTensorInfo(exponentInfo);
    cpuBackend.disposeIntermediateTensorInfo(addPart);
    cpuBackend.disposeIntermediateTensorInfo(subPart);
    cpuBackend.disposeIntermediateTensorInfo(addPartReal);
    cpuBackend.disposeIntermediateTensorInfo(addPartImag);
    cpuBackend.disposeIntermediateTensorInfo(subPartReal);
    cpuBackend.disposeIntermediateTensorInfo(subPartImag);
    cpuBackend.disposeIntermediateTensorInfo($real);
    cpuBackend.disposeIntermediateTensorInfo($imag);
    return {
        real: $realVals,
        imag: $imagVals
    };
}
// Calculate fourier transform by multplying sinusoid matrix.
function fourierTransformByMatmul(data, size, inverse) {
    const ret = new Float32Array(size * 2);
    // TODO: Use matmul instead once it supports complex64 type.
    for(let r = 0; r < size; r++){
        let real = 0.0;
        let imag = 0.0;
        for(let c = 0; c < size; c++){
            const e = (0, _tfjsCore.backend_util).exponent(r * c, size, inverse);
            const term = (0, _tfjsCore.backend_util).getComplexWithIndex(data, c);
            real += term.real * e.real - term.imag * e.imag;
            imag += term.real * e.imag + term.imag * e.real;
        }
        if (inverse) {
            real /= size;
            imag /= size;
        }
        (0, _tfjsCore.backend_util).assignToTypedArray(ret, real, imag, r);
    }
    return ret;
}

},{"@tensorflow/tfjs-core":"2votT","../kernels/Add":"5SGy9","../kernels/Complex":"ihUM4","../kernels/Concat":"1wEpn","../kernels/Identity":"9BGOC","../kernels/Imag":"jPu41","../kernels/Multiply":"8yTpL","../kernels/Real":"8fguZ","../kernels/RealDiv":"bCsfW","../kernels/Slice":"gvcFv","../kernels/Sub":"anrdl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCsfW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "realDivImpl", ()=>realDivImpl);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "realDivConfig", ()=>realDivConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const realDivImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a / b);
const div = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.RealDiv), realDivImpl);
const realDivConfig = {
    kernelName: (0, _tfjsCore.RealDiv),
    backendName: "cpu",
    kernelFunc: div
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anrdl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subImpl", ()=>subImpl);
parcelHelpers.export(exports, "subComplexImpl", ()=>subComplexImpl);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "subConfig", ()=>subConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const subImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>aValue - bValue);
const subComplexImpl = (0, _binaryUtils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag)=>{
    return {
        real: aReal - bReal,
        imag: aImag - bImag
    };
});
const sub = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Sub), subImpl, subComplexImpl);
const subConfig = {
    kernelName: (0, _tfjsCore.Sub),
    backendName: "cpu",
    kernelFunc: sub
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5TrpK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fill", ()=>fill);
parcelHelpers.export(exports, "fillConfig", ()=>fillConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function fill(args) {
    const { backend , attrs  } = args;
    const { shape , value , dtype  } = attrs;
    const $dtype = dtype || (0, _tfjsCore.util).inferDtype(value);
    const values = (0, _tfjsCore.util).getArrayFromDType($dtype, (0, _tfjsCore.util).sizeFromShape(shape));
    fillValues(values, value, $dtype);
    return backend.makeTensorInfo(shape, $dtype, values);
}
const fillConfig = {
    kernelName: (0, _tfjsCore.Fill),
    backendName: "cpu",
    kernelFunc: fill
};
function fillValues(values, value, dtype) {
    if (dtype === "string") values.fill(value);
    else values.fill(value);
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9KhWA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flipLeftRightConfig", ()=>flipLeftRightConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const flipLeftRightConfig = {
    kernelName: (0, _tfjsCore.FlipLeftRight),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { image  } = inputs;
        const cpuBackend = backend;
        const output = (0, _tfjsCore.util).getTypedArrayFromDType(image.dtype, (0, _tfjsCore.util).sizeFromShape(image.shape));
        const [batch, imageHeight, imageWidth, numChannels] = image.shape;
        const imageVals = cpuBackend.data.get(image.dataId).values;
        for(let batchIdx = 0; batchIdx < batch; batchIdx++){
            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
            for(let row = 0; row < imageHeight; row++){
                const rowOffset = row * (imageWidth * numChannels);
                for(let col = 0; col < imageWidth; col++){
                    const colOffset = col * numChannels;
                    for(let channel = 0; channel < numChannels; channel++){
                        const coordX = Math.round(imageWidth - col - 1);
                        const outIdx = batchOffset + rowOffset + colOffset + channel;
                        let outputValue = imageVals[outIdx];
                        // If the coordinate position falls within the image boundaries...
                        if (coordX >= 0 && coordX < imageWidth) {
                            // set the output to the image value at the coordinate position.
                            const rotatedColOffset = coordX * numChannels;
                            const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;
                            outputValue = imageVals[imageIdx];
                        }
                        output[outIdx] = outputValue;
                    }
                }
            }
        }
        const dataId = cpuBackend.write(output, image.shape, image.dtype);
        return {
            dataId,
            shape: image.shape,
            dtype: image.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJzfx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorImpl", ()=>floorImpl);
parcelHelpers.export(exports, "floor", ()=>floor);
parcelHelpers.export(exports, "floorConfig", ()=>floorConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const floorImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.floor(xi));
const floor = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Floor), floorImpl);
const floorConfig = {
    kernelName: (0, _tfjsCore.Floor),
    backendName: "cpu",
    kernelFunc: floor
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5brPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorDivImpl", ()=>floorDivImpl);
parcelHelpers.export(exports, "floorDiv", ()=>floorDiv);
parcelHelpers.export(exports, "floorDivConfig", ()=>floorDivConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const floorDivImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>Math.floor(a / b));
const floorDiv = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.FloorDiv), floorDivImpl, null, "int32");
const floorDivConfig = {
    kernelName: (0, _tfjsCore.FloorDiv),
    backendName: "cpu",
    kernelFunc: floorDiv
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ey15c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedConv2D", ()=>fusedConv2D);
parcelHelpers.export(exports, "fusedConv2DConfig", ()=>fusedConv2DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fusedUtils = require("../utils/fused_utils");
var _add = require("./Add");
var _conv2D = require("./Conv2D");
var _reshape = require("./Reshape");
function fusedConv2D(args) {
    const { inputs , backend , attrs  } = args;
    const { x , filter , bias , preluActivationWeights  } = inputs;
    const { strides , pad , dataFormat , dilations , dimRoundingMode , activation , leakyreluAlpha  } = attrs;
    let result = (0, _conv2D.conv2D)({
        inputs: {
            x,
            filter
        },
        backend,
        attrs: {
            strides,
            pad,
            dataFormat,
            dilations,
            dimRoundingMode
        }
    });
    if (bias) {
        const resultOld = result;
        // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned
        // to the channel of the conv2d's result; if the bias is a scalar, the
        // bias_add is computed as if the bias was broadcasted to the shape of the
        // conv2d's result.
        if (dataFormat === "NCHW" && bias.shape.length === 1 && bias.shape[0] !== 1) {
            const reshapedBias = (0, _reshape.reshape)({
                inputs: {
                    x: bias
                },
                backend,
                attrs: {
                    shape: [
                        bias.shape[0],
                        1,
                        1
                    ]
                }
            });
            result = (0, _add.add)({
                inputs: {
                    a: result,
                    b: reshapedBias
                },
                backend
            });
            backend.disposeIntermediateTensorInfo(reshapedBias);
        } else // This condition handles NHWC and NCHW (scalar case). The only other case
        // for NCHW (1D case) is handled above.
        result = (0, _add.add)({
            inputs: {
                a: result,
                b: bias
            },
            backend
        });
        backend.disposeIntermediateTensorInfo(resultOld);
    }
    if (activation) {
        const resultOld1 = result;
        // For NCHW format, if PReLu activation weights is a 1-D tensor, it is
        // supposed to be aligned with the channel of the conv2d's result. For other
        // cases, whether NCHW or NHWC data format, the conv2d result is
        // already aligned with the activation weights.
        if (dataFormat === "NCHW" && activation === "prelu" && preluActivationWeights.shape.length === 1 && preluActivationWeights.shape[0] !== 1) {
            const reshapedAlpha = (0, _reshape.reshape)({
                inputs: {
                    x: preluActivationWeights
                },
                backend,
                attrs: {
                    shape: [
                        preluActivationWeights.shape[0],
                        1,
                        1
                    ]
                }
            });
            result = (0, _fusedUtils.applyActivation)(backend, result, activation, reshapedAlpha, leakyreluAlpha);
            backend.disposeIntermediateTensorInfo(reshapedAlpha);
        } else result = (0, _fusedUtils.applyActivation)(backend, result, activation, preluActivationWeights, leakyreluAlpha);
        backend.disposeIntermediateTensorInfo(resultOld1);
    }
    return result;
}
const fusedConv2DConfig = {
    kernelName: (0, _tfjsCore.FusedConv2D),
    backendName: "cpu",
    kernelFunc: fusedConv2D
};

},{"@tensorflow/tfjs-core":"2votT","../utils/fused_utils":"4G9S6","./Add":"5SGy9","./Conv2D":"13rOl","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Zt4q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedDepthwiseConv2D", ()=>fusedDepthwiseConv2D);
parcelHelpers.export(exports, "fusedDepthwiseConv2DConfig", ()=>fusedDepthwiseConv2DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fusedUtils = require("../utils/fused_utils");
var _add = require("./Add");
var _depthwiseConv2DNative = require("./DepthwiseConv2dNative");
function fusedDepthwiseConv2D(args) {
    const { inputs , backend , attrs  } = args;
    const { x , filter , bias , preluActivationWeights  } = inputs;
    const { strides , pad , dataFormat , dilations , dimRoundingMode , activation , leakyreluAlpha  } = attrs;
    let result = (0, _depthwiseConv2DNative.depthwiseConv2dNative)({
        inputs: {
            x,
            filter
        },
        backend,
        attrs: {
            strides,
            pad,
            dataFormat,
            dilations,
            dimRoundingMode
        }
    });
    if (bias) {
        const oldResult = result;
        result = (0, _add.add)({
            inputs: {
                a: result,
                b: bias
            },
            backend
        });
        backend.disposeIntermediateTensorInfo(oldResult);
    }
    if (activation) {
        const oldResult1 = result;
        result = (0, _fusedUtils.applyActivation)(backend, result, activation, preluActivationWeights, leakyreluAlpha);
        backend.disposeIntermediateTensorInfo(oldResult1);
    }
    return result;
}
const fusedDepthwiseConv2DConfig = {
    kernelName: (0, _tfjsCore.FusedDepthwiseConv2D),
    backendName: "cpu",
    kernelFunc: fusedDepthwiseConv2D
};

},{"@tensorflow/tfjs-core":"2votT","../utils/fused_utils":"4G9S6","./Add":"5SGy9","./DepthwiseConv2dNative":"61IHT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25v1q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherNd", ()=>gatherNd);
parcelHelpers.export(exports, "gatherNdConfig", ()=>gatherNdConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _gatherNdImpl = require("./GatherNd_Impl");
function gatherNd(args) {
    const { inputs , backend  } = args;
    const { params , indices  } = inputs;
    const paramsSize = (0, _tfjsCore.util).sizeFromShape(params.shape);
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    const [resultShape, numSlices, sliceSize, strides] = (0, _tfjsCore.backend_util).prepareAndValidate(params, indices);
    if (numSlices === 0) return backend.makeTensorInfo(resultShape, params.dtype, []);
    const indicesData = backend.data.get(indices.dataId).values;
    const paramsBuf = backend.bufferSync(params);
    const outBuf = (0, _gatherNdImpl.gatherNdImpl)(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
    return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);
}
const gatherNdConfig = {
    kernelName: (0, _tfjsCore.GatherNd),
    backendName: "cpu",
    kernelFunc: gatherNd
};

},{"@tensorflow/tfjs-core":"2votT","./GatherNd_Impl":"dmIeh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmIeh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherNdImpl", ()=>gatherNdImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {
    const outBuf = (0, _tfjsCore.buffer)([
        numSlices,
        sliceSize
    ], dtype);
    for(let i = 0; i < numSlices; i++){
        const index = [];
        let flattenIndex = 0;
        for(let j = 0; j < sliceRank; j++){
            const dim = indicesData[i * sliceRank + j];
            flattenIndex += dim * strides[j];
            index.push(dim);
        }
        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);
        for(let k = 0; k < sliceSize; k++)outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));
    }
    return outBuf;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9fbm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherV2", ()=>gatherV2);
parcelHelpers.export(exports, "gatherV2Config", ()=>gatherV2Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _gatherV2Impl = require("./GatherV2_impl");
var _reshape = require("./Reshape");
function gatherV2(args) {
    const { inputs , backend , attrs  } = args;
    const { x , indices  } = inputs;
    const { axis , batchDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x,
        indices
    ], "gatherV2");
    // Throw error when any index is out of bound.
    const parsedAxis = (0, _tfjsCore.util).parseAxisParam(axis, x.shape)[0];
    const indicesVals = backend.data.get(indices.dataId).values;
    const axisDim = x.shape[parsedAxis];
    for(let i = 0; i < indicesVals.length; ++i){
        const index = indicesVals[i];
        (0, _tfjsCore.util).assert(index <= axisDim - 1 && index >= 0, ()=>`GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
    }
    let $batchDims = batchDims;
    if (batchDims == null) $batchDims = 0;
    const indicesSize = (0, _tfjsCore.util).sizeFromShape(indices.shape);
    const shapeInfo = (0, _tfjsCore.backend_util).segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);
    const flattenX = (0, _reshape.reshape)({
        inputs: {
            x
        },
        backend,
        attrs: {
            shape: [
                shapeInfo.batchSize,
                shapeInfo.outerSize,
                shapeInfo.dimSize,
                shapeInfo.sliceSize
            ]
        }
    });
    const flattenIndex = (0, _reshape.reshape)({
        inputs: {
            x: indices
        },
        backend,
        attrs: {
            shape: [
                shapeInfo.batchSize,
                indicesSize / shapeInfo.batchSize
            ]
        }
    });
    const flattenOutputShape = [
        shapeInfo.batchSize,
        shapeInfo.outerSize,
        indicesSize / shapeInfo.batchSize,
        shapeInfo.sliceSize
    ];
    const indicesBuf = backend.bufferSync(flattenIndex);
    const xBuf = backend.bufferSync(flattenX);
    const outBuf = (0, _gatherV2Impl.gatherV2Impl)(xBuf, indicesBuf, flattenOutputShape);
    backend.disposeIntermediateTensorInfo(flattenX);
    backend.disposeIntermediateTensorInfo(flattenIndex);
    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
}
const gatherV2Config = {
    kernelName: (0, _tfjsCore.GatherV2),
    backendName: "cpu",
    kernelFunc: gatherV2
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./GatherV2_impl":"jDwXt","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDwXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherV2Impl", ()=>gatherV2Impl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {
    const outBuf = (0, _tfjsCore.buffer)(flattenOutputShape, xBuf.dtype);
    for(let i = 0; i < outBuf.size; ++i){
        const newLoc = outBuf.indexToLoc(i);
        const originalLoc = newLoc.slice();
        const batchIdx = originalLoc[0];
        const indicesIdx = originalLoc[2];
        const indicesIndex = indicesBuf.locToIndex([
            batchIdx,
            indicesIdx
        ]);
        originalLoc[2] = indicesBuf.values[indicesIndex];
        const originalIndex = xBuf.locToIndex(originalLoc);
        if (0 <= originalIndex && originalIndex < xBuf.values.length) outBuf.values[i] = xBuf.values[originalIndex];
         // Else, index is out of bounds, so leave the default zero val in outBuf.
    }
    return outBuf;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ldYQI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterImpl", ()=>greaterImpl);
parcelHelpers.export(exports, "greater", ()=>greater);
parcelHelpers.export(exports, "greaterConfig", ()=>greaterConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const greaterImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a > b ? 1 : 0);
const greater = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Greater), greaterImpl, null, "bool");
const greaterConfig = {
    kernelName: (0, _tfjsCore.Greater),
    backendName: "cpu",
    kernelFunc: greater
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrBFx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterEqualImpl", ()=>greaterEqualImpl);
parcelHelpers.export(exports, "greaterEqual", ()=>greaterEqual);
parcelHelpers.export(exports, "greaterEqualConfig", ()=>greaterEqualConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const greaterEqualImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a >= b ? 1 : 0);
const greaterEqual = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.GreaterEqual), greaterEqualImpl, null, "bool");
const greaterEqualConfig = {
    kernelName: (0, _tfjsCore.GreaterEqual),
    backendName: "cpu",
    kernelFunc: greaterEqual
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MfqQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ifft", ()=>ifft);
parcelHelpers.export(exports, "ifftConfig", ()=>ifftConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fftUtils = require("../utils/fft_utils");
var _reshape = require("./Reshape");
function ifft(args) {
    const { inputs , backend  } = args;
    const { input  } = inputs;
    const inputSize = (0, _tfjsCore.util).sizeFromShape(input.shape);
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = inputSize / innerDimensionSize;
    const input2D = (0, _reshape.reshape)({
        inputs: {
            x: input
        },
        backend,
        attrs: {
            shape: [
                batch,
                innerDimensionSize
            ]
        }
    });
    const result = (0, _fftUtils.fftBatch)(input2D, true, backend);
    const resultReshaped = (0, _reshape.reshape)({
        inputs: {
            x: result
        },
        backend,
        attrs: {
            shape: input.shape
        }
    });
    backend.disposeIntermediateTensorInfo(input2D);
    backend.disposeIntermediateTensorInfo(result);
    return resultReshaped;
}
const ifftConfig = {
    kernelName: (0, _tfjsCore.IFFT),
    backendName: "cpu",
    kernelFunc: ifft
};

},{"@tensorflow/tfjs-core":"2votT","../utils/fft_utils":"1lOUy","./Reshape":"hjnko","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3JH9X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFinite", ()=>isFinite);
parcelHelpers.export(exports, "isFiniteConfig", ()=>isFiniteConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const isFinite = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.IsFinite), (xi)=>Number.isFinite(xi) ? 1 : 0, "bool");
const isFiniteConfig = {
    kernelName: (0, _tfjsCore.IsFinite),
    backendName: "cpu",
    kernelFunc: isFinite
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7tXW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInf", ()=>isInf);
parcelHelpers.export(exports, "isInfConfig", ()=>isInfConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const isInf = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.IsInf), (xi)=>Math.abs(xi) === Infinity ? 1 : 0, "bool");
const isInfConfig = {
    kernelName: (0, _tfjsCore.IsInf),
    backendName: "cpu",
    kernelFunc: isInf
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"la2Z8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNaN", ()=>isNaN);
parcelHelpers.export(exports, "isNaNConfig", ()=>isNaNConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const isNaN = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.IsNan), (xi)=>Number.isNaN(xi) ? 1 : 0, "bool");
const isNaNConfig = {
    kernelName: (0, _tfjsCore.IsNan),
    backendName: "cpu",
    kernelFunc: isNaN
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eN9G8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessImpl", ()=>lessImpl);
parcelHelpers.export(exports, "less", ()=>less);
parcelHelpers.export(exports, "lessConfig", ()=>lessConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const lessImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a < b ? 1 : 0);
const less = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Less), lessImpl, null, "bool");
const lessConfig = {
    kernelName: (0, _tfjsCore.Less),
    backendName: "cpu",
    kernelFunc: less
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9iCsf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessEqualImpl", ()=>lessEqualImpl);
parcelHelpers.export(exports, "lessEqual", ()=>lessEqual);
parcelHelpers.export(exports, "lessEqualConfig", ()=>lessEqualConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const lessEqualImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a <= b ? 1 : 0);
const lessEqual = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.LessEqual), lessEqualImpl, null, "bool");
const lessEqualConfig = {
    kernelName: (0, _tfjsCore.LessEqual),
    backendName: "cpu",
    kernelFunc: lessEqual
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2WnpW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linSpace", ()=>linSpace);
parcelHelpers.export(exports, "linSpaceConfig", ()=>linSpaceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _linSpaceImpl = require("./LinSpace_impl");
function linSpace(args) {
    const { backend , attrs  } = args;
    const { start , stop , num  } = attrs;
    const outVals = (0, _linSpaceImpl.linSpaceImpl)(start, stop, num);
    return backend.makeTensorInfo([
        outVals.length
    ], "float32", outVals);
}
const linSpaceConfig = {
    kernelName: (0, _tfjsCore.LinSpace),
    backendName: "cpu",
    kernelFunc: linSpace
};

},{"@tensorflow/tfjs-core":"2votT","./LinSpace_impl":"aFG7i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFG7i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linSpaceImpl", ()=>linSpaceImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function linSpaceImpl(start, stop, num) {
    const step = (stop - start) / (num - 1);
    const values = (0, _tfjsCore.util).makeZerosTypedArray(num, "float32");
    values[0] = start;
    for(let i = 1; i < values.length; i++)values[i] = values[i - 1] + step;
    return values;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSbjw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logImpl", ()=>logImpl);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "logConfig", ()=>logConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const logImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.log(xi));
const log = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Log), logImpl);
const logConfig = {
    kernelName: (0, _tfjsCore.Log),
    backendName: "cpu",
    kernelFunc: log
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"20zUa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log1p", ()=>log1p);
parcelHelpers.export(exports, "log1pConfig", ()=>log1pConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const log1p = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Log1p), (xi)=>Math.log1p(xi));
const log1pConfig = {
    kernelName: (0, _tfjsCore.Log1p),
    backendName: "cpu",
    kernelFunc: log1p
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLi7X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalAndImpl", ()=>logicalAndImpl);
parcelHelpers.export(exports, "logicalAnd", ()=>logicalAnd);
parcelHelpers.export(exports, "logicalAndConfig", ()=>logicalAndConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const logicalAndImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a && b);
const logicalAnd = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.LogicalAnd), logicalAndImpl, null, "bool");
const logicalAndConfig = {
    kernelName: (0, _tfjsCore.LogicalAnd),
    backendName: "cpu",
    kernelFunc: logicalAnd
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5UWIr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalNot", ()=>logicalNot);
parcelHelpers.export(exports, "logicalNotConfig", ()=>logicalNotConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const logicalNot = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.LogicalNot), (xi)=>xi ? 0 : 1, "bool");
const logicalNotConfig = {
    kernelName: (0, _tfjsCore.LogicalNot),
    backendName: "cpu",
    kernelFunc: logicalNot
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7cBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalOrImpl", ()=>logicalOrImpl);
parcelHelpers.export(exports, "logicalOr", ()=>logicalOr);
parcelHelpers.export(exports, "logicalOrConfig", ()=>logicalOrConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const logicalOrImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a || b);
const logicalOr = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.LogicalOr), logicalOrImpl, null, "bool");
const logicalOrConfig = {
    kernelName: (0, _tfjsCore.LogicalOr),
    backendName: "cpu",
    kernelFunc: logicalOr
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"30vQw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lRN", ()=>lRN);
parcelHelpers.export(exports, "LRNConfig", ()=>LRNConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function lRN(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { depthRadius , bias , alpha , beta  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "LRN");
    const channels = x.shape[3];
    const maxD = channels - 1;
    const xValues = backend.data.get(x.dataId).values;
    const size = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const result = new Float32Array(size);
    function sumAcrossChannels(offset) {
        const currentChannel = offset % channels;
        let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
        const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);
        let sum = 0.0;
        for(; beginSumOffset <= endSumOffset; beginSumOffset++){
            const z = xValues[beginSumOffset];
            sum += z * z;
        }
        return sum;
    }
    for(let offset = 0; offset < size; offset++){
        const sum = sumAcrossChannels(offset);
        const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);
        result[offset] = val;
    }
    return backend.makeTensorInfo(x.shape, x.dtype, result);
}
const LRNConfig = {
    kernelName: (0, _tfjsCore.LRN),
    backendName: "cpu",
    kernelFunc: lRN
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"IBmP2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lRNGrad", ()=>lRNGrad);
parcelHelpers.export(exports, "LRNGradConfig", ()=>LRNGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function lRNGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { x , y , dy  } = inputs;
    const { depthRadius , bias , alpha , beta  } = attrs;
    (0, _cpuUtil.assertNotComplex)(dy, "LRNGrad");
    const dySize = (0, _tfjsCore.util).sizeFromShape(dy.shape);
    const channels = dy.shape[3];
    const dyValues = backend.data.get(dy.dataId).values;
    const xValues = backend.data.get(x.dataId).values;
    const yValues = backend.data.get(y.dataId).values;
    const result = new Float32Array(dySize);
    const size = dySize;
    for(let offset = 0; offset < size; offset++){
        const currentChannel = offset % channels;
        const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
        const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);
        let norm = 0;
        for(let k = depthBegin; k < depthEnd; k++)norm += Math.pow(xValues[k], 2);
        norm = alpha * norm + bias;
        for(let k1 = depthBegin; k1 < depthEnd; k1++){
            let dyi = -2 * alpha * beta * xValues[k1] * yValues[offset] / norm;
            if (offset === k1) dyi += Math.pow(norm, -beta);
            dyi *= dyValues[offset];
            result[k1] += dyi;
        }
    }
    return backend.makeTensorInfo(dy.shape, x.dtype, result);
}
const LRNGradConfig = {
    kernelName: (0, _tfjsCore.LRNGrad),
    backendName: "cpu",
    kernelFunc: lRNGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l27XB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "maxConfig", ()=>maxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _maxImpl = require("./Max_impl");
var _transposeImpl = require("./Transpose_impl");
function max(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { reductionIndices , keepDims  } = attrs;
    const cpuBackend = backend;
    let xShape = x.shape;
    const xRank = xShape.length;
    const origAxes = (0, _tfjsCore.util).parseAxisParam(reductionIndices, xShape);
    let axes = origAxes;
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
    let xVals = cpuBackend.data.get(x.dataId).values;
    if (permutedAxes != null) {
        const newShape = new Array(xRank);
        for(let i = 0; i < newShape.length; i++)newShape[i] = xShape[permutedAxes[i]];
        xVals = (0, _transposeImpl.transposeImpl)(xVals, xShape, x.dtype, permutedAxes, newShape);
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, xRank);
        xShape = newShape;
    }
    (0, _cpuUtil.assertNotComplex)(x, "max");
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("max", axes, xRank);
    const [maxOutShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(xShape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const result = (0, _maxImpl.maxImpl)(xVals, reduceSize, maxOutShape, x.dtype);
    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);
    let outShape = maxOutShape;
    if (keepDims) {
        // reshape
        const newShape1 = (0, _tfjsCore.backend_util).expandShapeToKeepDim(maxOutShape, origAxes);
        outShape = newShape1;
    }
    return {
        dataId,
        shape: outShape,
        dtype: x.dtype
    };
}
const maxConfig = {
    kernelName: (0, _tfjsCore.Max),
    backendName: "cpu",
    kernelFunc: max
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Max_impl":"hvZsa","./Transpose_impl":"fwwXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvZsa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxImpl", ()=>maxImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function maxImpl(aVals, reduceSize, outShape, dtype) {
    const vals = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(outShape));
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let max = aVals[offset];
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            if (Number.isNaN(value) || value > max) max = value;
        }
        vals[i] = max;
    }
    return vals;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"RXVtR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maximumImpl", ()=>maximumImpl);
parcelHelpers.export(exports, "maximum", ()=>maximum);
parcelHelpers.export(exports, "maximumConfig", ()=>maximumConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const maximumImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>Math.max(aValue, bValue));
const maximum = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Maximum), maximumImpl);
const maximumConfig = {
    kernelName: (0, _tfjsCore.Maximum),
    backendName: "cpu",
    kernelFunc: maximum
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liF0x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool", ()=>maxPool);
parcelHelpers.export(exports, "maxPoolConfig", ()=>maxPoolConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
var _identity = require("./Identity");
function maxPool(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    (0, _cpuUtil.assertNotComplex)(x, "maxPool");
    const { filterSize , strides , pad , dimRoundingMode  } = attrs;
    const dilations = 1;
    (0, _tfjsCore.util).assert((0, _tfjsCore.backend_util).eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    let res;
    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && (0, _tfjsCore.util).arraysEqual(convInfo.inShape, convInfo.outShape)) res = (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    else {
        const xValues = backend.data.get(x.dataId).values;
        const strides1 = (0, _tfjsCore.util).computeStrides(x.shape);
        const buffer = (0, _poolUtils.pool)(xValues, x.shape, x.dtype, strides1, convInfo, "max");
        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
    }
    return res;
}
const maxPoolConfig = {
    kernelName: (0, _tfjsCore.MaxPool),
    backendName: "cpu",
    kernelFunc: maxPool
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","./Identity":"9BGOC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hNa5k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool3D", ()=>maxPool3D);
parcelHelpers.export(exports, "maxPool3DConfig", ()=>maxPool3DConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
function maxPool3D(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { filterSize , strides , pad , dimRoundingMode , dataFormat  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "maxPool3d");
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode, dataFormat);
    const xValues = backend.data.get(x.dataId).values;
    const outBuf = (0, _poolUtils.pool3d)(xValues, x.shape, x.dtype, (0, _tfjsCore.util).computeStrides(x.shape), convInfo, "max");
    return backend.makeTensorInfo(outBuf.shape, "float32", outBuf.values);
}
const maxPool3DConfig = {
    kernelName: (0, _tfjsCore.MaxPool3D),
    backendName: "cpu",
    kernelFunc: maxPool3D
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Jck4C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool3DGrad", ()=>maxPool3DGrad);
parcelHelpers.export(exports, "maxPool3DGradConfig", ()=>maxPool3DGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
function maxPool3DGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , input  } = inputs;
    const { filterSize , strides , pad , dimRoundingMode  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        input
    ], "maxPool3DGrad");
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
    const inputBuf = backend.bufferSync(input);
    const maxPosBuf = (0, _poolUtils.maxPool3dPositions)(inputBuf, convInfo);
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const dx = (0, _tfjsCore.buffer)(input.shape, "float32");
    const dyBuf = backend.bufferSync(dy);
    for(let batch = 0; batch < convInfo.batchSize; ++batch){
        for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth){
            for(let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow)for(let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol){
                // Shader code begins
                const dyDepthCorner = dxDepth - padFront;
                const dyRowCorner = dxRow - padTop;
                const dyColCorner = dxCol - padLeft;
                let dotProd = 0;
                for(let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth){
                    const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                    if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) continue;
                    for(let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight){
                        const dyRow = (dyRowCorner + wRow) / strideHeight;
                        if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) continue;
                        for(let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth){
                            const dyCol = (dyColCorner + wCol) / strideWidth;
                            if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) continue;
                            const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                            const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;
                            const mask = maxPos === curPos ? 1 : 0;
                            if (mask === 0) continue;
                            const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                            dotProd += pixel * mask;
                        }
                    }
                }
                dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);
            }
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const maxPool3DGradConfig = {
    kernelName: (0, _tfjsCore.MaxPool3DGrad),
    backendName: "cpu",
    kernelFunc: maxPool3DGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOGoj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolGrad", ()=>maxPoolGrad);
parcelHelpers.export(exports, "maxPoolGradConfig", ()=>maxPoolGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _poolUtils = require("../utils/pool_utils");
function maxPoolGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { dy , input , output  } = inputs;
    const x = input;
    (0, _cpuUtil.assertNotComplex)([
        input,
        output
    ], "maxPoolGrad");
    const { filterSize , strides , pad , dimRoundingMode  } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
    const xValues = backend.data.get(x.dataId).values;
    const maxPosBuf = (0, _tfjsCore.buffer)(convInfo.outShape, x.dtype, (0, _poolUtils.maxPoolPositions)(xValues, x.shape, x.dtype, convInfo).values);
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const dx = (0, _tfjsCore.buffer)(x.shape, "float32");
    const dyData = backend.data.get(dy.dataId).values;
    const dyBuf = (0, _tfjsCore.buffer)(dy.shape, "float32", dyData);
    for(let b = 0; b < convInfo.batchSize; ++b)for(let d = 0; d < convInfo.inChannels; ++d){
        for(let dxR = 0; dxR < convInfo.inHeight; ++dxR)for(let dxC = 0; dxC < convInfo.inWidth; ++dxC){
            // Shader code begins.
            const dyRCorner = dxR - padTop;
            const dyCCorner = dxC - padLeft;
            let dotProd = 0;
            for(let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight){
                const dyR = (dyRCorner + wR) / strideHeight;
                if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) continue;
                for(let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth){
                    const dyC = (dyCCorner + wC) / strideWidth;
                    if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) continue;
                    const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);
                    const curPos = wR * effectiveFilterWidth + wC;
                    const mask = maxPos === curPos ? 1 : 0;
                    if (mask === 0) continue;
                    const pixel = dyBuf.get(b, dyR, dyC, d);
                    dotProd += pixel * mask;
                }
            }
            dx.set(dotProd, b, dxR, dxC, d);
        }
    }
    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const maxPoolGradConfig = {
    kernelName: (0, _tfjsCore.MaxPoolGrad),
    backendName: "cpu",
    kernelFunc: maxPoolGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7aetn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxConfig", ()=>maxPoolWithArgmaxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _maxPoolWithArgmaxImpl = require("./MaxPoolWithArgmax_impl");
const maxPoolWithArgmaxConfig = {
    kernelName: (0, _tfjsCore.MaxPoolWithArgmax),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { filterSize , strides , pad , includeBatchInIndex  } = attrs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(x, "MaxPoolWithArgmax");
        const values = cpuBackend.data.get(x.dataId).values;
        const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, [
            1,
            1
        ], pad);
        const [pooled, indexes] = (0, _maxPoolWithArgmaxImpl.maxPoolWithArgmaxImpl)(values, x.shape, x.dtype, includeBatchInIndex, convInfo);
        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);
        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);
        return [
            {
                dataId: pooledDataId,
                shape: convInfo.outShape,
                dtype: x.dtype
            },
            {
                dataId: indexesDataId,
                shape: convInfo.outShape,
                dtype: "int32"
            }
        ];
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./MaxPoolWithArgmax_impl":"bkc1d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bkc1d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxImpl", ()=>maxPoolWithArgmaxImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _poolUtils = require("../utils/pool_utils");
function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {
    const strides = (0, _tfjsCore.util).computeStrides(xShape);
    const maxPools = (0, _poolUtils.pool)(xValues, xShape, dtype, strides, convInfo, "max");
    const maxPositions = (0, _poolUtils.maxPoolPositions)(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);
    return [
        maxPools.values,
        maxPositions.values
    ];
}

},{"@tensorflow/tfjs-core":"2votT","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3W8X3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mean", ()=>mean);
parcelHelpers.export(exports, "meanConfig", ()=>meanConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
var _realDiv = require("./RealDiv");
var _sum = require("./Sum");
function mean(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    const axes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    const shapes = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
    const reduceShape = shapes[1];
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const toDispose = [];
    const reduceSizeScalar = backend.makeTensorInfo([], "float32", new Float32Array([
        reduceSize
    ]));
    toDispose.push(reduceSizeScalar);
    const $x = (0, _cast.cast)({
        inputs: {
            x
        },
        backend,
        attrs: {
            dtype: "float32"
        }
    });
    toDispose.push($x);
    const res = (0, _realDiv.div)({
        inputs: {
            a: $x,
            b: reduceSizeScalar
        },
        backend
    });
    toDispose.push(res);
    const result = (0, _sum.sum)({
        inputs: {
            x: res
        },
        backend,
        attrs: {
            axis,
            keepDims
        }
    });
    toDispose.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return result;
}
const meanConfig = {
    kernelName: (0, _tfjsCore.Mean),
    backendName: "cpu",
    kernelFunc: mean
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"hBSGR","./RealDiv":"bCsfW","./Sum":"43iZ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byuMo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "minConfig", ()=>minConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function min(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "min");
    const origAxes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    let axes = origAxes;
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, x.shape.length);
    let $x = x;
    if (permutedAxes != null) {
        $x = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutedAxes
            }
        });
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, x.shape.length);
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("min", axes, $x.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes($x.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const vals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(outShape), $x.dtype);
    const aVals = backend.data.get($x.dataId).values;
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let min = aVals[offset];
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            if (Number.isNaN(value) || value < min) min = value;
        }
        vals[i] = min;
    }
    if (permutedAxes != null) backend.disposeIntermediateTensorInfo($x);
    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
    if (keepDims) {
        const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(outShape, origAxes);
        const reshapedResult = (0, _reshape.reshape)({
            inputs: {
                x: result
            },
            backend,
            attrs: {
                shape: expandedShape
            }
        });
        backend.disposeIntermediateTensorInfo(result);
        return reshapedResult;
    }
    return result;
}
const minConfig = {
    kernelName: (0, _tfjsCore.Min),
    backendName: "cpu",
    kernelFunc: min
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJ4x0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minimumImpl", ()=>minimumImpl);
parcelHelpers.export(exports, "minimum", ()=>minimum);
parcelHelpers.export(exports, "minimumConfig", ()=>minimumConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const minimumImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>Math.min(aValue, bValue));
const minimum = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Minimum), minimumImpl);
const minimumConfig = {
    kernelName: (0, _tfjsCore.Minimum),
    backendName: "cpu",
    kernelFunc: minimum
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lmnj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mirrorPad", ()=>mirrorPad);
parcelHelpers.export(exports, "mirrorPadConfig", ()=>mirrorPadConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function mirrorPad(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { paddings , mode  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "mirrorPad");
    const outShape = paddings.map((p, i)=>p[0] + x.shape[i] + p[1]);
    const start = paddings.map((p)=>p[0]);
    const end = paddings.map((p, i)=>p[0] + x.shape[i]);
    const offset = mode === "reflect" ? 0 : 1;
    const xVals = backend.data.get(x.dataId).values;
    const xRank = x.shape.length;
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const resultSize = (0, _tfjsCore.util).sizeFromShape(outShape);
    const resultRank = outShape.length;
    const resultStrides = (0, _tfjsCore.util).computeStrides(outShape);
    const resVals = (0, _tfjsCore.util).getTypedArrayFromDType(x.dtype, resultSize);
    for(let i = 0; i < resultSize; i++){
        let coords = (0, _tfjsCore.util).indexToLoc(i, resultRank, resultStrides);
        for(let i1 = 0; i1 < resultRank; i1++){
            if (coords[i1] < start[i1]) coords[i1] = start[i1] * 2 - coords[i1] - offset;
            else if (coords[i1] >= end[i1]) coords[i1] = (end[i1] - 1) * 2 - coords[i1] + offset;
        }
        coords = coords.map((c, i)=>c - start[i]);
        const inIndex = (0, _tfjsCore.util).locToIndex(coords, xRank, xStrides);
        resVals[i] = xVals[inIndex];
    }
    const outId = backend.write(resVals, outShape, x.dtype);
    return {
        dataId: outId,
        shape: outShape,
        dtype: x.dtype
    };
}
const mirrorPadConfig = {
    kernelName: (0, _tfjsCore.MirrorPad),
    backendName: "cpu",
    kernelFunc: mirrorPad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9S2k0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modImpl", ()=>modImpl);
parcelHelpers.export(exports, "mod", ()=>mod);
parcelHelpers.export(exports, "modConfig", ()=>modConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const modImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((aValue, bValue)=>{
    const rem = aValue % bValue;
    if (aValue < 0 && bValue < 0 || aValue >= 0 && bValue >= 0) return rem;
    else return (rem + bValue) % bValue;
});
const mod = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Mod), modImpl);
const modConfig = {
    kernelName: (0, _tfjsCore.Mod),
    backendName: "cpu",
    kernelFunc: mod
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lynEl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomial", ()=>multinomial);
parcelHelpers.export(exports, "multinomialConfig", ()=>multinomialConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _seedrandom = require("seedrandom");
var _cpuUtil = require("../cpu_util");
var _softmax = require("./Softmax");
function multinomial(args) {
    const { inputs , backend , attrs  } = args;
    const { logits  } = inputs;
    const { numSamples , seed , normalized  } = attrs;
    (0, _cpuUtil.assertNotComplex)(logits, "multinomial");
    const probabilities = normalized ? logits : (0, _softmax.softmax)({
        inputs: {
            logits
        },
        backend,
        attrs: {
            dim: -1
        }
    });
    const batchSize = probabilities.shape[0];
    const numEvents = probabilities.shape[1];
    const probVals = backend.data.get(probabilities.dataId).values;
    const resShape = [
        batchSize,
        numSamples
    ];
    const resVals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(resShape), "int32");
    for(let b = 0; b < batchSize; ++b){
        const offset = b * numEvents;
        // The cdf won't include the last event. It will be implicit if no other
        // event happened.
        const cdf = new Float32Array(numEvents - 1);
        cdf[0] = probVals[offset];
        for(let event = 1; event < cdf.length; ++event)cdf[event] = cdf[event - 1] + probVals[offset + event];
        const random = _seedrandom.alea(seed.toString());
        const outOffset = b * numSamples;
        for(let sampleId = 0; sampleId < numSamples; ++sampleId){
            const r = random();
            // Assume last event happened by default.
            resVals[outOffset + sampleId] = cdf.length;
            for(let event1 = 0; event1 < cdf.length; event1++)if (r < cdf[event1]) {
                resVals[outOffset + sampleId] = event1;
                break;
            }
        }
    }
    if (!normalized) backend.disposeIntermediateTensorInfo(probabilities);
    return backend.makeTensorInfo(resShape, "int32", resVals);
}
const multinomialConfig = {
    kernelName: (0, _tfjsCore.Multinomial),
    backendName: "cpu",
    kernelFunc: multinomial
};

},{"@tensorflow/tfjs-core":"2votT","seedrandom":"kcfU7","../cpu_util":"ii07P","./Softmax":"3yg40","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3yg40":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softmax", ()=>softmax);
parcelHelpers.export(exports, "softmaxConfig", ()=>softmaxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _exp = require("./Exp");
var _max = require("./Max");
var _realDiv = require("./RealDiv");
var _reshape = require("./Reshape");
var _sub = require("./Sub");
var _sum = require("./Sum");
function softmax(args) {
    const { inputs , backend , attrs  } = args;
    const { logits  } = inputs;
    const { dim  } = attrs;
    const logitsRank = logits.shape.length;
    let $dim = dim;
    if ($dim === -1) $dim = logitsRank - 1;
    if ($dim !== logitsRank - 1) throw Error("Softmax along a non-last dimension is not yet supported. " + `Logits was rank ${logitsRank} and dim was ${$dim}`);
    const axes = (0, _tfjsCore.util).parseAxisParam([
        $dim
    ], logits.shape);
    const maxLogit = (0, _max.max)({
        inputs: {
            x: logits
        },
        backend,
        attrs: {
            reductionIndices: axes,
            keepDims: false
        }
    });
    const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(maxLogit.shape, axes);
    const maxLogitReshaped = (0, _reshape.reshape)({
        inputs: {
            x: maxLogit
        },
        backend,
        attrs: {
            shape: expandedShape
        }
    });
    const a = (0, _sub.sub)({
        inputs: {
            a: logits,
            b: maxLogitReshaped
        },
        backend
    });
    const b = (0, _exp.exp)({
        inputs: {
            x: a
        },
        backend
    });
    const sumExp = (0, _sum.sum)({
        inputs: {
            x: b
        },
        backend,
        attrs: {
            axis: axes,
            keepDims: false
        }
    });
    const sumReshaped = (0, _reshape.reshape)({
        inputs: {
            x: sumExp
        },
        backend,
        attrs: {
            shape: expandedShape
        }
    });
    const result = (0, _realDiv.div)({
        inputs: {
            a: b,
            b: sumReshaped
        },
        backend
    });
    backend.disposeIntermediateTensorInfo(maxLogit);
    backend.disposeIntermediateTensorInfo(maxLogitReshaped);
    backend.disposeIntermediateTensorInfo(a);
    backend.disposeIntermediateTensorInfo(b);
    backend.disposeIntermediateTensorInfo(sumExp);
    backend.disposeIntermediateTensorInfo(sumReshaped);
    return result;
}
const softmaxConfig = {
    kernelName: (0, _tfjsCore.Softmax),
    backendName: "cpu",
    kernelFunc: softmax
};

},{"@tensorflow/tfjs-core":"2votT","./Exp":"d8DGt","./Max":"l27XB","./RealDiv":"bCsfW","./Reshape":"hjnko","./Sub":"anrdl","./Sum":"43iZ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxJzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "negImpl", ()=>negImpl);
parcelHelpers.export(exports, "neg", ()=>neg);
parcelHelpers.export(exports, "negConfig", ()=>negConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _multiply = require("./Multiply");
function negImpl(xVals, xShape, xDtype) {
    const minusOne = (0, _tfjsCore.util).createScalarValue(-1, xDtype);
    return (0, _multiply.multiplyImpl)([], xShape, minusOne, xVals, xDtype);
}
function neg(args) {
    const { inputs , backend  } = args;
    const { x  } = inputs;
    (0, _cpuUtil.assertNotComplex)(x, "neg");
    const xVals = backend.data.get(x.dataId).values;
    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);
    return backend.makeTensorInfo(newShape, x.dtype, res);
}
const negConfig = {
    kernelName: (0, _tfjsCore.Neg),
    backendName: "cpu",
    kernelFunc: neg
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Multiply":"8yTpL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ec5f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3", ()=>nonMaxSuppressionV3);
parcelHelpers.export(exports, "nonMaxSuppressionV3Config", ()=>nonMaxSuppressionV3Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const nonMaxSuppressionV3Impl = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV3Impl;
function nonMaxSuppressionV3(args) {
    const { inputs , backend , attrs  } = args;
    const { boxes , scores  } = inputs;
    const { maxOutputSize , iouThreshold , scoreThreshold  } = attrs;
    (0, _cpuUtil.assertNotComplex)(boxes, "NonMaxSuppression");
    const boxesVals = backend.data.get(boxes.dataId).values;
    const scoresVals = backend.data.get(scores.dataId).values;
    const { selectedIndices  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    return backend.makeTensorInfo([
        selectedIndices.length
    ], "int32", new Int32Array(selectedIndices));
}
const nonMaxSuppressionV3Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV3),
    backendName: "cpu",
    kernelFunc: nonMaxSuppressionV3
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acYUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV4", ()=>nonMaxSuppressionV4);
parcelHelpers.export(exports, "nonMaxSuppressionV4Config", ()=>nonMaxSuppressionV4Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const nonMaxSuppressionV4Impl = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV4Impl;
function nonMaxSuppressionV4(args) {
    const { inputs , backend , attrs  } = args;
    const { boxes , scores  } = inputs;
    const { maxOutputSize , iouThreshold , scoreThreshold , padToMaxOutputSize  } = attrs;
    (0, _cpuUtil.assertNotComplex)(boxes, "NonMaxSuppressionPadded");
    const boxesVals = backend.data.get(boxes.dataId).values;
    const scoresVals = backend.data.get(scores.dataId).values;
    const { selectedIndices , validOutputs  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
    return [
        backend.makeTensorInfo([
            selectedIndices.length
        ], "int32", new Int32Array(selectedIndices)),
        backend.makeTensorInfo([], "int32", new Int32Array([
            validOutputs
        ]))
    ];
}
const nonMaxSuppressionV4Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV4),
    backendName: "cpu",
    kernelFunc: nonMaxSuppressionV4
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fshul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV5", ()=>nonMaxSuppressionV5);
parcelHelpers.export(exports, "nonMaxSuppressionV5Config", ()=>nonMaxSuppressionV5Config);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const nonMaxSuppressionV5Impl = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV5Impl;
function nonMaxSuppressionV5(args) {
    const { inputs , backend , attrs  } = args;
    const { boxes , scores  } = inputs;
    const { maxOutputSize , iouThreshold , scoreThreshold , softNmsSigma  } = attrs;
    (0, _cpuUtil.assertNotComplex)(boxes, "NonMaxSuppressionWithScore");
    const boxesVals = backend.data.get(boxes.dataId).values;
    const scoresVals = backend.data.get(scores.dataId).values;
    const maxOutputSizeVal = maxOutputSize;
    const iouThresholdVal = iouThreshold;
    const scoreThresholdVal = scoreThreshold;
    const softNmsSigmaVal = softNmsSigma;
    const { selectedIndices , selectedScores  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
    return [
        backend.makeTensorInfo([
            selectedIndices.length
        ], "int32", new Int32Array(selectedIndices)),
        backend.makeTensorInfo([
            selectedScores.length
        ], "float32", new Float32Array(selectedScores))
    ];
}
const nonMaxSuppressionV5Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV5),
    backendName: "cpu",
    kernelFunc: nonMaxSuppressionV5
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKKl8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notEqualImpl", ()=>notEqualImpl);
parcelHelpers.export(exports, "notEqual", ()=>notEqual);
parcelHelpers.export(exports, "notEqualConfig", ()=>notEqualConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const notEqualImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>a !== b ? 1 : 0);
const notEqual = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.NotEqual), notEqualImpl, null, "bool");
const notEqualConfig = {
    kernelName: (0, _tfjsCore.NotEqual),
    backendName: "cpu",
    kernelFunc: notEqual
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gjO62":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oneHot", ()=>oneHot);
parcelHelpers.export(exports, "oneHotConfig", ()=>oneHotConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function oneHot(args) {
    const { inputs , backend , attrs  } = args;
    const { indices  } = inputs;
    const { dtype , depth , onValue , offValue  } = attrs;
    (0, _cpuUtil.assertNotComplex)(indices, "oneHot");
    const indicesSize = (0, _tfjsCore.util).sizeFromShape(indices.shape);
    const res = new Float32Array(indicesSize * depth);
    res.fill(offValue);
    const indicesVal = backend.data.get(indices.dataId).values;
    for(let event = 0; event < indicesSize; ++event)if (indicesVal[event] >= 0 && indicesVal[event] < depth) res[event * depth + indicesVal[event]] = onValue;
    return backend.makeTensorInfo([
        ...indices.shape,
        depth
    ], dtype, res);
}
const oneHotConfig = {
    kernelName: (0, _tfjsCore.OneHot),
    backendName: "cpu",
    kernelFunc: oneHot
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Wf9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onesLike", ()=>onesLike);
parcelHelpers.export(exports, "onesLikeConfig", ()=>onesLikeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _complex = require("./Complex");
var _fill = require("./Fill");
var _imag = require("./Imag");
var _real = require("./Real");
var _zerosLike = require("./ZerosLike");
function onesLike(args) {
    const { inputs , backend  } = args;
    const { x  } = inputs;
    if (x.dtype === "string") throw new Error("onesLike is not supported for string tensors");
    else if (x.dtype === "complex64") {
        const realPart = (0, _real.real)({
            inputs: {
                input: x
            },
            backend
        });
        const r = onesLike({
            inputs: {
                x: realPart
            },
            backend
        });
        const imagPart = (0, _imag.imag)({
            inputs: {
                input: x
            },
            backend
        });
        const i = (0, _zerosLike.zerosLike)({
            inputs: {
                x: imagPart
            },
            backend
        });
        const result = (0, _complex.complex)({
            inputs: {
                real: r,
                imag: i
            },
            backend
        });
        backend.disposeIntermediateTensorInfo(realPart);
        backend.disposeIntermediateTensorInfo(r);
        backend.disposeIntermediateTensorInfo(imagPart);
        backend.disposeIntermediateTensorInfo(i);
        return result;
    } else return (0, _fill.fill)({
        backend,
        attrs: {
            shape: x.shape,
            value: 1,
            dtype: x.dtype
        }
    });
}
const onesLikeConfig = {
    kernelName: (0, _tfjsCore.OnesLike),
    backendName: "cpu",
    kernelFunc: onesLike
};

},{"@tensorflow/tfjs-core":"2votT","./Complex":"ihUM4","./Fill":"5TrpK","./Imag":"jPu41","./Real":"8fguZ","./ZerosLike":"8cgVj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8cgVj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zerosLike", ()=>zerosLike);
parcelHelpers.export(exports, "zerosLikeConfig", ()=>zerosLikeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _complex = require("./Complex");
var _fill = require("./Fill");
var _imag = require("./Imag");
var _real = require("./Real");
function zerosLike(args) {
    const { inputs , backend  } = args;
    const { x  } = inputs;
    if (x.dtype === "string") throw new Error("zerosLike is not supported for string tensors");
    else if (x.dtype === "complex64") {
        const realPart = (0, _real.real)({
            inputs: {
                input: x
            },
            backend
        });
        const r = zerosLike({
            inputs: {
                x: realPart
            },
            backend
        });
        const imagPart = (0, _imag.imag)({
            inputs: {
                input: x
            },
            backend
        });
        const i = zerosLike({
            inputs: {
                x: imagPart
            },
            backend
        });
        const result = (0, _complex.complex)({
            inputs: {
                real: r,
                imag: i
            },
            backend
        });
        backend.disposeIntermediateTensorInfo(realPart);
        backend.disposeIntermediateTensorInfo(r);
        backend.disposeIntermediateTensorInfo(imagPart);
        backend.disposeIntermediateTensorInfo(i);
        return result;
    } else return (0, _fill.fill)({
        backend,
        attrs: {
            shape: x.shape,
            value: 0,
            dtype: x.dtype
        }
    });
}
const zerosLikeConfig = {
    kernelName: (0, _tfjsCore.ZerosLike),
    backendName: "cpu",
    kernelFunc: zerosLike
};

},{"@tensorflow/tfjs-core":"2votT","./Complex":"ihUM4","./Fill":"5TrpK","./Imag":"jPu41","./Real":"8fguZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2K9N7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pack", ()=>pack);
parcelHelpers.export(exports, "packConfig", ()=>packConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _concat = require("./Concat");
var _expandDims = require("./ExpandDims");
function pack(args) {
    const { inputs , backend , attrs  } = args;
    const { axis  } = attrs;
    if (inputs.length === 1) return (0, _expandDims.expandDims)({
        inputs: {
            input: inputs[0]
        },
        backend,
        attrs: {
            dim: axis
        }
    });
    const shape = inputs[0].shape;
    const dtype = inputs[0].dtype;
    inputs.forEach((t)=>{
        (0, _tfjsCore.util).assertShapesMatch(shape, t.shape, "All tensors passed to stack must have matching shapes");
        (0, _tfjsCore.util).assert(dtype === t.dtype, ()=>"All tensors passed to stack must have matching dtypes");
    });
    const intermediateTensorInfos = [];
    const expandedTensors = inputs.map((t)=>{
        const expandedT = (0, _expandDims.expandDims)({
            inputs: {
                input: t
            },
            backend,
            attrs: {
                dim: axis
            }
        });
        intermediateTensorInfos.push(expandedT);
        return expandedT;
    });
    const result = (0, _concat.concat)({
        inputs: expandedTensors,
        backend,
        attrs: {
            axis
        }
    });
    intermediateTensorInfos.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return result;
}
const packConfig = {
    kernelName: (0, _tfjsCore.Pack),
    backendName: "cpu",
    kernelFunc: pack
};

},{"@tensorflow/tfjs-core":"2votT","./Concat":"1wEpn","./ExpandDims":"8V7D8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fMo7E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "padV2", ()=>padV2);
parcelHelpers.export(exports, "padV2Config", ()=>padV2Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function padV2(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { paddings , constantValue  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "pad");
    const outShape = paddings.map((p, i)=>p[0] + x.shape[i] + p[1]);
    const start = paddings.map((p)=>p[0]);
    const xVals = backend.data.get(x.dataId).values;
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const xRank = x.shape.length;
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const resultSize = (0, _tfjsCore.util).sizeFromShape(outShape);
    const resultRank = outShape.length;
    const resultStrides = (0, _tfjsCore.util).computeStrides(outShape);
    const resVals = (0, _tfjsCore.util).getTypedArrayFromDType(x.dtype, resultSize);
    if (constantValue !== 0) resVals.fill(constantValue);
    for(let i = 0; i < xSize; i++){
        const coords = (0, _tfjsCore.util).indexToLoc(i, xRank, xStrides);
        const outCoords = coords.map((c, i)=>c + start[i]);
        const outIndex = (0, _tfjsCore.util).locToIndex(outCoords, resultRank, resultStrides);
        resVals[outIndex] = xVals[i];
    }
    const outId = backend.write(resVals, outShape, x.dtype);
    return {
        dataId: outId,
        shape: outShape,
        dtype: x.dtype
    };
}
const padV2Config = {
    kernelName: (0, _tfjsCore.PadV2),
    backendName: "cpu",
    kernelFunc: padV2
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4rKF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powImpl", ()=>powImpl);
parcelHelpers.export(exports, "pow", ()=>pow);
parcelHelpers.export(exports, "powConfig", ()=>powConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const powImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>Math.pow(a, b));
const pow = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.Pow), powImpl);
const powConfig = {
    kernelName: (0, _tfjsCore.Pow),
    backendName: "cpu",
    kernelFunc: pow
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PRq1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prodImpl", ()=>prodImpl);
parcelHelpers.export(exports, "prod", ()=>prod);
parcelHelpers.export(exports, "prodConfig", ()=>prodConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transpose = require("./Transpose");
function prodImpl(xShape, xDtype, xVals, reductionAxes) {
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(xShape, reductionAxes);
    const outDtype = (0, _tfjsCore.upcastType)(xDtype, "int32");
    const outVals = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(outShape), outDtype);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    for(let i = 0; i < outVals.length; ++i){
        const offset = i * reduceSize;
        let prod = 1;
        for(let j = 0; j < reduceSize; ++j)prod *= xVals[offset + j];
        outVals[i] = prod;
    }
    return {
        outVals,
        outShape,
        outDtype
    };
}
function prod(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { axis , keepDims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "prod");
    const xRank = x.shape.length;
    const axes = (0, _tfjsCore.util).parseAxisParam(axis, x.shape);
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
    let reductionAxes = axes;
    let permutedX = x;
    const intermediateTensorInfos = [];
    if (permutation != null) {
        permutedX = (0, _transpose.transpose)({
            inputs: {
                x
            },
            backend,
            attrs: {
                perm: permutation
            }
        });
        intermediateTensorInfos.push(permutedX);
        reductionAxes = (0, _tfjsCore.backend_util).getInnerMostAxes(reductionAxes.length, xRank);
    }
    const xVals = backend.data.get(permutedX.dataId).values;
    const { outVals , outShape , outDtype  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);
    let resultShape = outShape;
    if (keepDims) resultShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(outShape, axes);
    intermediateTensorInfos.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return backend.makeTensorInfo(resultShape, outDtype, outVals);
}
const prodConfig = {
    kernelName: (0, _tfjsCore.Prod),
    backendName: "cpu",
    kernelFunc: prod
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87mpp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "raggedTensorToTensor", ()=>raggedTensorToTensor);
parcelHelpers.export(exports, "raggedTensorToTensorConfig", ()=>raggedTensorToTensorConfig);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _raggedTensorToTensorImpl = require("./RaggedTensorToTensor_impl");
function raggedTensorToTensor(args) {
    const { inputs , backend , attrs  } = args;
    const { shape , values , defaultValue , rowPartitionTensors  } = inputs;
    const { rowPartitionTypes  } = attrs;
    const $shape = backend.data.get(shape.dataId).values;
    const $values = backend.data.get(values.dataId).values;
    const $defaultValue = backend.data.get(defaultValue.dataId).values;
    const $rowPartitionValues = rowPartitionTensors.map((t)=>backend.data.get(t.dataId).values);
    const rowPartitionValuesShapes = rowPartitionTensors.map((t)=>t.shape);
    const [outputShape, output] = (0, _raggedTensorToTensorImpl.raggedTensorToTensorImpl)($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);
    return backend.makeTensorInfo(outputShape, values.dtype, output);
}
const raggedTensorToTensorConfig = {
    kernelName: (0, _tfjsCore.RaggedTensorToTensor),
    backendName: "cpu",
    kernelFunc: raggedTensorToTensor
};

},{"@tensorflow/tfjs-core":"2votT","./RaggedTensorToTensor_impl":"hBreN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBreN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "raggedTensorToTensorImpl", ()=>raggedTensorToTensorImpl);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var RowPartitionType = (0, _tfjsCore.backend_util).RowPartitionType;
// Based on
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc
class RaggedTensorToTensorOp {
    constructor(shape, shapeShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypeStrings){
        this.shape = shape;
        this.shapeShape = shapeShape;
        this.values = values;
        this.valuesShape = valuesShape;
        this.valuesDType = valuesDType;
        this.defaultValue = defaultValue;
        this.defaultValueShape = defaultValueShape;
        this.rowPartitionValues = rowPartitionValues;
        this.rowPartitionValuesShapes = rowPartitionValuesShapes;
        this.rowPartitionTypes = (0, _tfjsCore.backend_util).getRowPartitionTypesHelper(rowPartitionTypeStrings);
        this.raggedRank = (0, _tfjsCore.backend_util).getRaggedRank(this.rowPartitionTypes);
    }
    getRowPartitionTypeByDimension(dimension) {
        if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) return this.rowPartitionTypes[dimension + 1];
        else return this.rowPartitionTypes[dimension];
    }
    // Returns the relationship between dimension and dimension + 1.
    getRowPartitionTensor(dimension) {
        if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) return this.rowPartitionValues[dimension + 1];
        else return this.rowPartitionValues[dimension];
    }
    getMaxWidth(dimension) {
        const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);
        switch(this.getRowPartitionTypeByDimension(dimension - 1)){
            case RowPartitionType.VALUE_ROWIDS:
                return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);
            case RowPartitionType.ROW_SPLITS:
                return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);
            default:
                throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(dimension - 1)]}`);
        }
    }
    static getMaxWidthRowSplit(rowSplit) {
        const tensorLength = rowSplit.length;
        if (tensorLength === 0 || tensorLength === 1) return 0;
        let maxWidth = 0;
        for(let i = 0; i < tensorLength - 1; ++i){
            const currentWidth = rowSplit[i + 1] - rowSplit[i];
            if (currentWidth > maxWidth) maxWidth = currentWidth;
        }
        return maxWidth;
    }
    static getMaxWidthValueRowID(valueRowIds) {
        const indexLength = valueRowIds.length;
        if (indexLength === 0) return 0;
        let firstEqualIndex = 0;
        let firstEqualIndexValue = valueRowIds[0];
        let maxWidth = 0;
        for(let i = 1; i < indexLength; ++i){
            const value = valueRowIds[i];
            if (value !== firstEqualIndexValue) {
                firstEqualIndexValue = value;
                maxWidth = Math.max(i - firstEqualIndex, maxWidth);
                firstEqualIndex = i;
            }
        }
        return Math.max(indexLength - firstEqualIndex, maxWidth);
    }
    tensorShapeFromTensor(t, tShape, isPartial = true) {
        if (tShape.length === 0) {
            if (t[0] === -1) return [];
            throw new Error(`The only valid scalar shape tensor is the fully unknown shape specified as -1.`);
        }
        // MakePartialShape/MakeShapeHelper.
        return makeShape(t, isPartial);
    }
    calculateOutputSize(firstDim) {
        const valueShape = this.valuesShape;
        const defaultValueShape = this.defaultValueShape;
        (0, _tfjsCore.backend_util).validateDefaultValueShape(defaultValueShape, valueShape);
        const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);
        const outputShape = (0, _tfjsCore.backend_util).combineRaggedTensorToTensorShapes(this.raggedRank, shape, valueShape);
        const result = outputShape;
        if (result[0] < 0) result[0] = firstDim;
        for(let i = 1; i <= this.raggedRank; ++i)if (result[i] < 0) result[i] = this.getMaxWidth(i);
        return result;
    }
    /**
     * The outputIndex represents the index in the output tensor
     * where the first element of a particular dimension would be written.
     * If it is -1, it indicates that the index is out of scope.
     * Example, given firstDimension = 10, firstDimensionOutput = 6,
     * and outputIndexMultiplier = 100:
     * result = [0 100 200 300 400 500 -1 -1 -1 -1]
     * If firstDimensionOutput = 11 instead, then:
     * result = [0 100 200 300 400 500 600 700 800 900]
     */ calculateFirstParentOutputIndex(firstDimension, outputIndexMultiplier, firstDimensionOutput) {
        const minDimension = Math.min(firstDimension, firstDimensionOutput);
        const result = [];
        let currentOutputIndex = 0;
        for(let i = 0; i < minDimension; ++i, currentOutputIndex += outputIndexMultiplier)result.push(currentOutputIndex);
        for(let i1 = minDimension; i1 < firstDimension; ++i1)result.push(-1);
        (0, _tfjsCore.util).assert(result.length === firstDimension, ()=>"Final length of result must be equal to firstDimension.");
        return result;
    }
    calculateOutputIndexRowSplit(rowSplit, parentOutputIndex, outputIndexMultiplier, outputSize) {
        const rowSplitSize = rowSplit.length;
        const result = [];
        for(let i = 0; i < rowSplitSize - 1; ++i){
            const rowLength = rowSplit[i + 1] - rowSplit[i];
            let realLength = Math.min(outputSize, rowLength);
            let parentOutputIndexCurrent = parentOutputIndex[i];
            if (parentOutputIndexCurrent === -1) realLength = 0;
            for(let j = 0; j < realLength; ++j){
                result.push(parentOutputIndexCurrent);
                parentOutputIndexCurrent += outputIndexMultiplier;
            }
            for(let j1 = 0; j1 < rowLength - realLength; ++j1)result.push(-1);
        }
        if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) throw new Error("Invalid row split size.");
        return result;
    }
    // Calculate the output index of the first element of a list.
    // The parentOutputIndex is the same computation for the previous list.
    // -1 indicates an element or list that is out of range.
    // The outputIndexMultiplier is the number of output indices one moves
    // forward for each column.
    // E.g., given:
    // valueRowIds:[0 1 2 2 2 3 5 5 6]
    // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
    // outputIndexMultiplier: 10
    // outputSize: 2
    // You get:
    // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
    // result[0] = parentOutputIndex[valueRowIds[0]]
    // result[1] = parentOutputIndex[valueRowIds[1]]
    // result[2] = parentOutputIndex[valueRowIds[2]]
    // result[3] = parentOutputIndex[valueRowIds[2] + 10]
    // result[4] = -1 because it is the third element the size is 2.
    // result[5] = parentOutputIndex[valueRowIds[3]]
    // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
    // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
    // result[8] = parentOutputIndex[valueRowIds[7]]
    calculateOutputIndexValueRowID(valueRowIds, parentOutputIndex, outputIndexMultiplier, outputSize) {
        const indexSize = valueRowIds.length;
        const result = [];
        if (indexSize === 0) return [];
        let currentOutputColumn = 0;
        let currentValueRowId = valueRowIds[0];
        if (currentValueRowId >= parentOutputIndex.length) throw new Error(`Got currentValueRowId=${currentValueRowId}, which is not less than ${parentOutputIndex.length}`);
        let currentOutputIndex = parentOutputIndex[currentValueRowId];
        result.push(currentOutputIndex);
        for(let i = 1; i < indexSize; ++i){
            const nextValueRowId = valueRowIds[i];
            if (nextValueRowId === currentValueRowId) {
                if (currentOutputIndex >= 0) {
                    ++currentOutputColumn;
                    if (currentOutputColumn < outputSize) currentOutputIndex += outputIndexMultiplier;
                    else currentOutputIndex = -1;
                }
            } else {
                currentOutputColumn = 0;
                currentValueRowId = nextValueRowId;
                if (nextValueRowId >= parentOutputIndex.length) throw new Error(`Got nextValueRowId=${nextValueRowId} which is not less than ${parentOutputIndex.length}`);
                currentOutputIndex = parentOutputIndex[nextValueRowId];
            }
            result.push(currentOutputIndex);
        }
        if (result.length !== valueRowIds.length) throw new Error("Invalid row ids.");
        return result;
    }
    calculateOutputIndex(dimension, parentOutputIndex, outputIndexMultiplier, outputSize) {
        const rowPartitionTensor = this.getRowPartitionTensor(dimension);
        const partitionType = this.getRowPartitionTypeByDimension(dimension);
        switch(partitionType){
            case RowPartitionType.VALUE_ROWIDS:
                return this.calculateOutputIndexValueRowID(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);
            case RowPartitionType.ROW_SPLITS:
                if (rowPartitionTensor.length - 1 > parentOutputIndex.length) throw new Error(`Row partition size is greater than output size: ${rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);
                return this.calculateOutputIndexRowSplit(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);
            default:
                throw new Error(`Unsupported partition type: ${RowPartitionType[partitionType]}`);
        }
    }
    getFirstDimensionSize() {
        const firstPartitionTensor = this.rowPartitionValues[0];
        if (this.rowPartitionTypes.length === 0) throw new Error("No row_partition_types given.");
        const firstPartitionType = this.rowPartitionTypes[0];
        switch(firstPartitionType){
            case RowPartitionType.FIRST_DIM_SIZE:
                return firstPartitionTensor[0];
            case RowPartitionType.VALUE_ROWIDS:
                throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
            case RowPartitionType.ROW_SPLITS:
                return this.rowPartitionValuesShapes[0][0] - 1;
            default:
                throw new Error(`Cannot handle type ${RowPartitionType[firstPartitionType]}`);
        }
    }
    compute() {
        const firstPartitionTensor = this.rowPartitionValues[0];
        if (firstPartitionTensor.length <= 0) throw new Error("Invalid first partition input. Tensor requires at least one element.");
        const firstDimension = this.getFirstDimensionSize();
        const outputSize = this.calculateOutputSize(firstDimension);
        const multiplier = new Array(this.raggedRank + 1);
        multiplier[multiplier.length - 1] = 1;
        for(let i = multiplier.length - 2; i >= 0; --i)multiplier[i] = multiplier[i + 1] * outputSize[i + 1];
        // Full size of the tensor.
        const outputShape = makeShape(outputSize, false);
        const outputTensor = (0, _tfjsCore.util).getArrayFromDType(this.valuesDType, (0, _tfjsCore.util).sizeFromShape(outputShape));
        const fullSize = multiplier[0] * outputSize[0];
        if (fullSize > 0) {
            let outputIndex = this.calculateFirstParentOutputIndex(firstDimension, multiplier[0], outputSize[0]);
            for(let i1 = 1; i1 <= this.raggedRank; ++i1){
                const newOutputIndex = this.calculateOutputIndex(i1 - 1, outputIndex, multiplier[i1], outputSize[i1]);
                outputIndex = newOutputIndex;
            }
            this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);
        }
        return [
            outputShape,
            outputTensor
        ];
    }
    setOutput(raggedRank, outputIndex, outputTensor, outputShape) {
        if (outputTensor.length === 0) return;
        const valuesBase = this.values;
        const outputBase = outputTensor;
        let elementShape = outputShape.slice();
        elementShape = elementShape.slice(raggedRank + 1);
        const valueElementSize = (0, _tfjsCore.util).sizeFromShape(elementShape);
        const outputIndexSize = outputIndex.length;
        // Broadcast the default value to value_element_size.  (We can skip this
        // if defaultValueTensor.size == 1, since we use fill when that's true.)
        let defaultValue = this.defaultValue;
        if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {
            const srcShape = this.defaultValueShape;
            (0, _tfjsCore.tidy)(()=>{
                const defaultValueTensor = (0, _tfjsCore.reshape)(defaultValue, srcShape);
                const bCastDefault = (0, _tfjsCore.broadcastTo)(defaultValueTensor, elementShape);
                defaultValue = bCastDefault.dataSync();
            });
        }
        // Loop through the outputIndex array, finding contiguous regions that
        // should be copied.  Once we find the end of a contiguous region, copy it
        // and add any necessary padding (with defaultValue).
        let srcStart = 0; // Start of contiguous region (in values)
        let dstStart = 0; // Destination for contiguous region (in output)
        let dstEnd = 0; // Destination for contiguous region (in output)
        for(let srcI = 0; srcI <= outputIndexSize; ++srcI){
            // dstI is the destination where the value at srcI should be copied.
            let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;
            // If we're still in a contiguous region, then update dstEnd go to the
            // next srcI.
            if (dstI === dstEnd) {
                ++dstEnd;
                continue;
            }
            // We found the end of contiguous region.  This can be because we found
            // a gap (dstI > dstEnd), or a source value that shouldn't be copied
            // because it's out-of-bounds (dstI == -1), or the end of the tensor
            // (dstI === -1).
            if (dstStart < dstEnd) {
                // Copy the contiguous region.
                const src = valuesBase.subarray(srcStart * valueElementSize);
                const dst = outputBase.subarray(dstStart * valueElementSize);
                const nVals = (dstEnd - dstStart) * valueElementSize;
                copyArray(dst, src, nVals);
            }
            // Add any necessary padding (w/ defaultValue).
            if (srcI >= outputIndexSize) {
                // We reached the end of values: pad to the end of output.
                const outputSize = outputTensor.length;
                dstI = Math.floor(outputSize / valueElementSize);
            }
            if (dstI > dstEnd) {
                if (this.defaultValue.length === 1) {
                    outputBase.subarray(dstEnd * valueElementSize, dstI * valueElementSize).fill(this.defaultValue[0]);
                    dstEnd = dstI;
                } else while(dstI > dstEnd){
                    const dst1 = outputBase.slice(dstEnd * valueElementSize);
                    copyArray(dst1, defaultValue, valueElementSize);
                    ++dstEnd;
                }
            }
            // Update indices.
            if (dstI < 0) {
                // srcI should be skipped -- leave it out of the contiguous region.
                srcStart = srcI + 1;
                dstStart = dstEnd;
            } else {
                // srcI should be copied -- include it in the contiguous region.
                srcStart = srcI;
                dstStart = dstEnd;
                dstEnd = dstStart + 1;
            }
        }
    }
}
function copyArray(dst, src, size) {
    for(let i = 0; i < size; i++)dst[i] = src[i];
}
function makeShape(shape, isPartial) {
    const out = [];
    for (let dim of shape){
        if (dim < 0) {
            if (!isPartial) throw new Error(`Dimension ${dim} must be >= 0`);
            if (dim < -1) throw new Error(`Dimension ${dim} must be >= -1`);
            dim = -1;
        }
        out.push(dim);
    }
    return out;
}
function raggedTensorToTensorImpl(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes) {
    return new RaggedTensorToTensorOp(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes).compute();
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6uKr8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "range", ()=>range);
parcelHelpers.export(exports, "rangeConfig", ()=>rangeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _rangeImpl = require("./Range_impl");
function range(args) {
    const { backend , attrs  } = args;
    const { start , stop , dtype , step  } = attrs;
    const values = (0, _rangeImpl.rangeImpl)(start, stop, step, dtype);
    return backend.makeTensorInfo([
        values.length
    ], dtype, values);
}
const rangeConfig = {
    kernelName: (0, _tfjsCore.Range),
    backendName: "cpu",
    kernelFunc: range
};

},{"@tensorflow/tfjs-core":"2votT","./Range_impl":"hdHMz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdHMz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rangeImpl", ()=>rangeImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function rangeImpl(start, stop, step, dtype) {
    const sameStartStop = start === stop;
    const increasingRangeNegativeStep = start < stop && step < 0;
    const decreasingRangePositiveStep = stop < start && step > 1;
    if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) return (0, _tfjsCore.util).makeZerosTypedArray(0, dtype);
    const numElements = Math.abs(Math.ceil((stop - start) / step));
    const values = (0, _tfjsCore.util).makeZerosTypedArray(numElements, dtype);
    if (stop < start && step === 1) // Auto adjust the step's sign if it hasn't been set
    // (or was set to 1)
    step = -1;
    values[0] = start;
    for(let i = 1; i < values.length; i++)values[i] = values[i - 1] + step;
    return values;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VKal":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reciprocal", ()=>reciprocal);
parcelHelpers.export(exports, "reciprocalConfig", ()=>reciprocalConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const reciprocal = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Reciprocal), (xi)=>1 / xi);
const reciprocalConfig = {
    kernelName: (0, _tfjsCore.Reciprocal),
    backendName: "cpu",
    kernelFunc: reciprocal
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eK1Mp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeBilinear", ()=>resizeBilinear);
parcelHelpers.export(exports, "resizeBilinearConfig", ()=>resizeBilinearConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function resizeBilinear(args) {
    const { inputs , backend , attrs  } = args;
    const { images  } = inputs;
    const { alignCorners , halfPixelCenters , size  } = attrs;
    (0, _cpuUtil.assertNotComplex)(images, "resizeBilinear");
    const imagesStrides = (0, _tfjsCore.util).computeStrides(images.shape);
    const [newHeight, newWidth] = size;
    const [batch, oldHeight, oldWidth, numChannels] = images.shape;
    const xValues = backend.data.get(images.dataId).values;
    const result = new Float32Array((0, _tfjsCore.util).sizeFromShape([
        batch,
        newHeight,
        newWidth,
        numChannels
    ]));
    const effectiveInputSize = [
        alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
        alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
    ];
    const effectiveOutputSize = [
        alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
        alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
    ];
    let outputIdx = 0;
    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
    for(let b = 0; b < batch; b++)for(let r = 0; r < newHeight; r++){
        let sourceFracRow;
        if (halfPixelCenters) sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;
        else sourceFracRow = effectiveRowSizeRatio * r;
        const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));
        const rowFrac = sourceFracRow - sourceRowFloor;
        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
        const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];
        const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];
        for(let c = 0; c < newWidth; c++){
            let sourceFracCol;
            if (halfPixelCenters) sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;
            else sourceFracCol = effectiveColSizeRatio * c;
            const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));
            const colFrac = sourceFracCol - sourceColFloor;
            const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
            const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];
            const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];
            const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];
            const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];
            for(let d = 0; d < numChannels; d++){
                // Begin shader.
                // Compute the fractional index of the source.
                const topLeft = xValues[topLeftOffest + d];
                const bottomLeft = xValues[botLeftOffset + d];
                const topRight = xValues[topRightOffset + d];
                const bottomRight = xValues[botRightOffest + d];
                const top = topLeft + (topRight - topLeft) * colFrac;
                const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                const newValue = top + (bottom - top) * rowFrac;
                result[outputIdx++] = newValue;
            }
        }
    }
    return backend.makeTensorInfo([
        batch,
        newHeight,
        newWidth,
        numChannels
    ], "float32", result);
}
const resizeBilinearConfig = {
    kernelName: (0, _tfjsCore.ResizeBilinear),
    backendName: "cpu",
    kernelFunc: resizeBilinear
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRMgQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeBilinearGrad", ()=>resizeBilinearGrad);
parcelHelpers.export(exports, "resizeBilinearGradConfig", ()=>resizeBilinearGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function resizeBilinearGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { images , dy  } = inputs;
    const { alignCorners  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        images
    ], "resizeBilinearGrad");
    const imagesStrides = (0, _tfjsCore.util).computeStrides(images.shape);
    const [batch, xHeight, xWidth, depth] = images.shape;
    const [, yHeight, yWidth] = dy.shape;
    const output = new Float32Array(batch * xHeight * xWidth * depth);
    // In the backwards pass, we want to find the pixels that were generated
    // for each pixel in the input image the forward pass and add the
    // corresponding coefficient from dy to the gradient (with some
    // interpolation).
    const effectiveXSize = [
        alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
        alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
    ];
    const effectiveYSize = [
        alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
        alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
    ];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    // Reference implementation
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275
    const dyValues = backend.data.get(dy.dataId).values;
    let offset = 0;
    for(let b = 0; b < batch; b++){
        const bOffset = b * imagesStrides[0];
        for(let r = 0; r < yHeight; r++){
            const dxR = r * heightScale;
            const topDxRIndex = Math.floor(dxR);
            const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);
            const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];
            const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];
            const dxRLerp = dxR - topDxRIndex;
            const inverseDxRLerp = 1.0 - dxRLerp;
            for(let c = 0; c < yWidth; c++){
                const dxC = c * widthScale;
                const leftDxCIndex = Math.floor(dxC);
                const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);
                const dxCLerp = dxC - leftDxCIndex;
                const inverseDxCLerp = 1.0 - dxCLerp;
                const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];
                const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];
                const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];
                const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];
                const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;
                const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;
                const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;
                const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;
                for(let d = 0; d < depth; d++){
                    const dyVal = dyValues[offset++];
                    output[topLeftRCOffset + d] += dyVal * inverseDxRLerpTimesInverseDxCLerp;
                    output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;
                    output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;
                    output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;
                }
            }
        }
    }
    return backend.makeTensorInfo([
        batch,
        xWidth,
        xHeight,
        depth
    ], "float32", output);
}
const resizeBilinearGradConfig = {
    kernelName: (0, _tfjsCore.ResizeBilinearGrad),
    backendName: "cpu",
    kernelFunc: resizeBilinearGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7RAie":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeNearestNeighbor", ()=>resizeNearestNeighbor);
parcelHelpers.export(exports, "resizeNearestNeighborConfig", ()=>resizeNearestNeighborConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function resizeNearestNeighbor(args) {
    const { inputs , backend , attrs  } = args;
    const { images  } = inputs;
    const { alignCorners , halfPixelCenters , size  } = attrs;
    (0, _cpuUtil.assertNotComplex)(images, "resizeNearestNeighbor");
    const imagesStrides = (0, _tfjsCore.util).computeStrides(images.shape);
    const [newHeight, newWidth] = size;
    const [batch, oldHeight, oldWidth, numChannels] = images.shape;
    const xValues = backend.data.get(images.dataId).values;
    const output = new Float32Array(batch * newHeight * newWidth * numChannels);
    const effectiveInputSize = [
        alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
        alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
    ];
    const effectiveOutputSize = [
        alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
        alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
    ];
    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
    let outputOffset = 0;
    for(let b = 0; b < batch; b++){
        const batchOffset = b * imagesStrides[0];
        for(let r = 0; r < newHeight; r++){
            const sourceFracRow = halfPixelCenters ? effectiveRowSizeRatio * (r + 0.5) : effectiveRowSizeRatio * r;
            let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
            if (halfPixelCenters) sourceNearestRow = Math.max(0, sourceNearestRow);
            const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];
            for(let c = 0; c < newWidth; c++){
                const sourceFracCol = halfPixelCenters ? effectiveColSizeRatio * (c + 0.5) : effectiveColSizeRatio * c;
                let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
                if (halfPixelCenters) sourceNearestCol = Math.max(0, sourceNearestCol);
                const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];
                for(let d = 0; d < numChannels; d++){
                    // Begin shader.
                    // Compute the fractional index of the source.
                    const newVal = xValues[colOffset + d];
                    output[outputOffset++] = newVal;
                }
            }
        }
    }
    return backend.makeTensorInfo([
        batch,
        newHeight,
        newWidth,
        numChannels
    ], images.dtype, output);
}
const resizeNearestNeighborConfig = {
    kernelName: (0, _tfjsCore.ResizeNearestNeighbor),
    backendName: "cpu",
    kernelFunc: resizeNearestNeighbor
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3xeF7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeNearestNeighborGrad", ()=>resizeNearestNeighborGrad);
parcelHelpers.export(exports, "resizeNearestNeighborGradConfig", ()=>resizeNearestNeighborGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function resizeNearestNeighborGrad(args) {
    const { inputs , backend , attrs  } = args;
    const { images , dy  } = inputs;
    const { alignCorners  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        dy,
        images
    ], "resizeNearestNeighborGrad");
    const imagesStrides = (0, _tfjsCore.util).computeStrides(images.shape);
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    const [batch, xHeight, xWidth, depth] = images.shape;
    const [, yHeight, yWidth] = dy.shape;
    const output = new Float32Array(batch * xHeight * xWidth * depth);
    const dyValues = backend.data.get(dy.dataId).values;
    // In the backwards pass, we want to find the pixels that were generated
    // for each pixel in the input image the forward pass
    const effectiveXSize = [
        alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
        alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
    ];
    const effectiveYSize = [
        alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
        alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
    ];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale;
    // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.
    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    // Loop over the output space.
    for(let b = 0; b < batch; b++){
        const batchOffset = b * imagesStrides[0];
        for(let r = 0; r < xHeight; r++){
            const rowOffset = batchOffset + r * imagesStrides[1];
            // Compute bounds for where in dy we will look
            const startRLerp = Math.floor(r * invHeightScale);
            const startDyR = Math.floor(startRLerp - winHeight / 2);
            for(let c = 0; c < xWidth; c++){
                const colOffset = rowOffset + c * imagesStrides[2];
                // Compute bounds for where in dy we will look
                const startCLerp = Math.floor(c * invWidthScale);
                const startDyC = Math.floor(startCLerp - winWidth / 2);
                for(let d = 0; d < depth; d++){
                    let accum = 0;
                    // loop over dy
                    for(let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++){
                        const dyR = dyRIndex + startDyR;
                        // Guard against the window exceeding the bounds of dy
                        if (dyR < 0 || dyR >= yHeight) continue;
                        const dyROffset = batchOffset + dyR * dyStrides[1];
                        const sourceFracRow = dyR * heightScale;
                        const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
                        if (r !== sourceNearestRow) continue;
                        for(let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++){
                            const dyC = dyCIndex + startDyC;
                            // Guard against the window exceeding the bounds of dy
                            if (dyC < 0 || dyC >= yWidth) continue;
                            const dyCOffset = dyROffset + dyC * dyStrides[2];
                            const sourceFracCol = dyC * widthScale;
                            const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
                            if (c === sourceNearestCol) accum += dyValues[dyCOffset + d];
                        }
                    }
                    output[colOffset + d] = accum;
                }
            }
        }
    }
    return backend.makeTensorInfo(images.shape, images.dtype, output);
}
const resizeNearestNeighborGradConfig = {
    kernelName: (0, _tfjsCore.ResizeNearestNeighborGrad),
    backendName: "cpu",
    kernelFunc: resizeNearestNeighborGrad
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9kqK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "reverseConfig", ()=>reverseConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _identity = require("./Identity");
function reverse(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { dims  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "reverse");
    const xRank = x.shape.length;
    const $dims = (0, _tfjsCore.util).parseAxisParam(dims, x.shape);
    if (xRank === 0) return (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    const outBuf = new (0, _tfjsCore.TensorBuffer)(x.shape, x.dtype);
    const xBuf = backend.bufferSync(x);
    for(let i = 0; i < outBuf.size; i++){
        const outLoc = outBuf.indexToLoc(i);
        const inLoc = outLoc.slice();
        $dims.forEach((d)=>inLoc[d] = x.shape[d] - 1 - inLoc[d]);
        outBuf.set(xBuf.get(...inLoc), ...outLoc);
    }
    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const reverseConfig = {
    kernelName: (0, _tfjsCore.Reverse),
    backendName: "cpu",
    kernelFunc: reverse
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Identity":"9BGOC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lYbI6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateWithOffsetConfig", ()=>rotateWithOffsetConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const rotateWithOffsetConfig = {
    kernelName: (0, _tfjsCore.RotateWithOffset),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { image  } = inputs;
        const { radians , fillValue , center  } = attrs;
        const cpuBackend = backend;
        const output = (0, _tfjsCore.util).getTypedArrayFromDType(image.dtype, (0, _tfjsCore.util).sizeFromShape(image.shape));
        const [batch, imageHeight, imageWidth, numChannels] = image.shape;
        const [centerX, centerY] = (0, _tfjsCore.backend_util).getImageCenter(center, imageHeight, imageWidth);
        const fullOpacityValue = 255;
        const sinFactor = Math.sin(radians);
        const cosFactor = Math.cos(radians);
        const imageVals = cpuBackend.data.get(image.dataId).values;
        for(let batchIdx = 0; batchIdx < batch; batchIdx++){
            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
            for(let row = 0; row < imageHeight; row++){
                const rowOffset = row * (imageWidth * numChannels);
                for(let col = 0; col < imageWidth; col++){
                    const colOffset = col * numChannels;
                    for(let channel = 0; channel < numChannels; channel++){
                        const coords = [
                            batch,
                            row,
                            col,
                            channel
                        ];
                        const x = coords[2];
                        const y = coords[1];
                        // coordX/coordY are the result of rotating and translating x/y.
                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;
                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;
                        coordX = Math.round(coordX + centerX);
                        coordY = Math.round(coordY + centerY);
                        let outputValue = fillValue;
                        if (typeof fillValue !== "number") {
                            if (channel === 3) outputValue = fullOpacityValue;
                            else outputValue = fillValue[channel];
                        }
                        // If the coordinate position falls within the image boundaries...
                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {
                            // set the output to the image value at the coordinate position.
                            const rotatedRowOffset = coordY * (imageWidth * numChannels);
                            const rotatedColOffset = coordX * numChannels;
                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;
                            outputValue = imageVals[imageIdx];
                        }
                        const outIdx = batchOffset + rowOffset + colOffset + channel;
                        output[outIdx] = outputValue;
                    }
                }
            }
        }
        const dataId = cpuBackend.write(output, image.shape, image.dtype);
        return {
            dataId,
            shape: image.shape,
            dtype: image.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWl4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "round", ()=>round);
parcelHelpers.export(exports, "roundConfig", ()=>roundConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const round = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Round), (xi)=>{
    // The algorithm is based on banker's rounding.
    const base = Math.floor(xi);
    if (xi - base < 0.5) return Math.floor(xi);
    else if (xi - base > 0.5) return Math.ceil(xi);
    else {
        if (base % 2.0 === 0.0) return base;
        else return base + 1.0;
    }
});
const roundConfig = {
    kernelName: (0, _tfjsCore.Round),
    backendName: "cpu",
    kernelFunc: round
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7zSL0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rsqrtImpl", ()=>rsqrtImpl);
parcelHelpers.export(exports, "rsqrt", ()=>rsqrt);
parcelHelpers.export(exports, "rsqrtConfig", ()=>rsqrtConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const rsqrtImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>1 / Math.sqrt(xi));
const rsqrt = (0, _unaryUtils.unaryKernelFuncFromImpl)((0, _tfjsCore.Rsqrt), rsqrtImpl);
const rsqrtConfig = {
    kernelName: (0, _tfjsCore.Rsqrt),
    backendName: "cpu",
    kernelFunc: rsqrt
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLDcs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatterNd", ()=>scatterNd);
parcelHelpers.export(exports, "scatterNdConfig", ()=>scatterNdConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _scatterImpl = require("./Scatter_impl");
function scatterNd(args) {
    const { inputs , backend , attrs  } = args;
    const { indices , updates  } = inputs;
    const { shape  } = attrs;
    const { sliceRank , numUpdates , sliceSize , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(updates, indices, shape);
    const sumDupeIndices = true;
    const indicesBuf = backend.bufferSync(indices);
    const updatesBuf = backend.bufferSync(updates);
    const outBuf = (0, _scatterImpl.scatterImpl)(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */ , sumDupeIndices);
    return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);
}
const scatterNdConfig = {
    kernelName: (0, _tfjsCore.ScatterNd),
    backendName: "cpu",
    kernelFunc: scatterNd
};

},{"@tensorflow/tfjs-core":"2votT","./Scatter_impl":"hBEYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBEYb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatterImpl", ()=>scatterImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {
    const flattenShape = [
        outputSize / sliceSize,
        sliceSize
    ];
    const indicesData = indices.values;
    const updatesData = updates.values;
    if (outputSize === 0) return (0, _tfjsCore.buffer)(shape, updates.dtype);
    const outBuf = (0, _tfjsCore.buffer)(flattenShape, updates.dtype);
    if (typeof defaultValue === "string") outBuf.values.fill(defaultValue);
    else if (typeof defaultValue === "number") outBuf.values.fill(defaultValue);
    else if (typeof defaultValue === "boolean") outBuf.values.fill(+defaultValue);
    for(let i = 0; i < numUpdates; i++){
        const index = [];
        let flattenIndex = 0;
        for(let j = 0; j < sliceRank; j++){
            const dim = indicesData[i * sliceRank + j];
            index.push(dim);
            flattenIndex += dim * strides[j];
        }
        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) throw new Error(`Invalid indices: ${index} does not index into ${shape}`);
        for(let k = 0; k < sliceSize; k++)if (sumDupeIndices) outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];
        else outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];
    }
    return outBuf;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cloK7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "searchSorted", ()=>searchSorted);
parcelHelpers.export(exports, "searchSortedConfig", ()=>searchSortedConfig);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _searchSortedImpl = require("./SearchSorted_impl");
function searchSorted(args) {
    const { inputs , backend , attrs  } = args;
    const { sortedSequence , values  } = inputs;
    const { side  } = attrs;
    const $sortedSequence = backend.data.get(sortedSequence.dataId).values;
    const $values = backend.data.get(values.dataId).values;
    const output = (0, _searchSortedImpl.searchSortedImpl)($sortedSequence, $values, sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);
    return backend.makeTensorInfo(values.shape, "int32", output);
}
const searchSortedConfig = {
    kernelName: (0, _tfjsCore.SearchSorted),
    backendName: "cpu",
    kernelFunc: searchSorted
};

},{"@tensorflow/tfjs-core":"2votT","./SearchSorted_impl":"lcqUG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcqUG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "searchSortedImpl", ()=>searchSortedImpl);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function lowerBound(array, value) {
    let left = 0;
    let right = array.length;
    let mid = 0;
    while(left < right){
        mid = Math.floor((left + right) / 2);
        if (array[mid] < value) left = mid + 1;
        else right = mid;
    }
    return right;
}
function upperBound(array, value) {
    let left = 0;
    let right = array.length;
    let mid = 0;
    while(left < right){
        mid = Math.floor((left + right) / 2);
        if (array[mid] <= value) left = mid + 1;
        else right = mid;
    }
    return right;
}
function searchSortedImpl(sortedInputs, values, batchSize, numInputs, numValues, side) {
    const output = (0, _tfjsCore.util).getArrayFromDType("int32", batchSize * numValues);
    for(let b = 0; b < batchSize; ++b){
        const sortedInputsSlice = sortedInputs.slice(b * numInputs, (b + 1) * numInputs);
        const outputOffset = b * numValues;
        for(let i = 0; i < numValues; ++i)output[outputOffset + i] = side === "left" ? lowerBound(sortedInputsSlice, values[i + outputOffset]) : upperBound(sortedInputsSlice, values[i + outputOffset]);
    }
    return output;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iKe7b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "select", ()=>select);
parcelHelpers.export(exports, "selectConfig", ()=>selectConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function select(args) {
    const { inputs , backend  } = args;
    const { condition , t , e  } = inputs;
    (0, _cpuUtil.assertNotComplex)([
        condition,
        t,
        e
    ], "select");
    const conditionRank = condition.shape.length;
    const values = backend.data.get(condition.dataId).values;
    const tValues = backend.data.get(t.dataId).values;
    const eValues = backend.data.get(e.dataId).values;
    const resultDtype = (0, _tfjsCore.upcastType)(t.dtype, e.dtype);
    const newValues = (0, _tfjsCore.util).makeZerosTypedArray((0, _tfjsCore.util).sizeFromShape(t.shape), resultDtype);
    let index = 0;
    const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : (0, _tfjsCore.util).sizeFromShape(t.shape.slice(1));
    for(let i = 0; i < values.length; i++){
        for(let j = 0; j < offset; j++)if (values[i] === 1) newValues[index++] = tValues[i];
        else newValues[index++] = eValues[i];
    }
    return backend.makeTensorInfo(t.shape, resultDtype, newValues);
}
const selectConfig = {
    kernelName: (0, _tfjsCore.Select),
    backendName: "cpu",
    kernelFunc: select
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cYfNI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selu", ()=>selu);
parcelHelpers.export(exports, "seluConfig", ()=>seluConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const scaleAlpha = (0, _tfjsCore.backend_util).SELU_SCALEALPHA;
const scale = (0, _tfjsCore.backend_util).SELU_SCALE;
const selu = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Selu), (xi)=>{
    if (xi >= 0) return scale * xi;
    else return scaleAlpha * (Math.exp(xi) - 1);
});
const seluConfig = {
    kernelName: (0, _tfjsCore.Selu),
    backendName: "cpu",
    kernelFunc: selu
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"53qPD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "signConfig", ()=>signConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const sign = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Sign), (xi)=>{
    if (xi < 0) return -1;
    else if (xi > 0) return 1;
    else return 0;
});
const signConfig = {
    kernelName: (0, _tfjsCore.Sign),
    backendName: "cpu",
    kernelFunc: sign
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7duRK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sinConfig", ()=>sinConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const sin = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Sin), (xi)=>Math.sin(xi));
const sinConfig = {
    kernelName: (0, _tfjsCore.Sin),
    backendName: "cpu",
    kernelFunc: sin
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"doBRY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinh", ()=>sinh);
parcelHelpers.export(exports, "sinhConfig", ()=>sinhConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const sinh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Sinh), (xi)=>Math.sinh(xi));
const sinhConfig = {
    kernelName: (0, _tfjsCore.Sinh),
    backendName: "cpu",
    kernelFunc: sinh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkAVF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softplus", ()=>softplus);
parcelHelpers.export(exports, "softplusConfig", ()=>softplusConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
// epsilon is the difference between 1.0 and the next representable float.
// For a single precision 32 bit float this should be 2^-23, see:
// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
const epsilon = 1.1920928955078125e-7;
const threshold = Math.log(epsilon) + 2.0;
const softplus = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Softplus), (xi)=>{
    // Value above which exp(x) may overflow, but softplus(x) == x
    // is within machine epsilon.
    const tooLarge = xi > -threshold;
    // Value below which exp(x) may underflow, but softplus(x) == exp(x)
    // is within machine epsilon.
    const tooSmall = xi < threshold;
    const expX = Math.exp(xi);
    let result;
    if (tooSmall) result = expX;
    else if (tooLarge) result = xi;
    else result = Math.log(1.0 + expX);
    return result;
});
const softplusConfig = {
    kernelName: (0, _tfjsCore.Softplus),
    backendName: "cpu",
    kernelFunc: softplus
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0NQX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spaceToBatchND", ()=>spaceToBatchND);
parcelHelpers.export(exports, "spaceToBatchNDConfig", ()=>spaceToBatchNDConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _padV2 = require("./PadV2");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function spaceToBatchND(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { blockShape , paddings  } = attrs;
    (0, _cpuUtil.assertNotComplex)([
        x
    ], "spaceToBatchND");
    const prod = (0, _tfjsCore.util).sizeFromShape(blockShape);
    const completePaddings = [
        [
            0,
            0
        ]
    ];
    completePaddings.push(...paddings);
    for(let i = 1 + blockShape.length; i < x.shape.length; ++i)completePaddings.push([
        0,
        0
    ]);
    const paddedX = (0, _padV2.padV2Config).kernelFunc({
        inputs: {
            x
        },
        backend,
        attrs: {
            paddings: completePaddings,
            constantValue: 0
        }
    });
    const reshapedPaddedShape = (0, _tfjsCore.backend_util).getReshaped(paddedX.shape, blockShape, prod, false);
    const permutedReshapedPaddedPermutation = (0, _tfjsCore.backend_util).getPermuted(reshapedPaddedShape.length, blockShape.length, false);
    const flattenShape = (0, _tfjsCore.backend_util).getReshapedPermuted(paddedX.shape, blockShape, prod, false);
    const reshapeInputs = {
        x: paddedX
    };
    const reshapeAttrs = {
        shape: reshapedPaddedShape
    };
    const paddedXReshaped = (0, _reshape.reshape)({
        inputs: reshapeInputs,
        backend,
        attrs: reshapeAttrs
    });
    const transposeInputs = {
        x: paddedXReshaped
    };
    const transposeAttrs = {
        perm: permutedReshapedPaddedPermutation
    };
    const paddedXT = (0, _transpose.transpose)({
        inputs: transposeInputs,
        backend,
        attrs: transposeAttrs
    });
    const resultReshapeInputs = {
        x: paddedXT
    };
    const resultReshapeAttrs = {
        shape: flattenShape
    };
    const result = (0, _reshape.reshape)({
        inputs: resultReshapeInputs,
        backend,
        attrs: resultReshapeAttrs
    });
    backend.disposeIntermediateTensorInfo(paddedX);
    backend.disposeIntermediateTensorInfo(paddedXReshaped);
    backend.disposeIntermediateTensorInfo(paddedXT);
    return result;
}
const spaceToBatchNDConfig = {
    kernelName: (0, _tfjsCore.SpaceToBatchND),
    backendName: "cpu",
    kernelFunc: spaceToBatchND
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./PadV2":"fMo7E","./Reshape":"hjnko","./Transpose":"gEhkg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enDig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseFillEmptyRows", ()=>sparseFillEmptyRows);
parcelHelpers.export(exports, "sparseFillEmptyRowsConfig", ()=>sparseFillEmptyRowsConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseFillEmptyRowsImpl = require("./SparseFillEmptyRows_impl");
function sparseFillEmptyRows(args) {
    const { inputs , backend  } = args;
    const { indices , values , denseShape , defaultValue  } = inputs;
    if (denseShape.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
        ${denseShape.shape}`);
    if (indices.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
        ${indices.shape}`);
    if (values.shape.length !== 1) throw new Error(`Values must be a vector, saw:
        ${values.shape}`);
    if (defaultValue.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
    const $indices = backend.data.get(indices.dataId).values;
    const $values = backend.data.get(values.dataId).values;
    const $denseShape = backend.data.get(denseShape.dataId).values;
    const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
    const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = (0, _sparseFillEmptyRowsImpl.sparseFillEmptyRowsImpl)($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
    return [
        backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),
        backend.makeTensorInfo([
            outputIndicesShape[0]
        ], values.dtype, outputValues),
        backend.makeTensorInfo([
            emptyRowIndicator.length
        ], "bool", new Uint8Array(emptyRowIndicator.map((value)=>Number(value)))),
        backend.makeTensorInfo([
            reverseIndexMap.length
        ], indices.dtype, new Int32Array(reverseIndexMap)), 
    ];
}
const sparseFillEmptyRowsConfig = {
    kernelName: (0, _tfjsCore.SparseFillEmptyRows),
    backendName: "cpu",
    kernelFunc: sparseFillEmptyRows
};

},{"@tensorflow/tfjs-core":"2votT","./SparseFillEmptyRows_impl":"9VOGB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9VOGB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseFillEmptyRowsImpl", ()=>sparseFillEmptyRowsImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {
    const indicesCount = indicesShape[0];
    const denseRows = denseShape[0];
    const emptyRowIndicator = new Array(denseRows);
    const reverseIndexMap = new Array(indicesCount);
    const rank = indicesShape[1];
    if (denseRows === 0) {
        if (indicesCount !== 0) throw new Error((0, _tfjsCore.backend_util).getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));
        const outputIndices = (0, _tfjsCore.util).getArrayFromDType(indicesDType, 0);
        const outputValues = (0, _tfjsCore.util).getArrayFromDType(valuesDType, 0);
        return [
            outputIndices,
            [
                0,
                rank
            ],
            outputValues,
            emptyRowIndicator,
            reverseIndexMap
        ];
    }
    let rowsAreOrdered = true;
    let lastIndicesRow = 0;
    const csrOffset = new Array(denseRows).fill(0);
    for(let i = 0; i < indicesCount; ++i){
        // indices is a 2d tensor with shape of [N, rank]
        const row = indices[i * rank];
        if (row < 0) throw new Error((0, _tfjsCore.backend_util).getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));
        if (row >= denseRows) throw new Error((0, _tfjsCore.backend_util).getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));
        ++csrOffset[row];
        rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;
        lastIndicesRow = row;
    }
    let allRowsFull = true;
    for(let row1 = 0; row1 < denseRows; ++row1){
        // csrOffset here describes the number of elements in this dense row
        const rowEmpty = csrOffset[row1] === 0;
        emptyRowIndicator[row1] = rowEmpty;
        allRowsFull = allRowsFull && !rowEmpty;
        // In filled version, each row has at least one element.
        csrOffset[row1] = Math.max(csrOffset[row1], 1);
        // Update csrOffset to represent the number of elements up to and
        // including denseRows + 1:
        //  csrOffset[0] == #{elements of row 0}
        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}
        //  ..
        //  csrOffset[i] == starting index for elements in row i + 1.
        if (row1 > 0) csrOffset[row1] += csrOffset[row1 - 1];
    }
    if (allRowsFull && rowsAreOrdered) {
        const outputIndices1 = indices;
        const outputValues1 = values;
        for(let i1 = 0; i1 < indicesCount; ++i1)reverseIndexMap[i1] = i1;
        return [
            outputIndices1,
            [
                indicesCount,
                rank
            ],
            outputValues1,
            emptyRowIndicator,
            reverseIndexMap
        ];
    } else {
        const fullIndicesCount = csrOffset[denseRows - 1];
        const outputIndices2 = (0, _tfjsCore.util).getArrayFromDType(indicesDType, fullIndicesCount * rank);
        const outputValues2 = (0, _tfjsCore.util).getArrayFromDType(valuesDType, fullIndicesCount);
        const filledCount = new Array(denseRows).fill(0);
        // Fill in values for rows that are not missing
        for(let i2 = 0; i2 < indicesCount; ++i2){
            // indices is a 2d tensor with shape of [N, rank]
            const row2 = indices[i2 * rank];
            const offset = filledCount[row2];
            const outputI = (row2 === 0 ? 0 : csrOffset[row2 - 1]) + offset;
            filledCount[row2]++; // Increment the filled count for this row.
            for(let j = 0; j < rank; ++j)// indices and outputIndices are 2d tensors with shape of [N, rank]
            outputIndices2[outputI * rank + j] = indices[i2 * rank + j];
            outputValues2[outputI] = values[i2];
            // We'll need this reverse index map to backprop correctly.
            reverseIndexMap[i2] = outputI;
        }
        // Fill in values for rows that are missing
        for(let row3 = 0; row3 < denseRows; ++row3){
            const rowCount = filledCount[row3];
            if (rowCount === 0) {
                const startingIndex = row3 === 0 ? 0 : csrOffset[row3 - 1];
                // Remaining index values were set to zero already.
                // Just need to set the row index in the right location.
                // outputIndices is a 2d tensor with shape of [N, rank]
                outputIndices2[startingIndex * rank + 0] = row3;
                for(let col = 1; col < rank; ++col)outputIndices2[startingIndex * rank + col] = 0;
                outputValues2[startingIndex] = defaultValue;
            }
        }
        return [
            outputIndices2,
            [
                fullIndicesCount,
                rank
            ],
            outputValues2,
            emptyRowIndicator,
            reverseIndexMap
        ];
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jh7eN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseReshape", ()=>sparseReshape);
parcelHelpers.export(exports, "sparseReshapeConfig", ()=>sparseReshapeConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseReshapeImpl = require("./SparseReshape_impl");
function sparseReshape(args) {
    const { inputs , backend  } = args;
    const { inputIndices , inputShape , newShape  } = inputs;
    if (inputIndices.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${inputIndices.shape}`);
    if (inputShape.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${inputShape.shape}`);
    if (newShape.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
    const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);
    const $inputIndices = backend.data.get(inputIndices.dataId).values;
    const targetShape = Array.from(backend.data.get(newShape.dataId).values);
    const [newIndices, indicesShape, outputShape] = (0, _sparseReshapeImpl.sparseReshapeImpl)($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
    return [
        backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),
        backend.makeTensorInfo([
            outputShape.length
        ], newShape.dtype, new Int32Array(outputShape)), 
    ];
}
const sparseReshapeConfig = {
    kernelName: (0, _tfjsCore.SparseReshape),
    backendName: "cpu",
    kernelFunc: sparseReshape
};

},{"@tensorflow/tfjs-core":"2votT","./SparseReshape_impl":"1hQec","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hQec":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseReshapeImpl", ()=>sparseReshapeImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {
    const denseSize = (0, _tfjsCore.util).sizeFromShape(inputShape);
    const nnz = inputIndicesShape[0];
    const outputRank = targetShape.length;
    // Compute the output shape. Determine product of specified dimensions, and
    // find the index of the unspecified one.
    const outputShape = [];
    let product = 1;
    let unknownIndex = -1;
    for(let d = 0; d < outputRank; ++d){
        const size = targetShape[d];
        if (size === -1) {
            if (unknownIndex !== -1) throw new Error((0, _tfjsCore.backend_util).getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));
            unknownIndex = d;
            outputShape.push(1);
        } else {
            if (size < 0) throw new Error((0, _tfjsCore.backend_util).getSparseReshapeNegativeOutputDimErrorMessage(d, size));
            product *= size;
            outputShape.push(size);
        }
    }
    if (unknownIndex !== -1) {
        if (product <= 0) throw new Error((0, _tfjsCore.backend_util).getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
        const missing = Math.trunc(denseSize / product);
        if (product * missing !== denseSize) throw new Error((0, _tfjsCore.backend_util).getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));
        outputShape[unknownIndex] = missing;
    }
    const outputSize = (0, _tfjsCore.util).sizeFromShape(outputShape);
    if (outputSize !== denseSize) throw new Error((0, _tfjsCore.backend_util).getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));
    const inputRank = inputShape.length;
    const inputStrides = [];
    if (inputRank > 0) {
        inputStrides[inputRank - 1] = 1;
        for(let d1 = inputRank - 2; d1 >= 0; --d1)inputStrides[d1] = inputStrides[d1 + 1] * inputShape[d1 + 1];
    }
    const outputStrides = [];
    if (outputRank > 0) {
        outputStrides[outputRank - 1] = 1;
        for(let d2 = outputRank - 2; d2 >= 0; --d2)outputStrides[d2] = outputStrides[d2 + 1] * outputShape[d2 + 1];
    }
    const newIndices = (0, _tfjsCore.util).getArrayFromDType(inputDType, nnz * outputRank);
    for(let i = 0; i < nnz; ++i){
        let id = 0;
        for(let j = 0; j < inputRank; ++j)// inputIndices is a 2d tensor with shape of [nnz, inputRank]
        id += inputIndices[i * inputRank + j] * inputStrides[j];
        for(let j1 = 0; j1 < outputRank; ++j1){
            // newIndices is a 2d tensor with shape of [nnz, outputRank]
            newIndices[i * outputRank + j1] = Math.trunc(id / outputStrides[j1]);
            id %= outputStrides[j1];
        }
    }
    return [
        newIndices,
        [
            nnz,
            outputRank
        ],
        outputShape
    ];
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lL87e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentMean", ()=>sparseSegmentMean);
parcelHelpers.export(exports, "sparseSegmentMeanConfig", ()=>sparseSegmentMeanConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseSegmentReductionImpl = require("./SparseSegmentReduction_impl");
function sparseSegmentMean(args) {
    const { inputs , backend  } = args;
    const { data , indices , segmentIds  } = inputs;
    if (data.shape.length < 1) throw new Error(`Data should be at least 1 dimensional but received scalar`);
    if (indices.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
          ${indices.shape}`);
    if (segmentIds.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
          ${segmentIds.shape}`);
    if (indices.shape[0] !== segmentIds.shape[0]) throw new Error(`segmentIds and indices should have same size.`);
    const $data = backend.data.get(data.dataId).values;
    const $indices = backend.data.get(indices.dataId).values;
    const $segmentIds = backend.data.get(segmentIds.dataId).values;
    const [outputData, outputDataShape] = (0, _sparseSegmentReductionImpl.sparseSegmentReductionImpl)($data, data.shape, data.dtype, $indices, $segmentIds, true);
    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentMeanConfig = {
    kernelName: (0, _tfjsCore.SparseSegmentMean),
    backendName: "cpu",
    kernelFunc: sparseSegmentMean
};

},{"@tensorflow/tfjs-core":"2votT","./SparseSegmentReduction_impl":"1SSCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1SSCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentReductionImpl", ()=>sparseSegmentReductionImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {
    const numIndices = indices.length;
    // Flatten the array to two dimensions
    const inputFlat = [
        inputShape[0],
        input.length / inputShape[0]
    ];
    const numCol = inputFlat[1];
    // Note that the current implementation assumes that segmentIds values are
    // sorted.
    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;
    const outputRows = lastSegmentIdPlusOne;
    if (outputRows < 0) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
    const outputShape = inputShape.slice();
    outputShape[0] = outputRows;
    const outputLength = outputShape.reduce((product, value)=>product * value, 1);
    // Output array is initialized with the value 0 by default.
    const output = (0, _tfjsCore.util).getArrayFromDType(inputDType, outputLength);
    // Note that we do not initialize the output buffer with a default value, so
    // we need to explicitly set missing indices to the default value.
    if (numIndices === 0) {
        if (outputRows > 0) output.fill(defaultValue);
        return [
            output,
            outputShape
        ];
    }
    if (outputRows <= 0) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
    let start = 0, end = 1;
    // Index from which the output is not initialized.
    let uninitializedIndex = 0;
    let outIndex = segmentIds[start];
    while(true){
        // We initialize nextIndex to 0 to avoid may be uninitialized warning
        let nextIndex = 0;
        if (end < numIndices) {
            nextIndex = segmentIds[end];
            if (outIndex === nextIndex) {
                ++end;
                continue;
            }
            // We have a new segment here.  Verify that the segment ids are growing.
            if (outIndex >= nextIndex) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
        }
        if (outIndex < 0 || outIndex >= outputRows) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));
        // If there is a gap between two indices, we need to set that gap to the
        // default value.
        if (outIndex > uninitializedIndex) output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);
        for(let i = start; i < end; ++i){
            const index = indices[i];
            if (index < 0 || index >= inputFlat[0]) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));
            for(let j = 0; j < numCol; j++)output[outIndex * numCol + j] += input[index * numCol + j];
        }
        if (isMean) for(let j1 = 0; j1 < numCol; j1++)output[outIndex * numCol + j1] /= end - start;
        start = end;
        ++end;
        uninitializedIndex = outIndex + 1;
        outIndex = nextIndex;
        if (end > numIndices) break;
    }
    // Fill the gap at the end with the default value.
    if (uninitializedIndex < outputRows) output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);
    return [
        output,
        outputShape
    ];
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOYNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentSum", ()=>sparseSegmentSum);
parcelHelpers.export(exports, "sparseSegmentSumConfig", ()=>sparseSegmentSumConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseSegmentReductionImpl = require("./SparseSegmentReduction_impl");
function sparseSegmentSum(args) {
    const { inputs , backend  } = args;
    const { data , indices , segmentIds  } = inputs;
    if (data.shape.length < 1) throw new Error(`Data should be at least 1 dimensional but received scalar`);
    if (indices.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
         ${indices.shape}`);
    if (segmentIds.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
         ${segmentIds.shape}`);
    if (indices.shape[0] !== segmentIds.shape[0]) throw new Error(`segmentIds and indices should have same size.`);
    const $data = backend.data.get(data.dataId).values;
    const $indices = backend.data.get(indices.dataId).values;
    const $segmentIds = backend.data.get(segmentIds.dataId).values;
    const [outputData, outputDataShape] = (0, _sparseSegmentReductionImpl.sparseSegmentReductionImpl)($data, data.shape, data.dtype, $indices, $segmentIds);
    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentSumConfig = {
    kernelName: (0, _tfjsCore.SparseSegmentSum),
    backendName: "cpu",
    kernelFunc: sparseSegmentSum
};

},{"@tensorflow/tfjs-core":"2votT","./SparseSegmentReduction_impl":"1SSCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivNsH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseToDense", ()=>sparseToDense);
parcelHelpers.export(exports, "sparseToDenseConfig", ()=>sparseToDenseConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _scatterImpl = require("./Scatter_impl");
function sparseToDense(args) {
    const { inputs , backend , attrs  } = args;
    const { sparseIndices , sparseValues , defaultValue  } = inputs;
    const { outputShape  } = attrs;
    const { sliceRank , numUpdates , sliceSize , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(sparseValues, sparseIndices, outputShape);
    const sumDupeIndices = false;
    const indicesBuf = backend.bufferSync(sparseIndices);
    let outBuf;
    switch(sparseValues.dtype){
        case "bool":
            {
                const updatesBuf = backend.bufferSync(sparseValues);
                const $defaultValue = Boolean(backend.data.get(defaultValue.dataId).values[0]);
                outBuf = (0, _scatterImpl.scatterImpl)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
                break;
            }
        case "float32":
            {
                const updatesBuf1 = backend.bufferSync(sparseValues);
                const $defaultValue1 = backend.data.get(defaultValue.dataId).values[0];
                outBuf = (0, _scatterImpl.scatterImpl)(indicesBuf, updatesBuf1, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue1, sumDupeIndices);
                break;
            }
        case "int32":
            {
                const updatesBuf2 = backend.bufferSync(sparseValues);
                const $defaultValue2 = backend.data.get(defaultValue.dataId).values[0];
                outBuf = (0, _scatterImpl.scatterImpl)(indicesBuf, updatesBuf2, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue2, sumDupeIndices);
                break;
            }
        case "string":
            {
                const updatesBuf3 = backend.bufferSync(sparseValues);
                const $defaultValue3 = (0, _tfjsCore.util).decodeString(backend.data.get(defaultValue.dataId).values[0]);
                outBuf = (0, _scatterImpl.scatterImpl)(indicesBuf, updatesBuf3, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue3, sumDupeIndices);
                break;
            }
        default:
            throw new Error(`Unsupported type ${sparseValues.dtype}`);
    }
    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);
}
const sparseToDenseConfig = {
    kernelName: (0, _tfjsCore.SparseToDense),
    backendName: "cpu",
    kernelFunc: sparseToDense
};

},{"@tensorflow/tfjs-core":"2votT","./Scatter_impl":"hBEYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lVn83":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitV", ()=>splitV);
parcelHelpers.export(exports, "splitVConfig", ()=>splitVConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _slice = require("./Slice");
function splitV(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { numOrSizeSplits , axis  } = attrs;
    const $axis = (0, _tfjsCore.util).parseAxisParam(axis, x.shape)[0];
    const splitSizes = (0, _tfjsCore.backend_util).prepareSplitSize(x, numOrSizeSplits, $axis);
    const begin = new Array(x.shape.length).fill(0);
    const size = x.shape.slice();
    return splitSizes.map((s)=>{
        const sliceSize = [
            ...size
        ];
        sliceSize[$axis] = s;
        const sliceT = (0, _slice.slice)({
            inputs: {
                x
            },
            backend,
            attrs: {
                begin,
                size: sliceSize
            }
        });
        begin[$axis] += s;
        return sliceT;
    });
}
const splitVConfig = {
    kernelName: (0, _tfjsCore.SplitV),
    backendName: "cpu",
    kernelFunc: splitV
};

},{"@tensorflow/tfjs-core":"2votT","./Slice":"gvcFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rUbU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtImpl", ()=>sqrtImpl);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "sqrtConfig", ()=>sqrtConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryImpl = require("../utils/unary_impl");
var _unaryUtils = require("../utils/unary_utils");
const sqrtImpl = (0, _unaryImpl.createSimpleUnaryImpl)((xi)=>Math.sqrt(xi));
const sqrt = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Sqrt), (xi)=>Math.sqrt(xi));
const sqrtConfig = {
    kernelName: (0, _tfjsCore.Sqrt),
    backendName: "cpu",
    kernelFunc: sqrt
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_impl":"1WKfI","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jKJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareConfig", ()=>squareConfig);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const squareConfig = {
    kernelName: (0, _tfjsCore.Square),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend  })=>{
        const { x  } = inputs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(x, "square");
        const values = cpuBackend.data.get(x.dataId).values;
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = value * value;
        }
        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);
        return {
            dataId,
            shape: x.shape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b000w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifferenceImpl", ()=>squaredDifferenceImpl);
parcelHelpers.export(exports, "squaredDifference", ()=>squaredDifference);
parcelHelpers.export(exports, "squaredDifferenceConfig", ()=>squaredDifferenceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryImpl = require("../utils/binary_impl");
var _binaryUtils = require("../utils/binary_utils");
const squaredDifferenceImpl = (0, _binaryImpl.createSimpleBinaryKernelImpl)((a, b)=>{
    const diff = a - b;
    return diff * diff;
});
const squaredDifference = (0, _binaryUtils.binaryKernelFunc)((0, _tfjsCore.SquaredDifference), squaredDifferenceImpl);
const squaredDifferenceConfig = {
    kernelName: (0, _tfjsCore.SquaredDifference),
    backendName: "cpu",
    kernelFunc: squaredDifference
};

},{"@tensorflow/tfjs-core":"2votT","../utils/binary_impl":"PztB9","../utils/binary_utils":"kjogZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4WF4f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "step", ()=>step);
parcelHelpers.export(exports, "stepConfig", ()=>stepConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const step = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Step), (xi, attrs)=>{
    const stepAttrs = attrs;
    if (isNaN(xi)) return NaN;
    else return xi > 0 ? 1 : stepAttrs.alpha;
});
const stepConfig = {
    kernelName: (0, _tfjsCore.Step),
    backendName: "cpu",
    kernelFunc: step
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5WYSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stridedSlice", ()=>stridedSlice);
parcelHelpers.export(exports, "stridedSliceConfig", ()=>stridedSliceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _reshape = require("./Reshape");
var _slice = require("./Slice");
var _stridedSliceImpl = require("./StridedSlice_impl");
function stridedSlice(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { begin , end , strides , beginMask , endMask , ellipsisMask , newAxisMask , shrinkAxisMask  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "stridedSlice");
    const { finalShapeSparse , finalShape , isIdentity , sliceDim0 , isSimpleSlice , begin: $begin , end: $end , strides: $strides  } = (0, _tfjsCore.slice_util).sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
    let result;
    // ref:
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc
    if (isIdentity) // Optimization #1, slice is a no-op plus reshape
    result = (0, _reshape.reshape)({
        inputs: {
            x
        },
        backend,
        attrs: {
            shape: finalShape
        }
    });
    else if (sliceDim0 || isSimpleSlice) {
        // Optimization #2, slice is memory contiguous (only occurs in dim 0)
        (0, _tfjsCore.util).assert(x.shape.length >= 1, ()=>`Input must have rank at least 1, got: ${x.shape.length}`);
        const size = (0, _tfjsCore.slice_util).computeOutShape($begin, $end, $strides);
        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
        const sliced = (0, _slice.slice)({
            inputs: {
                x
            },
            backend,
            attrs: {
                begin: $begin,
                size
            }
        });
        result = (0, _reshape.reshape)({
            inputs: {
                x: sliced
            },
            backend,
            attrs: {
                shape: finalShape
            }
        });
        backend.disposeIntermediateTensorInfo(sliced);
    } else {
        const xBuf = backend.bufferSync(x);
        const outBuf = (0, _stridedSliceImpl.stridedSliceImpl)(finalShapeSparse, xBuf, $strides, $begin);
        result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);
    }
    return result;
}
const stridedSliceConfig = {
    kernelName: (0, _tfjsCore.StridedSlice),
    backendName: "cpu",
    kernelFunc: stridedSlice
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Reshape":"hjnko","./Slice":"gvcFv","./StridedSlice_impl":"hw65R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hw65R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stridedSliceImpl", ()=>stridedSliceImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function stridedSliceImpl(outShape, xBuf, strides, begin) {
    const outBuf = (0, _tfjsCore.buffer)(outShape, xBuf.dtype);
    for(let i = 0; i < outBuf.size; i++){
        const loc = outBuf.indexToLoc(i);
        const newLoc = new Array(loc.length);
        for(let j = 0; j < newLoc.length; j++)newLoc[j] = loc[j] * strides[j] + begin[j];
        outBuf.set(xBuf.get(...newLoc), ...loc);
    }
    return outBuf;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l4Gow":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringNGrams", ()=>stringNGrams);
parcelHelpers.export(exports, "stringNGramsConfig", ()=>stringNGramsConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _stringNGramsImpl = require("./StringNGrams_impl");
function stringNGrams(args) {
    const { inputs , backend , attrs  } = args;
    const { separator , nGramWidths , leftPad , rightPad , padWidth , preserveShortSequences  } = attrs;
    const { data , dataSplits  } = inputs;
    const $data = backend.data.get(data.dataId).values;
    const $dataSplits = backend.data.get(dataSplits.dataId).values;
    const [nGrams, nGramsSplits] = (0, _stringNGramsImpl.stringNGramsImpl)($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
    return [
        backend.makeTensorInfo([
            nGrams.length
        ], "string", nGrams),
        backend.makeTensorInfo(dataSplits.shape, "int32", nGramsSplits), 
    ];
}
const stringNGramsConfig = {
    kernelName: (0, _tfjsCore.StringNGrams),
    backendName: "cpu",
    kernelFunc: stringNGrams
};

},{"@tensorflow/tfjs-core":"2votT","./StringNGrams_impl":"78YUY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"78YUY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringNGramsImpl", ()=>stringNGramsImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
/**
 * The StringNGramsOp class creates ngrams from ragged string data.
 * The constructor contains all attributes related to the operation such as
 * padding widths and strings, and the compute function can be used to
 * compute the ngrams for different ragged tensor inputs.
 */ class StringNGramsOp {
    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences){
        this.separator = (0, _tfjsCore.util).encodeString(separator);
        this.nGramWidths = nGramWidths;
        this.leftPad = (0, _tfjsCore.util).encodeString(leftPad);
        this.rightPad = (0, _tfjsCore.util).encodeString(rightPad);
        this.padWidth = padWidth;
        this.preserveShort = preserveShortSequences;
    }
    getPadWidth(nGramWidth) {
        // Ngrams can be padded with either a fixed pad width or a dynamic pad
        // width depending on the 'padWidth' arg, but in no case should the padding
        // ever be wider than 'nGramWidth' - 1.
        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);
    }
    getNumNGrams(length, nGramWidth) {
        const padWidth = this.getPadWidth(nGramWidth);
        return Math.max(0, length + 2 * padWidth - nGramWidth + 1);
    }
    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {
        for(let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex){
            const padWidth = this.getPadWidth(nGramWidth);
            const leftPadding = Math.max(0, padWidth - nGramIndex);
            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));
            const numTokens = nGramWidth - (leftPadding + rightPadding);
            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);
            // Calculate the total expected size of the nGram so we can reserve the
            // correct amount of space in the string.
            let nGramSize = 0;
            // Size of the left padding.
            nGramSize += leftPadding * this.leftPad.length;
            // Size of the tokens.
            for(let n = 0; n < numTokens; ++n)nGramSize += data[dataStartIndex + n].length;
            // Size of the right padding.
            nGramSize += rightPadding * this.rightPad.length;
            // Size of the separators.
            const numSeparators = leftPadding + rightPadding + numTokens - 1;
            nGramSize += numSeparators * this.separator.length;
            // Build the nGram.
            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);
            const nGram = output[outputStartIndex + nGramIndex];
            let nextNGramIndex = 0;
            const appendToNGram = (str)=>str.forEach((value)=>nGram[nextNGramIndex++] = value);
            for(let n1 = 0; n1 < leftPadding; ++n1){
                appendToNGram(this.leftPad);
                appendToNGram(this.separator);
            }
            // Only output first numTokens - 1 pairs of data and separator
            for(let n2 = 0; n2 < numTokens - 1; ++n2){
                appendToNGram(data[dataStartIndex + n2]);
                appendToNGram(this.separator);
            }
            // Handle case when there are no tokens or no right padding as these
            // can result in consecutive separators.
            if (numTokens > 0) {
                // If we have tokens, then output last and then pair each separator
                // with the right padding that follows, to ensure nGram ends either with
                // the token or with the right pad.
                appendToNGram(data[dataStartIndex + numTokens - 1]);
                for(let n3 = 0; n3 < rightPadding; ++n3){
                    appendToNGram(this.separator);
                    appendToNGram(this.rightPad);
                }
            } else {
                // If we don't have tokens, then the last item inserted into the nGram
                // has been the separator from the left padding loop above. Hence,
                // output right pad and separator and make sure to finish with a
                // padding, not a separator.
                for(let n4 = 0; n4 < rightPadding - 1; ++n4){
                    appendToNGram(this.rightPad);
                    appendToNGram(this.separator);
                }
                appendToNGram(this.rightPad);
            }
        }
    }
    // Data and splits together form the definition of the ragged tensor,
    // where data is 1 dimensional and contains the values of the tensor
    // and splits denotes the indices at which each row starts.
    compute(data, splits) {
        // Validate that the splits are valid indices into data, only if there are
        // splits specified.
        const inputDataSize = data.length;
        const splitsSize = splits.length;
        if (splitsSize > 0) {
            let prevSplit = splits[0];
            if (prevSplit !== 0) throw new Error(`First split value must be 0, got ${prevSplit}`);
            for(let i = 1; i < splitsSize; ++i){
                let validSplits = splits[i] >= prevSplit;
                validSplits = validSplits && splits[i] <= inputDataSize;
                if (!validSplits) throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);
                prevSplit = splits[i];
            }
            if (prevSplit !== inputDataSize) throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);
        }
        const numBatchItems = splitsSize - 1;
        const nGramsSplits = (0, _tfjsCore.util).getArrayFromDType("int32", splitsSize);
        // If there is no data or size, return an empty ragged tensor.
        if (inputDataSize === 0 || splitsSize === 0) {
            const empty = new Array(inputDataSize);
            for(let i1 = 0; i1 <= numBatchItems; ++i1)nGramsSplits[i1] = 0;
            return [
                empty,
                nGramsSplits
            ];
        }
        nGramsSplits[0] = 0;
        for(let i2 = 1; i2 <= numBatchItems; ++i2){
            const length = splits[i2] - splits[i2 - 1];
            let numNGrams = 0;
            this.nGramWidths.forEach((nGramWidth)=>{
                numNGrams += this.getNumNGrams(length, nGramWidth);
            });
            if (this.preserveShort && length > 0 && numNGrams === 0) numNGrams = 1;
            nGramsSplits[i2] = nGramsSplits[i2 - 1] + numNGrams;
        }
        const nGrams = new Array(nGramsSplits[numBatchItems]);
        for(let i3 = 0; i3 < numBatchItems; ++i3){
            const splitIndex = splits[i3];
            let outputStartIdx = nGramsSplits[i3];
            this.nGramWidths.forEach((nGramWidth)=>{
                const length = splits[i3 + 1] - splits[i3];
                const numNGrams = this.getNumNGrams(length, nGramWidth);
                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
                outputStartIdx += numNGrams;
            });
            // If we're preserving short sequences, check to see if no sequence was
            // generated by comparing the current output start idx to the original
            // one (nGramSplitsdata). If no ngrams were generated, then they will
            // be equal (since we increment outputStartIdx by numNGrams every
            // time we create a set of ngrams.)
            if (this.preserveShort && outputStartIdx === nGramsSplits[i3]) {
                const dataLength = splits[i3 + 1] - splits[i3];
                // One legitimate reason to not have any ngrams when this.preserveShort
                // is true is if the sequence itself is empty. In that case, move on.
                if (dataLength === 0) continue;
                // We don't have to worry about dynamic padding sizes here: if padding
                // was dynamic, every sequence would have had sufficient padding to
                // generate at least one nGram.
                const nGramWidth = dataLength + 2 * this.padWidth;
                const numNGrams1 = 1;
                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams1, nGramWidth);
            }
        }
        return [
            nGrams,
            nGramsSplits
        ];
    }
}
function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vq5H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringSplit", ()=>stringSplit);
parcelHelpers.export(exports, "stringSplitConfig", ()=>stringSplitConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _stringSplitImpl = require("./StringSplit_impl");
function stringSplit(args) {
    const { inputs , backend , attrs  } = args;
    const { skipEmpty  } = attrs;
    const { input , delimiter  } = inputs;
    if (input.dtype !== "string") throw new Error("Input must be of datatype string");
    if (input.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${input.shape}`);
    if (delimiter.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
    const $input = backend.data.get(input.dataId).values;
    const $delimiter = backend.data.get(delimiter.dataId).values[0];
    const [indices, values, shape] = (0, _stringSplitImpl.stringSplitImpl)($input, $delimiter, skipEmpty);
    const outputSize = values.length;
    return [
        backend.makeTensorInfo([
            outputSize,
            2
        ], "int32", indices),
        backend.makeTensorInfo([
            outputSize
        ], "string", values),
        backend.makeTensorInfo([
            2
        ], "int32", new Int32Array(shape))
    ];
}
const stringSplitConfig = {
    kernelName: (0, _tfjsCore.StringSplit),
    backendName: "cpu",
    kernelFunc: stringSplit
};

},{"@tensorflow/tfjs-core":"2votT","./StringSplit_impl":"amnSx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amnSx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringSplitImpl", ()=>stringSplitImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function split(str, delimiters, skipEmpty, result) {
    if (!str.length) return;
    // When the delimiter is empty, the input is split into individual characters.
    if (delimiters.length === 0) {
        for(let i = 0; i < str.length; ++i)result.push(str.subarray(i, i + 1));
        return;
    }
    // When there is one delimiter, the input is split only at that delimiter.
    if (delimiters.length === 1) {
        const delimiter = delimiters[0];
        let f = str.indexOf(delimiter);
        while(f !== -1){
            const token = str.subarray(0, f);
            if (!skipEmpty || token.length !== 0) result.push(token);
            str = str.subarray(f + 1);
            f = str.indexOf(delimiter);
        }
        if (!skipEmpty || str.length !== 0) result.push(str);
        return;
    }
    // When there are multiple delimiters, the input is split at every instance
    // one of the delimiters appears.
    let tokenStart = 0;
    for(let i1 = 0; i1 < str.length + 1; i1++)if (i1 === str.length || delimiters.indexOf(str[i1]) !== -1) {
        const token1 = str.subarray(tokenStart, i1);
        if (!skipEmpty || token1.length !== 0) result.push(token1);
        tokenStart = i1 + 1;
    }
}
function stringSplitImpl(input, delimiter, skipEmpty) {
    const batchSize = input.length;
    // Empty delimiter means split the input character by character.
    const tokens = [];
    let outputSize = 0;
    let maxNumEntries = 0;
    const numIndices = new Array(batchSize);
    for(let i = 0; i < batchSize; ++i){
        const prevTokensLength = tokens.length;
        split(input[i], delimiter, skipEmpty, tokens);
        const nEntries = tokens.length - prevTokensLength;
        numIndices[i] = nEntries;
        outputSize += nEntries;
        maxNumEntries = Math.max(maxNumEntries, nEntries);
    }
    const indices = (0, _tfjsCore.util).getArrayFromDType("int32", outputSize * 2);
    const values = new Array(outputSize);
    const shape = [
        batchSize,
        maxNumEntries
    ];
    let c = 0;
    for(let i1 = 0; i1 < batchSize; ++i1)for(let j = 0; j < numIndices[i1]; ++j){
        // indices is a 2d tensor with shape of [outputSize, 2]
        indices[c * 2] = i1;
        indices[c * 2 + 1] = j;
        values[c] = tokens[c];
        ++c;
    }
    return [
        indices,
        values,
        shape
    ];
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2kHX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringToHashBucketFast", ()=>stringToHashBucketFast);
parcelHelpers.export(exports, "stringToHashBucketFastConfig", ()=>stringToHashBucketFastConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _stringToHashBucketFastImpl = require("./StringToHashBucketFast_impl");
function stringToHashBucketFast(args) {
    const { inputs , backend , attrs  } = args;
    const { numBuckets  } = attrs;
    const { input  } = inputs;
    if (input.dtype !== "string") throw new Error("Input must be of datatype string");
    if (numBuckets <= 0) throw new Error(`Number of buckets must be at least 1`);
    const $input = backend.data.get(input.dataId).values;
    const output = (0, _stringToHashBucketFastImpl.stringToHashBucketFastImpl)($input, numBuckets);
    return backend.makeTensorInfo(input.shape, "int32", output);
}
const stringToHashBucketFastConfig = {
    kernelName: (0, _tfjsCore.StringToHashBucketFast),
    backendName: "cpu",
    kernelFunc: stringToHashBucketFast
};

},{"@tensorflow/tfjs-core":"2votT","./StringToHashBucketFast_impl":"gVAXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVAXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringToHashBucketFastImpl", ()=>stringToHashBucketFastImpl);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function stringToHashBucketFastImpl(input, numBuckets) {
    const output = (0, _tfjsCore.util).getArrayFromDType("int32", input.length);
    for(let i = 0; i < input.length; ++i)output[i] = (0, _tfjsCore.util).fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();
    return output;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7q5Nu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "tanConfig", ()=>tanConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const tan = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Tan), (xi)=>Math.tan(xi));
const tanConfig = {
    kernelName: (0, _tfjsCore.Tan),
    backendName: "cpu",
    kernelFunc: tan
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cPSOw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanh", ()=>tanh);
parcelHelpers.export(exports, "tanhConfig", ()=>tanhConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryUtils = require("../utils/unary_utils");
const tanh = (0, _unaryUtils.unaryKernelFunc)((0, _tfjsCore.Tanh), (xi)=>Math.tanh(xi));
const tanhConfig = {
    kernelName: (0, _tfjsCore.Tanh),
    backendName: "cpu",
    kernelFunc: tanh
};

},{"@tensorflow/tfjs-core":"2votT","../utils/unary_utils":"8aAW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61yZu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tile", ()=>tile);
parcelHelpers.export(exports, "tileConfig", ()=>tileConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _tileImpl = require("./Tile_impl");
function tile(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { reps  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "tile");
    const outBuf = (0, _tileImpl.tileImpl)(backend.bufferSync(x), reps);
    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const tileConfig = {
    kernelName: (0, _tfjsCore.Tile),
    backendName: "cpu",
    kernelFunc: tile
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Tile_impl":"5HNxB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HNxB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */ parcelHelpers.export(exports, "tileImpl", ()=>tileImpl);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function tileImpl(xBuf, reps) {
    const newShape = new Array(xBuf.rank);
    for(let i = 0; i < newShape.length; i++)newShape[i] = xBuf.shape[i] * reps[i];
    const result = (0, _tfjsCore.buffer)(newShape, xBuf.dtype);
    for(let i1 = 0; i1 < result.values.length; ++i1){
        const newLoc = result.indexToLoc(i1);
        const originalLoc = new Array(xBuf.rank);
        for(let j = 0; j < originalLoc.length; j++)originalLoc[j] = newLoc[j] % xBuf.shape[j];
        const originalIndex = xBuf.locToIndex(originalLoc);
        result.values[i1] = xBuf.values[originalIndex];
    }
    return result;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxDYZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topK", ()=>topK);
parcelHelpers.export(exports, "topKConfig", ()=>topKConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _topKImpl = require("./TopK_impl");
function topK(args) {
    const { inputs , backend , attrs  } = args;
    const { x  } = inputs;
    const { k , sorted  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "topk");
    const xVals = backend.data.get(x.dataId).values;
    const [allTopKVals, allTopKIndices] = (0, _topKImpl.topKImpl)(xVals, x.shape, x.dtype, k, sorted);
    return [
        backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),
        backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)
    ];
}
const topKConfig = {
    kernelName: (0, _tfjsCore.TopK),
    backendName: "cpu",
    kernelFunc: topK
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./TopK_impl":"ixo2J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixo2J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topKImpl", ()=>topKImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /** An implementation of the TopK kernel shared between webgl and cpu. */ var _tfjsCore = require("@tensorflow/tfjs-core");
const comparePair = (a, b)=>{
    const valueDiff = b.value - a.value;
    return valueDiff === 0 ? a.index - b.index : valueDiff;
};
/**
 * Partitions array where all elements smaller than the (k+1) smallest element
 * are found to the left of it, and all larger to the right of it.
 * Based on the Floyd-Rivest Algorithm, ref:
 * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm
 * @param array: Array to partition
 * @param left: Left index for the interval
 * @param right: Right index for the interval
 * @param k: Desired index value, where array[k] is the (k+1)th smallest element
 *           when left = 0
 */ function select(array, k, left = 0, right = array.length - 1) {
    while(right > left){
        // Use select recursively to sample a smaller set of size s
        // the arbitrary constants 600 and 0.5 are used in the original
        // version to minimize execution time.
        if (right - left > 600) {
            const n = right - left + 1;
            const i = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);
            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
            select(array, k, newLeft, newRight);
        }
        // partition the elements between left and right around t
        const t = array[k];
        let i1 = left;
        let j = right;
        (0, _tfjsCore.util).swap(array, left, k);
        if (comparePair(array[right], t) > 0) (0, _tfjsCore.util).swap(array, left, right);
        while(i1 < j){
            (0, _tfjsCore.util).swap(array, i1, j);
            i1++;
            j--;
            while(comparePair(array[i1], t) < 0)i1 = i1 + 1;
            while(comparePair(array[j], t) > 0)j = j - 1;
        }
        if (comparePair(array[left], t) === 0) (0, _tfjsCore.util).swap(array, left, j);
        else {
            j = j + 1;
            (0, _tfjsCore.util).swap(array, j, right);
        }
        // Adjust left and right towards the boundaries of the subset
        // containing the (k - left + 1)th smallest element.
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}
function topKImpl(x, xShape, xDtype, k, sorted) {
    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
    const lastDim = xShape[xShape.length - 1];
    const [batch, size] = [
        x.length / lastDim,
        lastDim
    ];
    const allTopKVals = (0, _tfjsCore.util).getTypedArrayFromDType(xDtype, batch * k);
    const allTopKIndices = (0, _tfjsCore.util).getTypedArrayFromDType("int32", batch * k);
    for(let b = 0; b < batch; b++){
        const offset = b * size;
        const vals = x.subarray(offset, offset + size);
        let valAndInd = new Array(vals.length);
        vals.forEach((value, index)=>valAndInd[index] = {
                value,
                index
            });
        if (k < valAndInd.length) {
            select(valAndInd, k);
            valAndInd = valAndInd.slice(0, k);
        }
        if (sorted) valAndInd.sort(comparePair);
        const outOffset = b * k;
        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
        for(let i = 0; i < k; i++){
            topKVals[i] = valAndInd[i].value;
            topKIndices[i] = valAndInd[i].index;
        }
    }
    // Reshape back to the original input shape, except that the last
    // dimension is k.
    const outputShape = xShape.slice();
    outputShape[outputShape.length - 1] = k;
    return [
        (0, _tfjsCore.buffer)(outputShape, xDtype, allTopKVals),
        (0, _tfjsCore.buffer)(outputShape, "int32", allTopKIndices)
    ];
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9HVZn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transform", ()=>transform);
parcelHelpers.export(exports, "transformConfig", ()=>transformConfig);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function transform(args) {
    const { inputs , attrs , backend  } = args;
    const { image , transforms  } = inputs;
    const { interpolation , fillMode , fillValue , outputShape  } = attrs;
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const [outHeight, outWidth] = outputShape != null ? outputShape : [
        imageHeight,
        imageWidth
    ];
    const outShape = [
        batch,
        outHeight,
        outWidth,
        numChannels
    ];
    const inStrides = (0, _tfjsCore.util).computeStrides(image.shape);
    const batchInStride = inStrides[0];
    const rowInStride = inStrides[1];
    const colInStride = inStrides[2];
    const outStrides = (0, _tfjsCore.util).computeStrides(outShape);
    const batchOutStride = outStrides[0];
    const rowOutStride = outStrides[1];
    const colOutStride = outStrides[2];
    const outVals = (0, _tfjsCore.util).getTypedArrayFromDType(image.dtype, (0, _tfjsCore.util).sizeFromShape(outShape));
    outVals.fill(fillValue);
    const imageVals = backend.data.get(image.dataId).values;
    const transformVals = backend.data.get(transforms.dataId).values;
    // Ref TF implementation:
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h
    for(let b = 0; b < batch; ++b){
        const transform = transforms.shape[0] === 1 ? transformVals : transformVals.subarray(b * 8, b * 8 + 8);
        for(let outY = 0; outY < outHeight; ++outY){
            for(let outX = 0; outX < outWidth; ++outX)for(let channel = 0; channel < numChannels; ++channel){
                let val;
                const projection = transform[6] * outX + transform[7] * outY + 1;
                if (projection === 0) continue;
                const inX = (transform[0] * outX + transform[1] * outY + transform[2]) / projection;
                const inY = (transform[3] * outX + transform[4] * outY + transform[5]) / projection;
                const x = mapCoord(inX, imageWidth, fillMode);
                const y = mapCoord(inY, imageHeight, fillMode);
                switch(interpolation){
                    case "nearest":
                        val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchInStride, rowInStride, colInStride, b, y, x, channel, fillValue);
                        break;
                    case "bilinear":
                        val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchInStride, rowInStride, colInStride, b, y, x, channel, fillValue);
                        break;
                    default:
                        throw new Error(`Error in Transform: Expect 'nearest' or ` + `'bilinear', but got ${interpolation}`);
                }
                const ind = b * batchOutStride + outY * rowOutStride + outX * colOutStride + channel;
                outVals[ind] = val;
            }
        }
        return backend.makeTensorInfo(outShape, image.dtype, outVals);
    }
    const dataId = backend.write(outVals, outShape, image.dtype);
    return {
        dataId,
        shape: image.shape,
        dtype: image.dtype
    };
}
const transformConfig = {
    kernelName: (0, _tfjsCore.Transform),
    backendName: "cpu",
    kernelFunc: transform
};
function mapCoord(outCoord, len, mode) {
    switch(mode){
        case "reflect":
            return mapCoordReflect(outCoord, len);
        case "wrap":
            return mapCoordWrap(outCoord, len);
        case "nearest":
            return mapCoordNearest(outCoord, len);
        case "constant":
        default:
            return mapCoordConstant(outCoord, len);
    }
}
function mapCoordReflect(outCoord, len) {
    // Reflect [abcd] to [dcba|abcd|dcba].
    let inCoord = outCoord;
    if (inCoord < 0) {
        if (len <= 1) inCoord = 0;
        else {
            const sz2 = 2 * len;
            if (inCoord < sz2) inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;
            inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;
        }
    } else if (inCoord > len - 1) {
        if (len <= 1) inCoord = 0;
        else {
            const sz21 = 2 * len;
            inCoord -= sz21 * Math.trunc(inCoord / sz21);
            if (inCoord >= len) inCoord = sz21 - inCoord - 1;
        }
    }
    // clamp is necessary because when outCoord = 3.5 and len = 4,
    // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
    return (0, _tfjsCore.util).clamp(0, inCoord, len - 1);
}
function mapCoordWrap(outCoord, len) {
    // Wrap [abcd] to [abcd|abcd|abcd].
    let inCoord = outCoord;
    if (inCoord < 0) {
        if (len <= 1) inCoord = 0;
        else {
            const sz = len - 1;
            inCoord += len * (Math.trunc(-inCoord / sz) + 1);
        }
    } else if (inCoord > len - 1) {
        if (len <= 1) inCoord = 0;
        else {
            const sz1 = len - 1;
            inCoord -= len * Math.trunc(inCoord / sz1);
        }
    }
    // clamp is necessary because when outCoord = -0.5 and len = 4,
    // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
    return (0, _tfjsCore.util).clamp(0, inCoord, len - 1);
}
function mapCoordConstant(outCoord, len) {
    return outCoord;
}
function mapCoordNearest(outCoord, len) {
    return (0, _tfjsCore.util).clamp(0, outCoord, len - 1);
}
function readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
    const ind = batch * batchStride + y * rowStride + x * colStride + channel;
    if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) return imageVals[ind];
    else return fillValue;
}
function nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
    const $y = Math.round(y);
    const $x = Math.round(x);
    return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);
}
function bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
    const yFloor = Math.floor(y);
    const xFloor = Math.floor(x);
    const yCeil = yFloor + 1;
    const xCeil = xFloor + 1;
    // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)
    //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)
    const valueYFloor = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);
    // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)
    //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)
    const valueYCeil = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);
    // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)
    //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)
    return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9x6Iu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unique", ()=>unique);
parcelHelpers.export(exports, "uniqueConfig", ()=>uniqueConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _uniqueImpl = require("./Unique_impl");
function unique(args) {
    const { inputs , attrs , backend  } = args;
    const { axis  } = attrs;
    const { x  } = inputs;
    (0, _cpuUtil.assertNotComplex)(x, "unique");
    const values = backend.data.get(x.dataId).values;
    const { outputValues , outputShape , indices  } = (0, _uniqueImpl.uniqueImpl)(values, axis, x.shape, x.dtype);
    return [
        backend.makeTensorInfo(outputShape, x.dtype, outputValues),
        backend.makeTensorInfo([
            indices.length
        ], "int32", indices), 
    ];
}
const uniqueConfig = {
    kernelName: (0, _tfjsCore.Unique),
    backendName: "cpu",
    kernelFunc: unique
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Unique_impl":"eORzN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eORzN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uniqueImpl", ()=>uniqueImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function uniqueImpl(values, axis, shape, dtype) {
    // Normalize and validate axis.
    const $axis = (0, _tfjsCore.util).parseAxisParam(axis, shape)[0];
    // Calculate the new shape that is suitable for extracting data along the
    // given axis.
    //
    // The rank is 3.
    // The size of the 1st dimension is the size of all the axes < the given axis.
    // The size of the 2nd dimension is the same as the size of the given axis.
    // The size of the 3rd dimension is the size of all the axes > the given axis.
    //
    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the
    // newShape would be: [2*3, 5, 4].
    //
    // Note that this is not the final output shape. This will be the shape for an
    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract
    // values along the given axis. To demonstrate how it works, consider the
    // following example:
    //
    // Input: a 3D tensor, with shape [1, 2, 3]
    // [
    //   [
    //      [1,2,3],
    //      [4,5,6]
    //   ]
    // ]
    // Axis: 2 (the last axis).
    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].
    //
    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from
    // 1*2. The re-shaped data would look like:
    //
    // [
    //   [
    //     [1], [2], [3]
    //   ],
    //   [
    //     [4], [5], [6]
    //   ]
    // ]
    //
    // Then, we can construct a 3-level nested loop by the following dimension
    // order to extract the values along the axis (dimension1):
    // i: dimension1       // 0,1,2 (newShape[1])
    //   m: dimension0     // 0,1   (newShape[0])
    //     n: dimension2   // 0     (newShape[2])
    //
    //                       m, i, n
    //                      ---------
    // Iteration 0: data at [0, 0, 0] => "1"
    // Iteration 1: data at [1, 0, 0] => "4"
    // We got [1,4].
    // Iteration 2: data at [0, 1, 0] => "2"
    // Iteration 3: data at [1, 1, 0] => "5"
    // We got [2,5].
    // Iteration 4: data at [0, 2, 0] => "3"
    // Iteration 5: data at [1, 2, 0] => "6"
    // We got [3,6].
    const newShape = [
        1,
        shape[0],
        1
    ];
    for(let i = 0; i < $axis; i++)newShape[0] *= shape[i];
    newShape[1] = shape[$axis];
    for(let i1 = $axis + 1; i1 < shape.length; i1++)newShape[2] *= shape[i1];
    // A map from unique elements (their string representations) to their values
    // in "indices" (below).
    const uniqueElements = {};
    // The indices of each unique element in the original tensor along the given
    // axis. It is 1D and has the same size as the given axis.
    const indices = new Int32Array(shape[$axis]);
    // Create a buffer so we can easily extract value at a given location.
    const inputBuffer = new (0, _tfjsCore.TensorBuffer)(newShape, dtype, values);
    // The indices along the given axis that have unique elements. This is a
    // de-duped version of "indices" above.
    const uniqueIndices = [];
    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;
    for(let i2 = 0; i2 < shape[$axis]; i2++){
        // Extract values along the axis.
        let element;
        if (is1DTensor) // Fast path for 1D tensor input.
        element = values[i2].toString();
        else {
            const axisValues = [];
            for(let m = 0; m < newShape[0]; m++)for(let n = 0; n < newShape[2]; n++)axisValues.push(inputBuffer.get(m, i2, n));
            element = axisValues.join(",");
        }
        // Dedup and update various indices.
        if (uniqueElements[element] !== undefined) indices[i2] = uniqueElements[element];
        else {
            const uniqueIndex = Object.keys(uniqueElements).length;
            uniqueElements[element] = uniqueIndex;
            indices[i2] = uniqueIndex;
            uniqueIndices.push(i2);
        }
    }
    // Now we know where each of the unique elements are located along the axis
    // (uniqueIndices). Extract them from input buffer and store them in the
    // output buffer.
    const outputTmpShape = newShape.slice();
    outputTmpShape[1] = Object.keys(uniqueElements).length;
    const outputBuffer = new (0, _tfjsCore.TensorBuffer)(outputTmpShape, dtype);
    uniqueIndices.forEach((uniqueElementIndex, i)=>{
        for(let m = 0; m < newShape[0]; m++)for(let n = 0; n < newShape[2]; n++)outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);
    });
    // The output shape can be calculated from the input shape with the size of
    // the given axis replaced by the number of unique elements along that axis.
    const outputShape = shape.slice();
    outputShape[$axis] = outputTmpShape[1];
    return {
        outputValues: outputBuffer.values,
        outputShape,
        indices
    };
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HhFt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unpack", ()=>unpack);
parcelHelpers.export(exports, "unpackConfig", ()=>unpackConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
var _slice = require("./Slice");
function unpack(args) {
    const { inputs , backend , attrs  } = args;
    const { value  } = inputs;
    let { axis  } = attrs;
    if (axis < 0) axis += value.shape.length;
    const valueRank = value.shape.length;
    const num = value.shape[axis];
    const outShape = new Array(valueRank - 1);
    let outIndex = 0;
    for(let i = 0; i < valueRank; i++)if (i !== axis) outShape[outIndex++] = value.shape[i];
    const begin = new Array(valueRank).fill(0);
    const size = value.shape.slice();
    size[axis] = 1;
    const res = new Array(num);
    for(let i1 = 0; i1 < res.length; i1++){
        begin[axis] = i1;
        const tempRes = (0, _slice.slice)({
            inputs: {
                x: value
            },
            backend,
            attrs: {
                begin,
                size
            }
        });
        res[i1] = (0, _reshape.reshape)({
            inputs: {
                x: tempRes
            },
            backend,
            attrs: {
                shape: outShape
            }
        });
        backend.disposeIntermediateTensorInfo(tempRes);
    }
    return res;
}
const unpackConfig = {
    kernelName: (0, _tfjsCore.Unpack),
    backendName: "cpu",
    kernelFunc: unpack
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"hjnko","./Slice":"gvcFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7EUu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unsortedSegmentSum", ()=>unsortedSegmentSum);
parcelHelpers.export(exports, "unsortedSegmentSumConfig", ()=>unsortedSegmentSumConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _cast = require("./Cast");
var _equal = require("./Equal");
var _expandDims = require("./ExpandDims");
var _multiply = require("./Multiply");
var _pack = require("./Pack");
var _sum = require("./Sum");
function unsortedSegmentSum(args) {
    const { inputs , backend , attrs  } = args;
    const { x , segmentIds  } = inputs;
    const { numSegments  } = attrs;
    (0, _cpuUtil.assertNotComplex)(x, "unsortedSegmentSum");
    const xRank = x.shape.length;
    const segmentIdsRank = segmentIds.shape.length;
    const res = [];
    const intermediates = [];
    // Reshape the segment id's so that they can be broadcast with
    // x. The new shape should be [segmentIds.shape, 1, ..., 1]
    const numIters = xRank - segmentIdsRank;
    let $segmentIds = segmentIds;
    for(let i = 0; i < numIters; ++i){
        const expanded = (0, _expandDims.expandDims)({
            inputs: {
                input: $segmentIds
            },
            backend,
            attrs: {
                dim: i + 1
            }
        });
        $segmentIds = expanded;
        intermediates.push(expanded);
    }
    for(let i1 = 0; i1 < numSegments; ++i1){
        const scalarValue = (0, _tfjsCore.util).createScalarValue(i1, "int32");
        const segmentId = backend.makeTensorInfo([], "int32", scalarValue);
        const mask = (0, _equal.equal)({
            inputs: {
                a: segmentId,
                b: $segmentIds
            },
            backend
        });
        const maskCasted = (0, _cast.cast)({
            inputs: {
                x: mask
            },
            backend,
            attrs: {
                dtype: "float32"
            }
        });
        const mul = (0, _multiply.multiply)({
            inputs: {
                a: maskCasted,
                b: x
            },
            backend
        });
        const sumTensorInfo = (0, _sum.sum)({
            inputs: {
                x: mul
            },
            backend,
            attrs: {
                axis: 0,
                keepDims: false
            }
        });
        res.push(sumTensorInfo);
        intermediates.push(segmentId);
        intermediates.push(mask);
        intermediates.push(maskCasted);
        intermediates.push(mul);
        intermediates.push(sumTensorInfo);
    }
    const result = (0, _pack.pack)({
        inputs: res,
        backend,
        attrs: {
            axis: 0
        }
    });
    intermediates.forEach((t)=>backend.disposeIntermediateTensorInfo(t));
    return result;
}
const unsortedSegmentSumConfig = {
    kernelName: (0, _tfjsCore.UnsortedSegmentSum),
    backendName: "cpu",
    kernelFunc: unsortedSegmentSum
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Cast":"hBSGR","./Equal":"j7yhU","./ExpandDims":"8V7D8","./Multiply":"8yTpL","./Pack":"2K9N7","./Sum":"43iZ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHXpH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathBackendCPU", ()=>(0, _backendCpu.MathBackendCPU));
parcelHelpers.export(exports, "version_cpu", ()=>(0, _version.version));
parcelHelpers.export(exports, "shared", ()=>_shared);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /*
 * base.ts contains all the exports from tfjs-backend-cpu
 * without auto-kernel registration
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _backendCpu = require("./backend_cpu");
var _shared = require("./shared");
var _version = require("./version");
// Side effects for default initialization of MathBackendCPU
(0, _tfjsCore.registerBackend)("cpu", ()=>new (0, _backendCpu.MathBackendCPU)(), 1 /* priority */ );

},{"@tensorflow/tfjs-core":"2votT","./backend_cpu":"grqpM","./shared":"bDxeV","./version":"iQSdN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grqpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathBackendCPU", ()=>MathBackendCPU);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("./cpu_util");
const whereImpl = (0, _tfjsCore.kernel_impls).whereImpl;
class MathBackendCPU extends (0, _tfjsCore.KernelBackend) {
    constructor(){
        super();
        this.blockSize = 48;
        this.firstUse = true;
        this.data = new (0, _tfjsCore.DataStorage)(this, (0, _tfjsCore.engine)());
    }
    nextDataId() {
        return MathBackendCPU.nextDataId++;
    }
    write(values, shape, dtype) {
        if (this.firstUse) {
            this.firstUse = false;
            if ((0, _tfjsCore.env)().get("IS_NODE")) (0, _tfjsCore.backend_util).warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================");
        }
        const dataId = {
            id: this.nextDataId()
        };
        this.data.set(dataId, {
            values,
            dtype,
            refCount: 1
        });
        return dataId;
    }
    /**
     * Create a data bucket in cpu backend.
     * @param shape Shape of the `TensorInfo`.
     * @param dtype DType of the `TensorInfo`.
     * @param values The value of the `TensorInfo` stored as a flattened array.
     */ makeTensorInfo(shape, dtype, values) {
        let outId;
        if (dtype === "string" && values != null && values.length > 0 && (0, _tfjsCore.util).isString(values[0])) {
            const encodedValues = values.map((d)=>(0, _tfjsCore.util).encodeString(d));
            outId = this.write(encodedValues, shape, dtype);
        } else outId = this.write(values, shape, dtype);
        return {
            dataId: outId,
            shape,
            dtype
        };
    }
    /** Return refCount of a `TensorData`. */ refCount(dataId) {
        if (this.data.has(dataId)) {
            const tensorData = this.data.get(dataId);
            return tensorData.refCount;
        }
        return 0;
    }
    /** Increase refCount of a `TensorData`. */ incRef(dataId) {
        const tensorData = this.data.get(dataId);
        tensorData.refCount++;
    }
    /** Decrease refCount of a `TensorData`. */ decRef(dataId) {
        if (this.data.has(dataId)) {
            const tensorData = this.data.get(dataId);
            tensorData.refCount--;
        }
    }
    move(dataId, values, shape, dtype, refCount) {
        this.data.set(dataId, {
            values,
            dtype,
            refCount
        });
    }
    numDataIds() {
        return this.data.numDataIds();
    }
    async read(dataId) {
        return this.readSync(dataId);
    }
    readSync(dataId) {
        const { dtype , complexTensorInfos  } = this.data.get(dataId);
        if (dtype === "complex64") {
            const realValues = this.readSync(complexTensorInfos.real.dataId);
            const imagValues = this.readSync(complexTensorInfos.imag.dataId);
            return (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realValues, imagValues);
        }
        return this.data.get(dataId).values;
    }
    bufferSync(t) {
        const data = this.readSync(t.dataId);
        if (t.dtype === "string") try {
            // Decode the bytes into string.
            const strings = data.map((d)=>(0, _tfjsCore.util).decodeString(d));
            return (0, _tfjsCore.buffer)(t.shape, t.dtype, strings);
        } catch (_a) {
            throw new Error("Failed to decode encoded string bytes into utf-8");
        }
        return (0, _tfjsCore.buffer)(t.shape, t.dtype, data);
    }
    makeOutput(values, shape, dtype) {
        return (0, _tfjsCore.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);
    }
    /**
     * Dispose the memory if the dataId has 0 refCount. Return true if the memory
     * is released or memory is not managed in this backend, false if memory is
     * not cleared.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */ disposeData(dataId, force = false) {
        if (this.data.has(dataId)) {
            this.data.get(dataId).refCount--;
            if (!force && this.data.get(dataId).refCount > 0) return false;
            const { complexTensorInfos  } = this.data.get(dataId);
            if (complexTensorInfos != null) {
                this.disposeData(complexTensorInfos.real.dataId, true);
                this.disposeData(complexTensorInfos.imag.dataId, true);
            }
            this.data.delete(dataId);
        }
        return true;
    }
    disposeIntermediateTensorInfo(tensorInfo) {
        this.disposeData(tensorInfo.dataId);
    }
    async time(f) {
        const start = (0, _tfjsCore.util).now();
        f();
        const kernelMs = (0, _tfjsCore.util).now() - start;
        return {
            kernelMs
        };
    }
    memory() {
        return {
            // Unreliable due to automatic gc. The numbers above are cumulative.
            unreliable: true,
            reasons: [
                "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."
            ]
        };
    }
    where(condition) {
        (0, _cpuUtil.assertNotComplex)([
            condition
        ], "where");
        const condVals = this.readSync(condition.dataId);
        return whereImpl(condition.shape, condVals);
    }
    dispose() {}
    floatPrecision() {
        return 32;
    }
    /** Returns the smallest representable number.  */ epsilon() {
        return super.epsilon();
    }
}
MathBackendCPU.nextDataId = 0;

},{"@tensorflow/tfjs-core":"2votT","./cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDxeV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Shared functionality among backends.
parcelHelpers.export(exports, "simpleAbsImpl", ()=>(0, _abs.simpleAbsImpl));
parcelHelpers.export(exports, "addImpl", ()=>(0, _add.addImpl));
parcelHelpers.export(exports, "bincountImpl", ()=>(0, _bincountImpl.bincountImpl));
parcelHelpers.export(exports, "bincountReduceImpl", ()=>(0, _bincountImpl.bincountReduceImpl));
parcelHelpers.export(exports, "castImpl", ()=>(0, _cast.castImpl));
parcelHelpers.export(exports, "ceilImpl", ()=>(0, _ceil.ceilImpl));
parcelHelpers.export(exports, "concatImpl", ()=>(0, _concatImpl.concatImpl));
parcelHelpers.export(exports, "equalImpl", ()=>(0, _equal.equalImpl));
parcelHelpers.export(exports, "expImpl", ()=>(0, _exp.expImpl));
parcelHelpers.export(exports, "expm1Impl", ()=>(0, _expm1.expm1Impl));
parcelHelpers.export(exports, "floorImpl", ()=>(0, _floor.floorImpl));
parcelHelpers.export(exports, "gatherNdImpl", ()=>(0, _gatherNdImpl.gatherNdImpl));
parcelHelpers.export(exports, "gatherV2Impl", ()=>(0, _gatherV2Impl.gatherV2Impl));
parcelHelpers.export(exports, "greaterImpl", ()=>(0, _greater.greaterImpl));
parcelHelpers.export(exports, "greaterEqualImpl", ()=>(0, _greaterEqual.greaterEqualImpl));
parcelHelpers.export(exports, "lessImpl", ()=>(0, _less.lessImpl));
parcelHelpers.export(exports, "lessEqualImpl", ()=>(0, _lessEqual.lessEqualImpl));
parcelHelpers.export(exports, "linSpaceImpl", ()=>(0, _linSpaceImpl.linSpaceImpl));
parcelHelpers.export(exports, "logImpl", ()=>(0, _log.logImpl));
parcelHelpers.export(exports, "maxImpl", ()=>(0, _maxImpl.maxImpl));
parcelHelpers.export(exports, "maximumImpl", ()=>(0, _maximum.maximumImpl));
parcelHelpers.export(exports, "minimumImpl", ()=>(0, _minimum.minimumImpl));
parcelHelpers.export(exports, "multiplyImpl", ()=>(0, _multiply.multiplyImpl));
parcelHelpers.export(exports, "negImpl", ()=>(0, _neg.negImpl));
parcelHelpers.export(exports, "notEqualImpl", ()=>(0, _notEqual.notEqualImpl));
parcelHelpers.export(exports, "prodImpl", ()=>(0, _prod.prodImpl));
parcelHelpers.export(exports, "raggedTensorToTensorImpl", ()=>(0, _raggedTensorToTensorImpl.raggedTensorToTensorImpl));
parcelHelpers.export(exports, "rangeImpl", ()=>(0, _rangeImpl.rangeImpl));
parcelHelpers.export(exports, "rsqrtImpl", ()=>(0, _rsqrt.rsqrtImpl));
parcelHelpers.export(exports, "scatterImpl", ()=>(0, _scatterImpl.scatterImpl));
parcelHelpers.export(exports, "sigmoidImpl", ()=>(0, _sigmoid.sigmoidImpl));
parcelHelpers.export(exports, "sliceImpl", ()=>(0, _slice.sliceImpl));
parcelHelpers.export(exports, "sparseFillEmptyRowsImpl", ()=>(0, _sparseFillEmptyRowsImpl.sparseFillEmptyRowsImpl));
parcelHelpers.export(exports, "sparseReshapeImpl", ()=>(0, _sparseReshapeImpl.sparseReshapeImpl));
parcelHelpers.export(exports, "sparseSegmentReductionImpl", ()=>(0, _sparseSegmentReductionImpl.sparseSegmentReductionImpl));
parcelHelpers.export(exports, "sqrtImpl", ()=>(0, _sqrt.sqrtImpl));
parcelHelpers.export(exports, "squaredDifferenceImpl", ()=>(0, _squaredDifference.squaredDifferenceImpl));
parcelHelpers.export(exports, "stridedSliceImpl", ()=>(0, _stridedSliceImpl.stridedSliceImpl));
parcelHelpers.export(exports, "stringNGramsImpl", ()=>(0, _stringNGramsImpl.stringNGramsImpl));
parcelHelpers.export(exports, "stringSplitImpl", ()=>(0, _stringSplitImpl.stringSplitImpl));
parcelHelpers.export(exports, "stringToHashBucketFastImpl", ()=>(0, _stringToHashBucketFastImpl.stringToHashBucketFastImpl));
parcelHelpers.export(exports, "subImpl", ()=>(0, _sub.subImpl));
parcelHelpers.export(exports, "tileImpl", ()=>(0, _tileImpl.tileImpl));
parcelHelpers.export(exports, "topKImpl", ()=>(0, _topKImpl.topKImpl));
parcelHelpers.export(exports, "transposeImpl", ()=>(0, _transposeImpl.transposeImpl));
parcelHelpers.export(exports, "uniqueImpl", ()=>(0, _uniqueImpl.uniqueImpl));
var _abs = require("./kernels/Abs");
var _add = require("./kernels/Add");
var _bincountImpl = require("./kernels/Bincount_impl");
var _cast = require("./kernels/Cast");
var _ceil = require("./kernels/Ceil");
var _concatImpl = require("./kernels/Concat_impl");
var _equal = require("./kernels/Equal");
var _exp = require("./kernels/Exp");
var _expm1 = require("./kernels/Expm1");
var _floor = require("./kernels/Floor");
var _gatherNdImpl = require("./kernels/GatherNd_Impl");
var _gatherV2Impl = require("./kernels/GatherV2_impl");
var _greater = require("./kernels/Greater");
var _greaterEqual = require("./kernels/GreaterEqual");
var _less = require("./kernels/Less");
var _lessEqual = require("./kernels/LessEqual");
var _linSpaceImpl = require("./kernels/LinSpace_impl");
var _log = require("./kernels/Log");
var _maxImpl = require("./kernels/Max_impl");
var _maximum = require("./kernels/Maximum");
var _minimum = require("./kernels/Minimum");
var _multiply = require("./kernels/Multiply");
var _neg = require("./kernels/Neg");
var _notEqual = require("./kernels/NotEqual");
var _prod = require("./kernels/Prod");
var _raggedTensorToTensorImpl = require("./kernels/RaggedTensorToTensor_impl");
var _rangeImpl = require("./kernels/Range_impl");
var _rsqrt = require("./kernels/Rsqrt");
var _scatterImpl = require("./kernels/Scatter_impl");
var _sigmoid = require("./kernels/Sigmoid");
var _slice = require("./kernels/Slice");
var _sparseFillEmptyRowsImpl = require("./kernels/SparseFillEmptyRows_impl");
var _sparseReshapeImpl = require("./kernels/SparseReshape_impl");
var _sparseSegmentReductionImpl = require("./kernels/SparseSegmentReduction_impl");
var _sqrt = require("./kernels/Sqrt");
var _squaredDifference = require("./kernels/SquaredDifference");
var _stridedSliceImpl = require("./kernels/StridedSlice_impl");
var _stringNGramsImpl = require("./kernels/StringNGrams_impl");
var _stringSplitImpl = require("./kernels/StringSplit_impl");
var _stringToHashBucketFastImpl = require("./kernels/StringToHashBucketFast_impl");
var _sub = require("./kernels/Sub");
var _tileImpl = require("./kernels/Tile_impl");
var _topKImpl = require("./kernels/TopK_impl");
var _transposeImpl = require("./kernels/Transpose_impl");
var _uniqueImpl = require("./kernels/Unique_impl");

},{"./kernels/Abs":"a2UER","./kernels/Add":"5SGy9","./kernels/Bincount_impl":"iPuVl","./kernels/Cast":"hBSGR","./kernels/Ceil":"2laFa","./kernels/Concat_impl":"j8xJI","./kernels/Equal":"j7yhU","./kernels/Exp":"d8DGt","./kernels/Expm1":"c75hq","./kernels/Floor":"lJzfx","./kernels/GatherNd_Impl":"dmIeh","./kernels/GatherV2_impl":"jDwXt","./kernels/Greater":"ldYQI","./kernels/GreaterEqual":"lrBFx","./kernels/Less":"eN9G8","./kernels/LessEqual":"9iCsf","./kernels/LinSpace_impl":"aFG7i","./kernels/Log":"hSbjw","./kernels/Max_impl":"hvZsa","./kernels/Maximum":"RXVtR","./kernels/Minimum":"gJ4x0","./kernels/Multiply":"8yTpL","./kernels/Neg":"gxJzs","./kernels/NotEqual":"cKKl8","./kernels/Prod":"6PRq1","./kernels/RaggedTensorToTensor_impl":"hBreN","./kernels/Range_impl":"hdHMz","./kernels/Rsqrt":"7zSL0","./kernels/Scatter_impl":"hBEYb","./kernels/Sigmoid":"1n8M4","./kernels/Slice":"gvcFv","./kernels/SparseFillEmptyRows_impl":"9VOGB","./kernels/SparseReshape_impl":"1hQec","./kernels/SparseSegmentReduction_impl":"1SSCR","./kernels/Sqrt":"7rUbU","./kernels/SquaredDifference":"b000w","./kernels/StridedSlice_impl":"hw65R","./kernels/StringNGrams_impl":"78YUY","./kernels/StringSplit_impl":"amnSx","./kernels/StringToHashBucketFast_impl":"gVAXQ","./kernels/Sub":"anrdl","./kernels/Tile_impl":"5HNxB","./kernels/TopK_impl":"ixo2J","./kernels/Transpose_impl":"fwwXp","./kernels/Unique_impl":"eORzN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQSdN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "3.20.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["buQZA","jSHEf"], "jSHEf", "parcelRequire86ed")

//# sourceMappingURL=index.6d8e38f9.js.map
