{"mappings":"AAAA,2CAA2C;AAC3C,8CAA8C;AAC9C,uBAAuB;AACvB,oCAAoC;AAEpC,IAAI,MAAM,GAAG,SAAS,MAAM,EAAE;IAC5B,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EACvB,GAAG,GAAG,MAAM,CAAC,MAAM,EACnB,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,EACpC,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,EAC7B,QAAQ,GAAG,CAAC,AAAC;IACf,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IACnB,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;IACpB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,MAAM,GAAG,GAAG,EAAE,AAAC;IACf,MAAM,QAAQ,GAAG,IAAI,GAAG,GAAG,AAAC;IAC5B,IAAI,CAAC,GAAG,CAAC,AAAC;IACV,gEAAgE;IAIhE,SAAS,IAAI,GAAG;QACd,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,sFAAsF;QACtF,yDAAyD;QACzD,IAAI,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,AAAC;QAC3B,2BAA2B;QAC3B,gBAAgB;QAChB,eAAe;QACf,MAAM,GAAG;YAAE,GAAG;YAAE,GAAG;YAAE,IAAI,EAAE,CAAC;SAAE,CAAC;QAE/B,IAAI,EAAE,CAAC;KACR;IAGD,SAAS,IAAI,GAAG;QACd,uBAAuB;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAClB,EAAE,GAAG,GAAG,GAAG,QAAQ,AAAC;QACtB,0CAA0C;QAE1C,IAAI,EAAE,GAAG,QAAQ,EAAE;YACjB,MAAM,EAAE,CAAC;YACT,QAAQ,GAAG,GAAG,CAAC;SAChB;QACD,YAAY;QAEZ,YAAY;QAEZ,4BAA4B;QAC5B,kBAAkB;QAClB,IAAI;QAEJ,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;KACjC;IAED,SAAS,MAAM,GAAG;QAChB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9B,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/B,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACzB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,kCAAkC;QAClC,CAAC,EAAE,CAAC;KAEL;IAGD,IAAI,EAAE,CAAC;IACP,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;CAElB;AAID,MAAM,CAAC,MAAM,GAAG,WAAW;IACzB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,gCAAgC;IAChC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,AAAC;AACrB,YAAY;CACb","sources":["js/engine.js"],"sourcesContent":["// require('@tensorflow/tfjs-backend-cpu');\n// var tf = require( '@tensorflow/tfjs-core');\n// import * as tf from;\n// import * as tf from 'tensorflow';\n\nvar Engine = function(global) {\n  var doc = global.document,\n    win = global.window,\n    canvas = doc.createElement('canvas'),\n    ctx = canvas.getContext('2d'),\n    lastTime = 0;\n  canvas.width = 707;\n  canvas.height = 606;\n  doc.body.appendChild(canvas);\n  global.ctx = ctx;\n  const FPS = 50;\n  const timestep = 1000 / FPS;\n  var x = 0;\n  // let bodies: { pos: tf.Tensor, vel: tf.Tensor, size: number };\n\n\n\n  function init() {\n    console.log('init');\n    console.log('init');\n    console.log('init');\n    // let pos = tf.randomUniform([numBodies, 2], frameSize[0] * 0.3, frameSize[0] * 0.7);\n    // let vel = tf.randomUniform([numBodies, 2], -0.1, 0.2);\n    let pos = null, vel = null;\n    // vel = tf.tensor([1,2,3])\n    // vel = tf.rand\n    // vel.print();\n    bodies = { pos, vel, size: 5 };\n\n    main();\n  }\n\n\n  function main() {\n    // console.log('main');\n    var now = Date.now(),\n      dt = now - lastTime;\n    // console.log('time', now, lastTime, dt);\n\n    if (dt > timestep) {\n      update();\n      lastTime = now;\n    }\n    // render();\n\n    // update();\n\n    // if (game_over === true) {\n    //   // refresh();\n    // }\n\n    win.requestAnimationFrame(main);\n  }\n\n  function update() {\n    ctx.beginPath();\n    ctx.clearRect(0, 0, 500, 500);\n    ctx.strokeRect(0, 0, 500, 500);\n    ctx.rect(x, x, 100, 100);\n    ctx.fill();\n    // canvas.getContext('2d').begin()\n    x++;\n\n  }\n\n\n  init();\n  global.ctx = ctx;\n\n}\n\n\n\nwindow.onload = function() {\n  console.log('load');\n  // window.onload = Engine(this);\n  var a = Engine(this);\n  // a.init();\n}\n"],"names":[],"version":3,"file":"index.74345d3d.js.map","sourceRoot":"/__parcel_source_root/"}